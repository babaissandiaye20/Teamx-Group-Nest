var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.788,1,2.694]],["body/controllers/AppController.html",[0,2.994,1,4.511,2,2.623,3,0.266,4,0.232,5,0.232,6,4.158,7,0.49,8,1.489,9,5.724,10,1.909,11,0.022,12,0.709,13,4.872,14,1.218,15,1.051,16,0.551,17,0.913,18,4.409,19,4.872,20,0.266,21,0.073,22,2.293,23,2.153,24,1.361,25,4.872,26,0.018,27,0.018]],["title/modules/AppModule.html",[28,1.316,29,2.437]],["body/modules/AppModule.html",[2,1.889,3,0.192,4,0.167,5,0.167,11,0.022,16,0.634,17,0.657,20,0.192,21,0.053,26,0.014,27,0.014,28,2.033,29,4.928,30,1.651,31,1.651,32,1.889,33,1.889,34,1.651,35,2.959,36,1.889,37,2.995,38,2.995,39,2.995,40,3.711,41,4.017,42,3.711,43,4.017,44,4.017,45,3.711,46,3.448,47,2.592,48,1.889,49,1.763,50,3.509,51,3.02,52,3.509,53,2.995,54,5.049,55,2.403,56,2.656,57,1.889,58,3.509,59,3.509,60,3.509,61,3.509,62,3.509,63,3.509,64,3.509,65,3.509,66,3.509,67,1.763,68,3.509,69,2.656,70,1.226,71,2.656,72,3.509,73,2.033]],["title/injectables/AppService.html",[18,2.437,74,0.59]],["body/injectables/AppService.html",[3,0.276,4,0.241,5,0.241,7,0.509,8,1.524,9,5.798,11,0.021,12,0.736,14,1.264,15,1.075,16,0.468,17,0.948,18,4.175,20,0.276,21,0.076,24,1.413,26,0.018,27,0.018,74,1.01,75,1.767,76,4.317,77,5.059,78,5.059,79,5.059]],["title/classes/BaseController.html",[21,0.053,80,2.232]],["body/classes/BaseController.html",[0,1.051,3,0.114,4,0.1,5,0.1,7,0.21,8,0.821,10,2.08,11,0.022,12,0.808,14,1.327,15,1.106,16,0.462,17,0.392,20,0.114,21,0.031,22,0.984,23,0.924,24,1.483,26,0.01,27,0.01,70,2.333,80,2.062,81,0.819,82,1.785,83,2.033,84,1.651,85,2.488,86,1.904,87,1.904,88,2.513,89,0.819,90,2.091,91,3.076,92,2.091,93,1.64,94,1.378,95,0.755,96,1.24,97,1.126,98,3.076,99,2.091,100,1.546,101,2.091,102,4.393,103,3.286,104,2.805,105,3.022,106,3.286,107,2.251,108,2.091,109,1.769,110,2.072,111,1.051,112,3.286,113,1.785,114,3.927,115,2.091,116,4.147,117,2.805,118,3.465,119,2.091,120,0.924,121,0.924,122,1.651,123,1.583,124,1.785,125,1.785,126,2.516,127,3.073,128,2.805,129,2.091,130,1.212,131,1.785,132,3.138,133,3.073,134,3.483,135,2.091,136,1.212,137,1.583,138,3.483,139,2.091,140,1.051,141,2.477,142,2.091,143,2.091,144,3.927,145,2.091,146,2.488,147,1.583,148,1.583,149,2.251,150,1.583,151,4.204,152,4.204,153,4.269,154,3.073,155,0.869,156,1.051,157,1.785,158,2.091,159,1.126,160,1.785,161,2.091,162,4.531,163,1.904,164,3.636,165,1.785,166,2.091,167,1.785,168,1.785,169,2.091,170,1.583,171,2.091,172,1.583,173,1.785,174,2.091,175,1.785,176,1.785,177,2.091,178,2.091,179,2.091,180,2.091]],["title/classes/BaseEntity.html",[21,0.053,156,1.788]],["body/classes/BaseEntity.html",[3,0.204,4,0.178,5,0.178,7,0.376,10,2.379,11,0.022,12,0.884,16,0.525,20,0.204,21,0.056,26,0.015,27,0.015,57,2.01,81,1.463,95,0.825,105,2.682,120,2.508,126,1.857,155,1.552,156,2.524,181,3.187,182,1.658,183,5.676,184,5.676,185,4.844,186,5.676,187,5.023,188,4.595,189,3.802,190,5.023,191,3.734,192,6.777,193,2.279,194,3.734,195,3.44,196,3.734,197,5.023,198,5.023,199,4.287,200,3.734,201,3.44,202,3.734,203,5.023,204,3.734,205,3.734,206,4.595,207,3.151,208,4.795,209,5.023,210,2.827,211,1.876,212,1.65,213,2.827,214,5.023,215,3.734,216,2.827]],["title/injectables/BaseService.html",[74,0.59,91,2.062]],["body/injectables/BaseService.html",[3,0.113,4,0.099,5,0.099,7,0.209,8,0.816,11,0.022,12,0.806,14,1.322,15,1.104,16,0.512,17,0.388,20,0.113,21,0.031,23,1.784,24,1.478,26,0.01,27,0.01,70,2.33,74,0.541,75,0.724,83,1.442,84,1.64,86,1.891,87,1.891,88,1.64,89,1.279,91,1.891,93,1.635,94,1.236,95,0.753,96,1.236,97,1.757,98,3.065,102,1.301,107,1.42,109,1.116,110,2.067,111,1.64,118,1.77,120,0.916,121,0.916,122,1.042,126,2.121,130,1.891,136,1.891,140,1.64,141,2.465,144,1.77,156,1.042,157,1.77,159,1.116,160,1.77,193,1.848,199,2.786,211,1.042,213,1.569,216,1.569,217,1.77,218,2.048,219,1.569,220,2.465,221,2.301,222,2.047,223,2.073,224,2.048,225,2.073,226,2.873,227,2.073,228,2.048,229,2.073,230,2.073,231,2.073,232,2.073,233,2.073,234,1.569,235,1.569,236,3.056,237,3.319,238,1.478,239,2.489,240,2.073,241,2.073,242,3.319,243,3.319,244,3.499,245,4.515,246,3.065,247,3.623,248,3.065,249,3.623,250,2.073,251,2.073,252,4.037,253,3.446,254,4.579,255,5.29,256,2.848,257,4.579,258,3.909,259,3.909,260,2.073,261,2.073,262,2.073,263,2.073,264,1.42,265,2.073,266,2.073,267,2.073,268,1.77,269,1.77,270,2.471,271,2.073,272,2.073,273,3.264,274,2.236,275,3.264,276,2.073,277,2.073,278,2.073]],["title/injectables/CloudinaryService.html",[45,2.062,74,0.59]],["body/injectables/CloudinaryService.html",[3,0.158,4,0.138,5,0.236,7,0.497,8,1.049,11,0.022,12,0.79,14,1.049,15,1.06,16,0.457,17,0.541,20,0.158,21,0.043,24,1.61,26,0.012,27,0.012,45,2.432,70,2.1,74,0.695,75,1.009,89,1.937,93,1.239,94,0.937,95,0.571,96,0.937,100,2.712,110,1.791,120,2.184,121,2.184,126,1.068,182,1.385,193,1.895,237,1.812,238,0.807,239,1.359,242,1.812,243,3.403,244,2.432,246,1.674,247,1.978,249,2.874,256,1.555,264,1.978,270,3.177,274,1.978,279,2.465,280,3.101,281,4.63,282,3.385,283,3.385,284,4.197,285,2.187,286,3.483,287,4.352,288,2.889,289,2.874,290,4.63,291,4.63,292,2.187,293,2.889,294,4.197,295,2.889,296,3.582,297,2.259,298,1.674,299,2.465,300,1.674,301,2.889,302,2.889,303,2.889,304,2.889,305,2.889,306,2.889,307,2.889,308,2.889,309,2.889,310,2.889,311,2.889,312,2.465,313,4.219,314,2.889,315,2.889,316,2.889,317,2.889,318,2.889,319,2.889,320,2.889,321,2.889,322,4.197,323,2.889,324,1.812,325,2.889,326,2.889,327,2.465,328,2.889,329,2.889,330,1.812,331,2.465,332,2.889,333,2.889,334,1.978,335,2.889,336,2.889,337,2.465,338,2.465,339,2.465,340,2.465,341,2.465,342,2.889,343,2.889]],["title/classes/CreateProductDto.html",[21,0.053,344,2.232]],["body/classes/CreateProductDto.html",[3,0.143,4,0.125,5,0.125,7,0.263,10,2.026,11,0.022,12,0.752,15,1.023,16,0.36,20,0.143,21,0.059,26,0.011,27,0.011,67,2.343,81,1.024,94,1.041,95,0.789,96,0.87,105,2.284,155,1.087,182,1.287,188,3.53,193,1.806,195,1.79,208,3.913,248,2.995,324,2.446,330,3.875,344,2.446,345,4.72,346,1.79,347,2.925,348,3.193,349,3.193,350,1.978,351,5.17,352,3.36,353,3.972,354,3.875,355,3.899,356,3.899,357,2.613,358,3.46,359,5.751,360,5.751,361,2.613,362,2.613,363,3.972,364,3.327,365,3.327,366,3.638,367,2.231,368,3.327,369,3.327,370,2.231,371,4.412,372,2.613,373,2.783,374,4.95,375,3.899,376,4.412,377,3.469,378,2.613,379,2.951,380,2.613,381,2.613,382,4.95,383,3.899,384,3.899,385,3.327,386,2.613,387,3.899,388,3.899,389,3.899,390,2.613,391,3.899,392,2.613,393,2.67,394,3.98,395,4.412,396,1.79,397,2.67,398,3.899,399,2.613,400,1.313,401,2.951,402,2.231,403,2.231,404,3.327,405,2.613,406,2.613,407,3.899,408,2.613]],["title/classes/CreateUserDto.html",[21,0.053,409,2.232]],["body/classes/CreateUserDto.html",[3,0.182,4,0.158,5,0.158,7,0.335,10,2.093,11,0.021,12,0.778,15,1.11,16,0.429,20,0.182,21,0.07,26,0.014,27,0.014,67,2.684,81,1.303,95,0.726,105,2.36,155,1.382,182,1.531,188,4.044,193,2.369,208,4.376,330,4.136,354,3.951,358,3.112,359,5.627,360,5.627,363,4.313,366,3.951,367,3.959,368,4.934,369,4.934,370,3.959,371,4.934,393,3.959,395,4.934,400,1.67,402,3.959,409,2.91,410,4.934,411,2.277,412,4.044,413,4.044,414,4.044,415,3.959,416,6.298,417,4.638,418,3.324,419,3.324,420,5.375,421,4.638,422,4.638,423,3.324,424,4.638,425,3.324]],["title/interfaces/DatabaseConfig.html",[426,1.175,427,2.232]],["body/interfaces/DatabaseConfig.html",[3,0.275,4,0.24,5,0.24,7,0.507,8,1.521,11,0.021,12,0.734,14,1.26,20,0.357,26,0.018,27,0.018,110,2.008,238,1.408,426,2.008,427,3.816,428,2.533,429,3.453,430,5.136,431,5.041,432,2.921,433,3.816,434,3.816,435,3.057]],["title/interfaces/DatabaseConnection.html",[426,1.175,432,2.062]],["body/interfaces/DatabaseConnection.html",[3,0.267,4,0.233,5,0.233,7,0.492,8,1.492,11,0.021,12,0.869,14,1.492,20,0.352,26,0.018,27,0.018,110,2.217,238,1.366,426,1.971,427,3.067,428,2.456,429,3.348,430,3.701,432,3.46,433,5.083,434,5.083,435,3,436,4.889,437,4.889]],["title/modules/DatabaseModule.html",[28,1.316,40,2.062]],["body/modules/DatabaseModule.html",[3,0.227,4,0.198,5,0.198,11,0.022,16,0.622,17,0.78,20,0.227,21,0.063,26,0.016,27,0.016,28,2.214,30,1.958,31,1.958,32,2.24,33,2.24,34,1.958,35,3.223,36,3.223,40,4.063,47,2.905,48,2.24,49,2.091,51,2.61,53,4.605,55,2.85,435,3.008,438,3.552,439,3.552,440,3.552,441,4.496,442,3.896,443,4.161,444,4.161,445,4.161,446,3.695,447,4.161,448,2.85,449,2.61,450,3.552]],["title/injectables/DatabaseService.html",[74,0.59,441,2.232]],["body/injectables/DatabaseService.html",[3,0.238,4,0.208,5,0.208,7,0.439,8,1.39,11,0.022,12,0.891,14,1.39,16,0.514,17,0.817,20,0.238,21,0.066,26,0.016,27,0.016,70,2.378,73,2.527,74,0.921,75,1.523,89,2.179,93,1.288,94,0.974,95,0.593,96,0.974,239,2.616,280,2.736,300,2.527,432,3.735,435,2.191,441,3.488,448,2.987,451,3.722,452,6.809,453,6.809,454,4.361,455,4.361,456,5.56,457,4.361,458,4.361,459,4.361,460,4.361,461,4.361]],["title/injectables/ExceptionService.html",[74,0.59,221,1.479]],["body/injectables/ExceptionService.html",[3,0.155,4,0.135,5,0.135,7,0.286,8,1.037,11,0.022,12,0.898,14,1.494,15,1.215,16,0.453,17,0.533,20,0.155,21,0.062,22,1.338,23,1.256,24,1.6,26,0.012,27,0.012,74,0.687,75,0.993,89,1.114,93,1.823,94,1.378,95,0.839,96,1.378,100,2.694,159,2.899,193,0.993,221,1.725,222,1.991,238,1.67,244,1.647,246,1.647,280,3.073,358,2.637,377,1.784,400,1.429,462,2.427,463,4.149,464,4.149,465,4.149,466,4.149,467,4.149,468,4.149,469,2.843,470,2.843,471,4.149,472,4.149,473,2.843,474,2.843,475,2.152,476,4.149,477,2.843,478,6.453,479,4.149,480,2.843,481,4.149,482,2.843,483,4.149,484,5.269,485,2.843,486,2.841,487,4.149,488,2.843,489,2.843,490,2.843,491,2.152,492,2.152,493,2.152,494,2.152,495,1.947,496,2.152,497,2.152,498,2.152,499,2.427,500,2.427,501,5.385,502,2.843,503,2.843,504,2.843,505,5.385,506,2.843,507,2.843,508,2.843,509,2.843,510,2.843,511,2.843,512,2.843,513,2.843,514,2.843,515,2.843,516,2.843,517,2.843,518,2.843,519,2.843]],["title/interfaces/FileStorageService.html",[297,1.916,426,1.175]],["body/interfaces/FileStorageService.html",[3,0.236,4,0.206,5,0.29,7,0.435,8,1.382,11,0.021,12,0.805,14,1.382,15,1.233,20,0.333,26,0.016,27,0.016,93,1.633,94,1.234,95,0.752,96,1.234,110,2.121,126,1.598,238,1.208,282,4.175,283,4.175,285,3.272,286,3.936,287,4.652,289,3.787,292,3.272,297,2.976,298,2.504,324,2.711,426,1.825,428,2.172,435,2.172,520,2.96,521,4.322,522,3.787,523,4.322,524,3.272]],["title/interfaces/FileUploadResult.html",[298,2.062,426,1.175]],["body/interfaces/FileUploadResult.html",[3,0.258,4,0.225,5,0.278,7,0.474,11,0.021,15,1.254,20,0.347,26,0.017,27,0.017,95,0.794,110,1.928,126,2.452,182,1.928,238,1.317,282,3.229,283,3.229,286,3.383,287,3.999,289,3.229,297,2.538,298,3.383,324,4.16,426,1.928,428,2.369,435,2.369,520,3.229,524,3.569]],["title/classes/FindProductDto.html",[21,0.053,525,2.437]],["body/classes/FindProductDto.html",[3,0.206,4,0.18,5,0.18,7,0.38,10,2.236,11,0.021,12,0.83,15,0.892,16,0.468,20,0.206,21,0.076,26,0.015,27,0.015,81,1.478,94,1.274,95,0.776,96,1.461,105,2.521,155,1.569,182,1.67,193,1.766,346,2.584,348,3.908,349,3.908,350,4.319,353,3.464,354,4.105,363,3.464,364,3.22,373,3.282,374,4.317,376,5.203,377,3.173,382,4.317,385,4.317,393,3.464,394,4.869,396,2.584,397,4.175,400,1.896,401,4.614,404,4.317,525,3.464,526,5.203,527,5.585,528,5.585,529,3.773,530,3.773,531,5.058,532,5.058,533,3.773,534,3.773]],["title/classes/FindUserDto.html",[21,0.053,535,2.437]],["body/classes/FindUserDto.html",[3,0.18,4,0.157,5,0.157,7,0.332,10,2.375,11,0.021,12,0.882,15,1.107,16,0.426,20,0.18,21,0.069,26,0.014,27,0.014,81,1.291,95,0.824,96,1.511,105,2.678,155,1.37,182,1.522,193,1.61,248,2.67,350,4.587,354,4.247,363,3.157,373,3.1,393,3.943,396,2.256,397,4.301,400,1.655,401,4.754,403,3.934,411,2.256,412,4.024,413,4.024,414,4.024,415,3.934,420,3.934,527,5.36,528,5.614,535,3.157,536,5.36,537,3.335,538,4.044,539,3.294,540,3.294,541,3.294,542,3.294,543,3.294,544,3.294,545,4.609,546,3.294,547,3.294,548,4.609,549,3.157,550,2.67,551,3.294,552,3.294,553,5.316,554,3.294,555,3.294,556,3.294,557,2.494,558,4.609,559,2.494]],["title/interfaces/IBaseRepository.html",[220,1.916,426,1.175]],["body/interfaces/IBaseRepository.html",[3,0.202,4,0.177,5,0.177,7,0.373,8,1.249,11,0.021,12,0.947,14,1.627,15,1.242,16,0.343,20,0.202,26,0.015,27,0.015,83,2.208,84,2.511,88,2.511,93,1.922,94,1.453,95,0.885,96,1.453,98,3.772,102,3.796,110,2.325,111,2.511,122,1.862,126,2.238,132,3.135,140,2.511,211,1.862,218,3.135,220,2.69,226,3.796,228,3.135,426,1.223,428,1.862,522,2.538,560,3.163,561,4.265,562,4.997,563,3.705,564,4.265,565,3.705,566,3.705,567,3.705,568,4.265,569,3.705,570,3.705]],["title/injectables/MongoConfig.html",[74,0.59,442,2.062]],["body/injectables/MongoConfig.html",[3,0.245,4,0.214,5,0.214,7,0.451,8,1.414,11,0.022,12,0.823,14,1.12,16,0.573,17,0.84,20,0.245,21,0.067,22,2.109,24,1.252,26,0.017,27,0.017,54,5.852,55,3.07,71,5.083,74,0.937,75,1.565,89,1.756,93,1.324,94,1.001,95,0.609,96,1.001,238,1.252,300,2.597,427,3.549,430,4.929,442,3.278,448,3.07,571,3.825,572,4.482,573,4.482,574,4.482,575,4.482,576,4.482]],["title/injectables/MongoConnection.html",[74,0.59,446,2.437]],["body/injectables/MongoConnection.html",[3,0.215,4,0.188,5,0.188,7,0.396,8,1.3,11,0.022,12,0.848,14,1.3,16,0.573,17,0.737,20,0.215,21,0.059,22,1.852,26,0.015,27,0.015,70,2.313,71,2.979,74,0.862,75,1.375,89,1.542,93,1.162,94,0.879,95,0.535,96,0.879,110,2.047,189,4.411,193,1.817,211,2.614,237,2.469,238,1.1,239,2.448,242,2.469,243,3.656,244,2.281,300,2.281,432,3.014,433,4.693,434,4.693,442,3.592,446,3.563,448,2.696,577,3.359,578,3.936,579,3.936,580,5.202,581,3.936,582,3.936,583,3.936,584,3.936,585,3.936,586,3.936,587,3.563,588,3.936,589,3.936,590,3.936,591,3.936]],["title/injectables/MongooseRepository.html",[74,0.59,592,2.232]],["body/injectables/MongooseRepository.html",[3,0.158,4,0.138,5,0.138,7,0.291,8,1.049,11,0.022,12,0.903,14,1.503,15,1.188,16,0.502,17,0.541,20,0.158,21,0.043,22,1.359,23,1.276,24,1.68,26,0.012,27,0.012,67,2.484,70,2.453,74,0.695,75,1.009,83,1.854,84,2.109,88,2.109,89,1.132,93,1.832,94,1.385,95,0.844,96,1.385,97,2.259,98,3.483,100,2.326,107,1.978,109,1.555,110,2.225,111,2.109,120,1.276,121,1.276,122,2.109,126,2.006,132,2.633,140,2.109,141,2.921,156,1.451,185,3.582,201,1.978,211,1.451,218,2.633,220,2.259,226,3.403,228,2.633,238,1.173,239,1.359,270,3.177,300,1.674,561,3.582,564,3.582,568,3.582,592,2.633,593,2.465,594,2.889,595,4.551,596,2.889,597,2.889,598,2.889,599,2.889,600,2.889,601,2.889,602,2.889,603,2.187,604,2.465,605,2.889,606,2.889,607,2.889,608,2.889,609,4.943,610,2.889,611,2.889,612,2.889,613,2.889]],["title/classes/PaginationDto.html",[21,0.053,614,2.694]],["body/classes/PaginationDto.html",[3,0.26,4,0.227,5,0.227,7,0.479,10,2.302,11,0.021,12,0.855,15,1.173,16,0.44,20,0.26,21,0.088,26,0.017,27,0.017,81,1.865,95,0.799,96,1.485,182,1.94,397,4.364,400,2.392,537,3.997,538,3.997,614,4.447,615,4.063,616,5.875,617,4.761,618,4.761,619,6.372]],["title/interfaces/PaginationParams.html",[426,1.175,620,2.437]],["body/interfaces/PaginationParams.html",[3,0.151,4,0.132,5,0.132,7,0.278,11,0.022,15,0.487,16,0.255,17,0.518,20,0.222,24,1.581,26,0.012,27,0.012,70,0.965,95,0.552,163,2.353,164,1.892,182,1.341,193,1.855,195,1.892,210,2.091,216,2.091,222,1.021,238,1.885,239,1.3,248,3.636,256,1.487,264,1.892,330,2.548,334,1.892,352,1.601,358,1.487,373,3.186,379,2.091,426,0.912,428,1.388,537,4.086,538,3.937,549,3.637,550,3.279,557,4.02,559,3.075,587,1.892,620,3.299,621,2.091,622,3.467,623,3.467,624,2.762,625,4.062,626,2.762,627,3.647,628,3.467,629,2.762,630,3.075,631,2.091,632,1.733,633,2.358,634,3.467,635,2.358,636,2.358,637,2.358,638,2.358,639,2.358,640,2.762,641,2.762,642,2.762,643,2.762,644,2.091,645,2.358,646,3.467,647,2.358,648,2.358,649,3.467,650,2.091,651,3.467,652,2.358,653,2.358,654,2.358,655,2.358,656,2.358,657,2.358,658,2.358,659,2.358,660,2.358,661,2.358,662,2.358,663,2.358,664,4.111,665,2.358,666,2.358,667,3.467,668,4.111,669,2.358,670,2.358,671,2.358,672,2.358,673,2.358,674,2.358,675,2.358,676,2.358,677,2.358,678,3.467,679,2.358,680,2.358,681,2.358,682,2.358,683,3.467,684,2.358,685,3.467,686,2.358,687,3.467,688,3.467,689,2.358,690,2.358,691,2.358,692,2.358,693,2.358,694,2.358,695,2.358,696,2.091,697,2.358,698,2.091,699,2.358]],["title/classes/Product.html",[21,0.053,700,2.062]],["body/classes/Product.html",[3,0.222,4,0.193,5,0.193,7,0.408,10,2.458,11,0.022,12,0.913,15,1.106,16,0.491,20,0.29,21,0.061,26,0.016,27,0.016,57,2.184,67,3.356,81,1.59,94,1.32,95,0.853,156,2.666,182,1.752,206,5.056,207,3.329,212,1.793,238,1.133,347,3.71,348,4.051,349,4.051,366,3.71,373,3.377,377,3.935,396,4.296,604,3.462,700,3.075,701,3.071,702,4.057,703,5.048,704,4.057,705,4.057,706,4.057,707,3.462,708,2.778,709,3.462]],["title/controllers/ProductController.html",[0,1.788,710,2.437]],["body/controllers/ProductController.html",[0,1.01,2,1.082,3,0.11,4,0.096,5,0.278,7,0.202,8,0.796,10,2.046,11,0.022,12,0.76,14,1.305,15,1.055,16,0.565,17,0.377,20,0.11,21,0.03,22,0.946,23,0.888,24,1.105,26,0.009,27,0.009,70,2.256,80,3.559,83,1.748,84,1.601,85,2.411,86,1.846,87,1.846,88,1.988,93,1.542,94,1.407,95,0.914,96,1.165,97,1.082,102,3.431,105,2.581,109,2.13,110,1.306,111,1.01,113,1.716,114,1.716,116,3.361,117,2.719,122,1.601,123,1.522,124,1.716,125,1.716,126,2.16,127,2.995,128,1.716,130,1.165,131,1.716,132,1.998,133,2.411,134,2.411,136,1.165,137,1.522,138,2.411,140,1.01,141,2.423,146,2.411,147,1.522,148,1.522,149,2.71,150,1.522,151,2.411,152,2.411,154,2.411,155,0.836,162,1.716,163,2.293,164,1.377,170,1.522,172,1.522,173,1.716,201,4.099,212,1.408,256,2.423,264,2.182,274,2.182,286,3.025,344,3.431,347,1.998,348,2.182,349,2.182,353,2.182,366,3.755,373,2.423,522,2.182,525,3.083,537,1.998,538,1.998,550,1.846,632,2.482,700,1.165,710,2.182,711,1.716,712,1.716,713,1.716,714,2.01,715,2.01,716,3.186,717,3.186,718,3.186,719,3.575,720,2.01,721,2.01,722,3.186,723,3.186,724,3.186,725,2.01,726,3.957,727,2.01,728,2.01,729,2.01,730,3.083,731,2.01,732,2.01,733,2.01,734,2.01,735,1.716,736,2.01,737,2.01,738,3.957,739,2.01,740,1.716,741,1.716,742,1.716,743,2.01,744,4.455,745,1.716,746,1.522,747,2.293,748,1.716,749,1.716,750,3.377,751,1.716,752,1.716,753,1.716,754,2.01,755,1.522,756,1.522,757,2.01,758,2.01,759,2.01,760,2.01,761,1.716,762,3.957,763,3.186,764,3.186,765,3.186,766,2.01,767,2.01,768,1.716]],["title/modules/ProductModule.html",[28,1.316,41,2.232]],["body/modules/ProductModule.html",[2,2.529,3,0.185,4,0.161,5,0.161,11,0.022,16,0.641,17,0.634,20,0.185,21,0.051,24,0.946,26,0.014,27,0.014,28,2.155,30,1.593,31,1.593,32,1.823,33,1.823,34,1.593,35,2.904,36,2.904,41,4.385,42,3.67,47,2.529,48,1.823,49,1.701,51,2.947,56,2.563,57,2.529,69,2.563,73,1.962,94,0.756,100,1.593,207,2.124,211,1.701,221,2.634,222,2.342,224,2.947,238,0.946,449,2.124,592,2.124,595,4.084,700,1.962,708,3.218,710,3.695,746,2.563,747,4.02,748,2.89,755,2.563,756,2.563,769,2.89,770,3.386,771,2.89,772,2.89,773,3.386,774,3.386,775,3.386,776,2.89,777,2.89,778,2.89,779,2.89,780,3.386,781,3.386,782,2.89,783,3.386,784,3.386,785,3.386,786,2.89,787,3.386,788,2.89,789,3.386]],["title/injectables/ProductService.html",[74,0.59,747,2.062]],["body/injectables/ProductService.html",[3,0.127,4,0.111,5,0.302,7,0.234,8,0.891,11,0.022,12,0.889,14,1.488,15,1.118,16,0.533,17,0.435,20,0.127,21,0.035,23,1.917,24,0.996,26,0.01,27,0.01,46,2.336,70,2.375,73,1.345,74,0.591,75,0.811,83,1.575,84,1.791,86,2.065,87,2.065,88,1.791,89,1.397,91,3.538,93,1.803,94,1.363,95,0.83,96,1.363,97,1.25,98,3.612,109,2.336,110,1.83,111,1.166,120,1.026,121,1.026,122,1.166,126,2.049,130,1.345,136,1.345,140,1.166,141,2.984,193,1.245,212,1.575,213,1.757,218,2.236,219,1.757,220,2.62,221,2.476,222,2.202,224,2.236,226,2.236,228,1.456,234,1.757,235,1.757,236,2.698,237,2.236,238,0.996,239,1.677,242,2.236,243,2.236,244,2.065,245,3.042,246,2.065,247,2.441,248,2.065,249,2.441,256,1.919,268,1.981,269,1.981,280,1.456,286,3.211,297,2.62,347,2.236,352,2.065,353,2.441,522,2.441,603,1.757,632,2.236,700,1.345,713,3.042,719,3.796,746,1.757,747,2.065,790,1.981,791,4.338,792,4.338,793,2.321,794,2.321,795,2.321,796,2.321,797,2.321,798,1.981,799,1.981,800,1.981,801,1.981,802,1.981,803,1.981,804,1.981,805,2.321,806,2.321,807,2.321,808,1.981,809,3.564,810,3.564,811,2.321,812,3.564,813,2.321,814,2.321,815,2.321]],["title/interfaces/Response.html",[159,1.916,426,1.175]],["body/interfaces/Response.html",[3,0.243,4,0.212,5,0.212,7,0.448,11,0.021,15,1.276,20,0.243,26,0.017,27,0.017,95,0.931,96,1.528,159,3.034,163,3.765,182,1.861,358,3.498,373,3.328,426,1.471,428,2.238,486,4.45,816,3.802,817,5.545,818,5.545,819,5.545,820,5.277]],["title/injectables/ResponseService.html",[74,0.59,222,1.316]],["body/injectables/ResponseService.html",[3,0.145,4,0.127,5,0.127,7,0.268,8,0.988,11,0.022,12,0.85,14,1.459,15,1.202,16,0.365,17,0.499,20,0.145,21,0.04,24,1.631,26,0.012,27,0.012,74,0.655,75,0.93,93,1.834,94,1.303,95,0.863,96,1.303,100,2.747,104,2.271,107,2.706,116,1.823,120,2.58,121,2.58,159,3.607,163,3.022,193,0.93,222,1.461,246,2.29,253,2.271,256,2.127,258,3.373,259,3.373,274,2.706,334,1.823,352,2.731,358,3.738,475,2.015,486,2.706,549,1.823,587,2.706,627,2.015,630,2.991,696,2.991,698,2.991,818,4.983,819,4.983,820,5.299,821,2.271,822,3.952,823,3.952,824,3.952,825,3.952,826,3.952,827,2.661,828,3.952,829,3.952,830,2.661,831,5.216,832,3.952,833,3.952,834,2.661,835,3.952,836,3.952,837,3.952,838,2.661,839,3.952,840,3.952,841,3.952,842,2.661,843,3.952,844,2.661,845,2.661,846,5.839,847,2.661,848,2.661,849,2.661,850,2.661,851,2.661,852,2.661,853,2.661,854,2.661,855,2.661]],["title/classes/UpdateProductDto.html",[21,0.053,730,2.437]],["body/classes/UpdateProductDto.html",[3,0.285,4,0.249,5,0.249,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.046,83,2.307,155,2.171,212,2.746,344,3.276,346,3.577,730,4.256,750,4.457,856,4.457,857,6.214,858,4.457]],["title/classes/UpdateUserDto.html",[21,0.053,859,2.437]],["body/classes/UpdateUserDto.html",[3,0.285,4,0.249,5,0.249,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.046,83,2.307,155,2.171,212,2.746,409,3.276,411,3.577,858,4.457,859,4.256,860,4.457,861,6.214,862,4.457]],["title/modules/UploadModule.html",[28,1.316,42,2.062]],["body/modules/UploadModule.html",[3,0.249,4,0.217,5,0.217,11,0.022,16,0.577,17,0.853,20,0.249,21,0.068,26,0.017,27,0.017,28,2.309,30,2.142,31,2.142,32,2.451,33,2.451,34,2.142,35,3.076,36,3.362,42,3.909,45,3.31,46,3.837,47,3.076,48,2.451,49,2.287,449,2.856,450,3.885,863,3.885,864,3.885,865,4.552,866,4.552,867,4.552,868,4.552,869,4.552]],["title/injectables/UploadService.html",[46,1.916,74,0.59]],["body/injectables/UploadService.html",[3,0.134,4,0.117,5,0.214,7,0.247,8,0.93,11,0.022,12,0.882,14,1.345,15,1.194,16,0.498,17,0.46,20,0.134,21,0.037,24,1.504,26,0.011,27,0.011,46,2.002,67,1.233,70,2.167,74,0.616,75,0.857,89,1.759,93,1.59,94,1.202,95,0.77,96,1.202,100,2.113,110,1.87,120,1.984,121,1.984,126,0.908,182,1.228,193,1.299,237,2.333,238,1.644,239,2.357,242,2.333,243,3.142,244,2.602,246,1.422,247,1.681,249,2.547,280,4.088,281,4.275,282,3.075,283,3.075,285,1.858,286,3.595,287,4.25,289,2.547,290,4.275,291,4.275,292,1.858,297,2.002,298,1.422,299,2.095,300,1.422,312,2.095,313,2.095,324,1.54,327,2.095,331,2.095,337,2.095,338,2.095,339,2.095,340,2.095,341,2.095,347,1.54,352,1.422,475,1.858,491,1.858,492,1.858,493,1.858,494,1.858,495,1.681,496,1.858,497,1.858,498,1.858,499,2.095,500,2.095,817,3.174,870,2.095,871,4.49,872,3.719,873,3.719,874,3.719,875,3.719,876,3.719,877,2.455,878,3.719,879,2.455,880,2.455,881,3.719,882,2.455,883,2.455,884,2.455,885,3.719,886,2.455,887,2.455,888,2.455,889,3.719,890,2.455,891,2.455,892,2.455,893,4.49,894,2.455,895,2.455,896,2.455,897,2.455,898,2.455,899,2.455,900,2.455,901,2.455,902,2.455,903,4.49,904,2.455,905,2.455,906,2.455,907,2.455,908,2.455,909,3.719,910,2.455,911,2.455,912,2.455]],["title/classes/User.html",[21,0.053,913,2.062]],["body/classes/User.html",[3,0.233,4,0.204,5,0.204,7,0.43,10,2.375,11,0.022,12,0.882,15,1.194,16,0.507,20,0.3,21,0.064,26,0.016,27,0.016,57,2.299,67,3.46,81,1.674,95,0.824,156,2.757,182,1.811,206,4.843,207,3.442,212,1.887,238,1.193,366,3.803,412,4.589,413,4.589,414,4.589,703,5.174,707,3.645,913,3.179,914,3.233,915,4.271,916,4.271,917,4.271,918,4.271,919,4.271,920,2.925,921,3.645]],["title/controllers/UserController.html",[0,1.788,922,2.437]],["body/controllers/UserController.html",[0,1.301,2,1.394,3,0.142,4,0.123,5,0.123,7,0.261,8,0.968,10,2.265,11,0.022,12,0.841,14,1.445,15,1.148,16,0.582,17,0.485,20,0.142,21,0.039,22,1.219,23,1.144,24,1.539,26,0.011,27,0.011,70,2.402,80,3.864,83,1.711,84,1.946,85,2.931,86,2.244,87,2.244,88,1.946,93,1.707,94,1.29,95,0.786,96,1.29,97,1.394,102,2.429,105,1.711,109,2.497,110,0.855,111,1.301,116,1.774,122,2.586,123,1.961,126,2.278,127,1.961,130,1.501,132,2.429,133,1.961,134,1.961,136,1.501,137,1.961,138,2.931,140,1.301,141,2.771,146,3.511,147,1.961,148,1.961,149,2.652,150,1.961,151,1.961,152,1.961,153,2.211,154,1.961,155,1.077,165,2.211,167,3.305,168,2.211,170,1.961,172,2.931,175,3.305,176,2.211,212,1.711,409,3.229,491,1.961,492,1.961,493,1.961,494,1.961,495,1.774,496,1.961,497,1.961,498,1.961,535,3.525,550,2.244,632,3.456,712,2.211,719,3.959,735,2.211,742,2.211,744,2.211,745,2.211,749,2.211,751,2.211,752,2.211,753,2.211,761,2.211,768,2.211,859,3.525,862,3.958,913,2.244,922,2.652,923,2.211,924,3.873,925,2.59,926,2.59,927,2.59,928,2.59,929,2.59,930,1.961,931,2.687,932,2.211,933,2.59,934,2.59,935,2.59,936,2.59,937,2.59,938,2.59,939,2.59,940,2.59,941,2.59,942,2.59,943,2.59]],["title/modules/UserModule.html",[28,1.316,43,2.232]],["body/modules/UserModule.html",[2,2.658,3,0.199,4,0.173,5,0.173,11,0.022,16,0.638,17,0.682,20,0.199,21,0.055,24,1.017,26,0.015,27,0.015,28,2.072,30,1.713,31,1.713,32,1.96,33,1.96,34,1.713,35,3.016,36,3.016,43,4.372,47,2.658,48,1.96,49,1.829,51,2.284,56,2.756,57,2.658,69,2.756,73,2.109,94,0.813,100,1.713,207,2.284,211,1.829,221,2.692,222,2.394,449,2.284,592,2.284,595,4.241,776,3.107,777,3.107,778,3.107,779,3.107,782,3.107,788,3.107,913,2.109,920,3.382,922,3.837,930,2.756,931,4.069,932,3.107,944,3.107,945,3.107,946,3.107,947,3.641,948,3.641,949,3.641,950,3.641,951,3.641,952,3.641]],["title/injectables/UserService.html",[74,0.59,931,2.062]],["body/injectables/UserService.html",[3,0.17,4,0.148,5,0.148,7,0.313,8,1.106,11,0.022,12,0.923,14,1.541,15,1.143,16,0.57,17,0.583,20,0.17,21,0.047,23,1.956,26,0.013,27,0.013,70,2.387,73,1.803,74,0.733,75,1.087,83,1.956,84,2.224,86,2.565,87,2.565,88,2.224,89,1.735,91,3.822,93,1.873,94,1.416,95,0.862,96,1.416,97,1.675,98,3.252,109,1.675,110,2.035,111,1.563,120,1.375,121,1.375,122,1.563,126,2.076,130,1.803,136,1.803,140,1.563,141,2.383,212,1.956,218,2.777,219,2.355,220,3.022,221,2.695,222,2.397,224,2.777,226,2.777,228,1.952,234,2.355,235,2.355,236,3.351,603,2.355,719,4.222,798,2.655,799,2.655,800,2.655,801,2.655,802,2.655,803,2.655,804,2.655,808,2.655,913,1.803,930,2.355,931,2.565,953,2.655,954,3.111,955,3.111]],["title/modules/ValidationModule.html",[28,1.316,44,2.232]],["body/modules/ValidationModule.html",[3,0.208,4,0.182,5,0.182,11,0.022,16,0.607,17,0.714,20,0.208,21,0.057,26,0.015,27,0.015,28,2.121,30,1.794,31,1.794,32,2.052,33,2.052,34,1.794,35,3.088,36,3.088,40,3.803,44,4.507,47,2.742,48,2.052,49,1.916,51,3.195,221,2.941,222,2.616,449,2.392,956,3.254,957,3.812,958,3.254,959,3.254,960,4.464,961,3.812,962,5.093,963,3.254,964,3.812,965,3.254,966,3.812,967,3.812,968,3.812]],["title/injectables/ValidationService.html",[74,0.59,960,2.232]],["body/injectables/ValidationService.html",[3,0.233,4,0.203,5,0.203,11,0.022,12,0.62,16,0.591,17,1.026,20,0.233,21,0.082,22,2.004,23,1.882,24,1.19,26,0.016,27,0.016,67,3.211,74,0.907,75,1.487,89,1.669,93,1.258,94,0.951,95,0.579,96,0.951,121,1.882,201,3.751,212,2.42,221,2.813,238,1.19,400,2.14,484,5.167,486,2.917,644,3.224,960,3.436,965,3.635,969,3.635,970,6.054,971,4.259,972,4.259,973,5.477,974,4.259,975,4.259,976,4.259,977,4.259,978,4.259,979,4.259,980,4.259,981,4.259,982,4.259]],["title/coverage.html",[983,3.68]],["body/coverage.html",[0,2.456,1,2.144,5,0.135,6,2.417,11,0.022,18,1.94,21,0.1,26,0.012,27,0.012,34,1.333,45,1.641,46,1.525,74,1.123,76,2.417,80,1.777,82,2.417,91,1.641,95,0.385,100,1.333,156,1.423,159,1.525,181,2.417,217,2.417,220,1.525,221,1.178,222,1.047,279,2.417,297,1.525,298,1.641,344,1.777,345,2.417,346,3.347,377,4.619,409,1.777,410,2.417,411,3.347,426,2.035,427,1.777,429,3.347,432,1.641,435,2.079,441,1.777,442,1.641,446,1.94,451,2.417,462,2.417,520,3.347,525,1.94,526,2.417,535,1.94,536,2.417,550,1.641,560,2.417,571,2.417,577,2.417,592,1.777,593,2.417,614,2.144,615,2.417,620,1.94,621,3.7,631,2.144,650,2.144,700,1.641,701,3.132,708,1.94,710,1.94,711,2.417,730,1.94,747,1.641,790,2.417,816,2.417,821,2.417,856,2.417,859,1.94,860,2.417,870,2.417,913,1.641,914,3.132,920,1.94,922,1.94,923,2.417,931,1.641,953,2.417,960,1.777,969,2.417,983,2.144,984,2.417,985,2.832,986,2.832,987,5.375,988,5.97,989,5.97,990,6.447,991,2.417,992,5.375,993,5.717,994,5.717,995,2.832,996,2.832,997,5.717,998,2.832,999,2.832,1000,2.832]],["title/dependencies.html",[31,2.015,1001,2.534]],["body/dependencies.html",[11,0.022,17,0.85,21,0.086,26,0.017,27,0.017,31,2.135,55,3.108,57,2.443,149,3.108,155,1.887,189,3.435,210,3.435,211,2.28,296,3.873,400,2.28,740,3.873,741,4.867,755,3.435,756,4.316,786,3.873,963,3.873,1002,4.538,1003,4.538,1004,4.538,1005,5.702,1006,4.538,1007,4.538,1008,4.538,1009,4.538,1010,4.538,1011,4.538,1012,4.538,1013,4.538,1014,4.538,1015,4.538,1016,4.538,1017,4.538,1018,4.538,1019,4.538,1020,4.538,1021,4.538,1022,4.538,1023,4.538,1024,4.538,1025,4.538,1026,4.538,1027,4.538,1028,4.538]],["title/miscellaneous/functions.html",[1029,2.034,1030,3.654]],["body/miscellaneous/functions.html",[7,0.562,11,0.019,26,0.019,27,0.019,34,3.209,991,4.765,1029,3.824,1030,4.765,1031,5.583]],["title/index.html",[7,0.299,1032,2.969,1033,2.969]],["body/index.html",[4,0.138,11,0.021,26,0.012,27,0.012,49,3.023,105,1.279,224,1.816,354,3.406,495,1.982,983,2.191,984,4.223,1034,2.894,1035,2.894,1036,4.948,1037,4.203,1038,2.894,1039,2.894,1040,2.894,1041,2.894,1042,4.203,1043,5.43,1044,2.894,1045,5.43,1046,2.894,1047,6.359,1048,2.894,1049,6.207,1050,2.894,1051,2.894,1052,2.894,1053,4.203,1054,2.894,1055,4.203,1056,2.894,1057,4.948,1058,2.894,1059,4.203,1060,2.894,1061,2.894,1062,2.894,1063,2.894,1064,2.894,1065,2.894,1066,2.894,1067,2.894,1068,2.894,1069,5.43,1070,6.359,1071,6.016,1072,2.894,1073,4.203,1074,2.894,1075,2.894,1076,2.894,1077,2.894,1078,2.894,1079,6.016,1080,4.203,1081,5.43,1082,2.894,1083,4.203,1084,2.894,1085,2.894,1086,4.203,1087,6.016,1088,5.43,1089,2.894,1090,4.203,1091,2.894,1092,2.894,1093,2.894,1094,2.894,1095,5.43,1096,2.894,1097,2.894,1098,2.894,1099,2.894,1100,4.203,1101,2.894,1102,2.894,1103,2.894,1104,2.894,1105,2.894,1106,4.203,1107,2.894,1108,2.894,1109,2.894,1110,4.203,1111,2.894,1112,2.894,1113,4.634,1114,4.203,1115,2.894,1116,2.894,1117,2.894,1118,2.894,1119,2.894,1120,2.894,1121,2.894,1122,2.894,1123,4.203,1124,2.894,1125,2.894,1126,2.894,1127,2.894,1128,4.948,1129,2.894,1130,2.894,1131,2.894,1132,2.894,1133,2.894,1134,2.894,1135,4.203,1136,2.894,1137,2.894,1138,2.894,1139,2.894,1140,2.894,1141,4.203,1142,2.894,1143,2.894,1144,2.894,1145,4.203,1146,4.203,1147,2.894,1148,2.894,1149,2.894,1150,2.894,1151,2.894,1152,2.894,1153,2.894,1154,2.894,1155,2.894,1156,2.894,1157,2.894,1158,2.47,1159,2.894,1160,2.894,1161,2.894,1162,2.894,1163,2.894,1164,2.894,1165,2.47,1166,2.894,1167,2.894]],["title/modules.html",[30,2.288]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.513,30,2.414,40,2.972,41,3.218,42,2.972,43,3.218,44,3.218,1113,6.047,1168,7.085,1169,7.085,1170,7.085]],["title/overview.html",[1171,4.149]],["body/overview.html",[2,1.765,11,0.022,26,0.014,27,0.014,28,1.213,29,4.847,30,1.543,31,1.543,32,1.765,33,1.765,34,1.543,35,1.765,36,1.765,37,2.799,38,2.799,39,2.799,40,3.869,41,4.329,42,3.505,43,4.243,44,4.392,45,3.073,46,3.466,47,2.473,48,1.765,49,1.648,75,1.145,81,1.285,221,2.776,222,2.469,365,2.799,428,1.648,438,2.799,439,2.799,440,2.799,441,4.039,442,3.073,747,3.731,769,2.799,771,2.799,772,2.799,863,2.799,864,2.799,931,3.731,944,2.799,945,2.799,946,2.799,956,2.799,958,2.799,959,2.799,960,4.039,1171,2.799,1172,3.279,1173,3.279,1174,3.279,1175,3.279]],["title/properties.html",[182,1.413,1001,2.534]],["body/properties.html",[11,0.021,26,0.019,27,0.019,105,2.439,182,1.822,1158,4.711,1165,4.711,1176,5.519,1177,5.519,1178,5.519]],["title/miscellaneous/variables.html",[1029,2.034,1179,3.654]],["body/miscellaneous/variables.html",[7,0.29,11,0.022,15,0.869,24,1.607,26,0.012,27,0.012,70,1.005,95,0.569,120,2.653,121,2.653,163,2.425,164,1.971,193,1.462,195,1.971,222,1.064,238,1.861,239,1.354,248,3.333,256,1.549,330,2.625,334,1.971,352,1.667,358,1.549,379,2.178,429,1.971,435,2.891,520,1.971,524,2.178,537,3.766,538,3.397,549,1.971,550,2.857,557,4.099,559,3.168,587,1.971,620,1.971,621,2.178,622,2.456,623,2.456,627,2.178,628,2.456,630,2.178,631,3.168,632,1.805,633,2.456,634,3.571,635,2.456,636,2.456,637,2.456,638,2.456,639,2.456,644,2.178,645,2.456,646,3.571,647,2.456,648,2.456,649,3.571,650,2.178,651,3.571,652,2.456,653,2.456,654,2.456,655,2.456,656,2.456,657,2.456,658,2.456,659,2.456,660,2.456,661,2.456,662,2.456,663,2.456,664,4.209,665,2.456,666,2.456,667,3.571,668,4.209,669,2.456,670,2.456,671,2.456,672,2.456,673,2.456,674,2.456,675,2.456,676,2.456,677,2.456,678,3.571,679,2.456,680,2.456,681,2.456,682,2.456,683,3.571,684,2.456,685,3.571,686,2.456,687,3.571,688,3.571,689,2.456,690,2.456,691,2.456,692,2.456,693,2.456,694,2.456,695,2.456,696,2.178,697,2.456,698,2.178,699,2.456,701,2.178,708,2.866,709,2.456,914,2.178,920,2.866,921,2.456,1029,1.971,1179,2.456,1180,2.877,1181,2.877,1182,4.185,1183,2.877,1184,2.877]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":377,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"coverage.html":{}}}],["0'})@isnotempty({message",{"_index":390,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["0.0.1",{"_index":1177,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["0})@isnumber()@isoptional()@min(0",{"_index":532,"title":{},"body":{"classes/FindProductDto.html":{}}}],["1",{"_index":557,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["1.20.3",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":559,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["10000",{"_index":375,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["10})@isint()@min(1)@isoptional",{"_index":546,"title":{},"body":{"classes/FindUserDto.html":{}}}],["11",{"_index":1174,"title":{},"body":{"overview.html":{}}}],["11.0.1",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["11.0.4",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":365,"title":{},"body":{"classes/CreateProductDto.html":{},"overview.html":{}}}],["1})@isint()@min(1)@isoptional",{"_index":551,"title":{},"body":{"classes/FindUserDto.html":{}}}],["2.1.0",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["2.5.1",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":116,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{}}}],["201",{"_index":104,"title":{},"body":{"classes/BaseController.html":{},"injectables/ResponseService.html":{}}}],["3",{"_index":1173,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":853,"title":{},"body":{"injectables/ResponseService.html":{}}}],["403",{"_index":854,"title":{},"body":{"injectables/ResponseService.html":{}}}],["404",{"_index":253,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["5.0.1",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":385,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["500",{"_index":855,"title":{},"body":{"injectables/ResponseService.html":{}}}],["6",{"_index":1172,"title":{},"body":{"overview.html":{}}}],["6.13.0",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1175,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["8.10.1",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["999.99",{"_index":531,"title":{},"body":{"classes/FindProductDto.html":{}}}],["_id",{"_index":183,"title":{},"body":{"classes/BaseEntity.html":{}}}],["abstract",{"_index":161,"title":{},"body":{"classes/BaseController.html":{}}}],["accès",{"_index":835,"title":{},"body":{"injectables/ResponseService.html":{}}}],["address",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["adresse",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["ajout",{"_index":847,"title":{},"body":{"injectables/ResponseService.html":{}}}],["allowing",{"_index":1101,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1151,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":304,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":306,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":154,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":743,"title":{},"body":{"controllers/ProductController.html":{}}}],["apiconsumes('multipart/form",{"_index":764,"title":{},"body":{"controllers/ProductController.html":{}}}],["apioperation",{"_index":151,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":153,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":188,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":401,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apipropertyoptional({description",{"_index":350,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apiquery",{"_index":744,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse",{"_index":152,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":721,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags",{"_index":742,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('products",{"_index":758,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('users",{"_index":934,"title":{},"body":{"controllers/UserController.html":{}}}],["app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["app_pipe",{"_index":962,"title":{},"body":{"modules/ValidationModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["application",{"_index":1071,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1042,"title":{},"body":{"index.html":{}}}],["appliquer",{"_index":640,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["arg",{"_index":654,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg.page",{"_index":655,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg0",{"_index":474,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["args",{"_index":651,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["args.find((arg",{"_index":653,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(serviceresponse.data",{"_index":681,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":1158,"title":{},"body":{"index.html":{},"properties.html":{}}}],["avec",{"_index":256,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":239,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1090,"title":{},"body":{"index.html":{}}}],["baba",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["backers",{"_index":1152,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":822,"title":{},"body":{"injectables/ResponseService.html":{}}}],["badrequest(errors",{"_index":826,"title":{},"body":{"injectables/ResponseService.html":{}}}],["base.repository.interface",{"_index":233,"title":{},"body":{"injectables/BaseService.html":{}}}],["base.service",{"_index":158,"title":{},"body":{"classes/BaseController.html":{}}}],["basecontroller",{"_index":80,"title":{"classes/BaseController.html":{}},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["basecontroller:31",{"_index":733,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:38",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:44",{"_index":927,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:47",{"_index":720,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:49",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:55",{"_index":929,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:58",{"_index":734,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:60",{"_index":928,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:61",{"_index":732,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:66",{"_index":735,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["basecontroller:88",{"_index":729,"title":{},"body":{"controllers/ProductController.html":{}}}],["based",{"_index":1085,"title":{},"body":{"index.html":{}}}],["basedir",{"_index":871,"title":{},"body":{"injectables/UploadService.html":{}}}],["baseentity",{"_index":156,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"classes/User.html":{},"coverage.html":{}}}],["baseservice",{"_index":91,"title":{"injectables/BaseService.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["baseservice:17",{"_index":798,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:28",{"_index":800,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:44",{"_index":799,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:55",{"_index":803,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:71",{"_index":801,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:87",{"_index":802,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["batch",{"_index":341,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["binary",{"_index":405,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["binary'})@validateif(o",{"_index":357,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["board",{"_index":1144,"title":{},"body":{"index.html":{}}}],["body",{"_index":149,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["boolean",{"_index":197,"title":{},"body":{"classes/BaseEntity.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1170,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1168,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1037,"title":{},"body":{"index.html":{}}}],["cache",{"_index":786,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":754,"title":{},"body":{"controllers/ProductController.html":{}}}],["cachemodule",{"_index":781,"title":{},"body":{"modules/ProductModule.html":{}}}],["cachemodule.register",{"_index":784,"title":{},"body":{"modules/ProductModule.html":{}}}],["calcul",{"_index":682,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["caractères",{"_index":402,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["caractères'})@isnotempty({message",{"_index":370,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["cas",{"_index":676,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":242,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ce",{"_index":674,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["chambres",{"_index":291,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["channel",{"_index":1116,"title":{},"body":{"index.html":{}}}],["chaîne",{"_index":369,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":1079,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":81,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clicks",{"_index":1100,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1084,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":302,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":296,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{}}}],["cloudinary.config",{"_index":301,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":311,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.service",{"_index":866,"title":{},"body":{"modules/UploadModule.html":{}}}],["cloudinaryservice",{"_index":45,"title":{"injectables/CloudinaryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CloudinaryService.html":{},"modules/UploadModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":438,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":439,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":440,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":769,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_exports",{"_index":771,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":770,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":772,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":863,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":864,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":944,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":946,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":945,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_validationmodule",{"_index":956,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_exports",{"_index":958,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_imports",{"_index":957,"title":{},"body":{"modules/ValidationModule.html":{}}}],["cluster_validationmodule_providers",{"_index":959,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["come",{"_index":1107,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1064,"title":{},"body":{"index.html":{}}}],["config",{"_index":580,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{}}}],["configservice.get('mongodb_uri",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":433,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["connection",{"_index":456,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["connexion",{"_index":589,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["conserver",{"_index":677,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["console.error('erreur",{"_index":588,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('connexion",{"_index":586,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('creating",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('déconnexion",{"_index":591,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('finding",{"_index":937,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('mongodb",{"_index":576,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["console.log('productcontroller",{"_index":760,"title":{},"body":{"controllers/ProductController.html":{}}}],["console.log('usercontroller",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":238,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["constructor(baseservice",{"_index":90,"title":{},"body":{"classes/BaseController.html":{}}}],["constructor(config",{"_index":578,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["constructor(configservice",{"_index":572,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["constructor(connection",{"_index":454,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(exceptionservice",{"_index":971,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(httpresponseservice",{"_index":469,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["constructor(model",{"_index":594,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor(repository",{"_index":219,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["contenu",{"_index":335,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('products",{"_index":757,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('users",{"_index":933,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["courses",{"_index":1122,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":983,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":83,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":165,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["create(createdto",{"_index":97,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(entity",{"_index":562,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["createbadrequestexception",{"_index":463,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createbadrequestexception(arg0",{"_index":472,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["created",{"_index":107,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"injectables/ResponseService.html":{}}}],["created(data",{"_index":829,"title":{},"body":{"injectables/ResponseService.html":{}}}],["created.save",{"_index":606,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["createdat",{"_index":184,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdto",{"_index":109,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdto.image",{"_index":811,"title":{},"body":{"injectables/ProductService.html":{}}}],["createforbiddenexception",{"_index":464,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createforbiddenexception(message",{"_index":476,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception",{"_index":465,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception(message",{"_index":479,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception",{"_index":466,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception(message",{"_index":481,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createparamdecorator",{"_index":622,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["createproductdto",{"_index":344,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":409,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createvalidationexception",{"_index":467,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createvalidationexception(errors",{"_index":483,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createwithimage",{"_index":791,"title":{},"body":{"injectables/ProductService.html":{}}}],["createwithimage(createdto",{"_index":794,"title":{},"body":{"injectables/ProductService.html":{}}}],["crypto",{"_index":889,"title":{},"body":{"injectables/UploadService.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":900,"title":{},"body":{"injectables/UploadService.html":{}}}],["création",{"_index":213,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["création'})@prop({default",{"_index":194,"title":{},"body":{"classes/BaseEntity.html":{}}}],["créer",{"_index":716,"title":{},"body":{"controllers/ProductController.html":{}}}],["créée",{"_index":832,"title":{},"body":{"injectables/ResponseService.html":{}}}],["ctx",{"_index":633,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":635,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d''upload",{"_index":718,"title":{},"body":{"controllers/ProductController.html":{}}}],["d'origine",{"_index":679,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d'upload",{"_index":318,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["d'éléments",{"_index":545,"title":{},"body":{"classes/FindUserDto.html":{}}}],["data",{"_index":163,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":715,"title":{},"body":{"controllers/ProductController.html":{}}}],["data'})@apiresponse({status",{"_index":103,"title":{},"body":{"classes/BaseController.html":{}}}],["database.service",{"_index":444,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database_connection",{"_index":435,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":427,"title":{"interfaces/DatabaseConfig.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{},"coverage.html":{}}}],["databaseconnection",{"_index":432,"title":{"interfaces/DatabaseConnection.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["databasemodule",{"_index":40,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":441,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/BaseEntity.html":{}}}],["date().toisostring",{"_index":846,"title":{},"body":{"injectables/ResponseService.html":{}}}],["date.now",{"_index":214,"title":{},"body":{"classes/BaseEntity.html":{}}}],["de",{"_index":193,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":1118,"title":{},"body":{"index.html":{}}}],["default",{"_index":120,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["delete",{"_index":132,"title":{},"body":{"classes/BaseController.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":175,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":131,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["delete(':id/soft",{"_index":178,"title":{},"body":{"classes/BaseController.html":{}}}],["delete(':id/soft')@apioperation({summary",{"_index":137,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":564,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["deleted",{"_index":134,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1069,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1089,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1080,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1099,"title":{},"body":{"index.html":{}}}],["depuis",{"_index":629,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["dernière",{"_index":203,"title":{},"body":{"classes/BaseEntity.html":{}}}],["des",{"_index":264,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{}}}],["description",{"_index":105,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":646,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["descriptor.value",{"_index":649,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1050,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1130,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":893,"title":{},"body":{"injectables/UploadService.html":{}}}],["disable",{"_index":492,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["disconnect",{"_index":434,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["discord",{"_index":1115,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1117,"title":{},"body":{"index.html":{}}}],["document",{"_index":209,"title":{},"body":{"classes/BaseEntity.html":{}}}],["documentation",{"_index":984,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":555,"title":{},"body":{"classes/FindUserDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":543,"title":{},"body":{"classes/FindUserDto.html":{}}}],["doit",{"_index":359,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["données",{"_index":852,"title":{},"body":{"injectables/ResponseService.html":{}}}],["dto/create",{"_index":749,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/find",{"_index":752,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/update",{"_index":751,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["du",{"_index":352,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["décorateur",{"_index":625,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["définition",{"_index":624,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["e2e",{"_index":1060,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1038,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1077,"title":{},"body":{"index.html":{}}}],["en",{"_index":383,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["enableimplicitconversion",{"_index":979,"title":{},"body":{"injectables/ValidationService.html":{}}}],["ensure",{"_index":1075,"title":{},"body":{"index.html":{}}}],["ensuredirectory",{"_index":872,"title":{},"body":{"injectables/UploadService.html":{}}}],["ensuredirectory(folder",{"_index":876,"title":{},"body":{"injectables/UploadService.html":{}}}],["enterprise",{"_index":1134,"title":{},"body":{"index.html":{}}}],["entit",{"_index":255,"title":{},"body":{"injectables/BaseService.html":{}}}],["entities",{"_index":118,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entities'})@apiresponse({status",{"_index":115,"title":{},"body":{"classes/BaseController.html":{}}}],["entities/product.entity",{"_index":746,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["entities/user.entity",{"_index":930,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":102,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity'})@apibody({description",{"_index":101,"title":{},"body":{"classes/BaseController.html":{}}}],["entity'})@apiparam({name",{"_index":133,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity/base.entity",{"_index":157,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entités",{"_index":265,"title":{},"body":{"injectables/BaseService.html":{}}}],["erreur",{"_index":246,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["error",{"_index":243,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error(\"résultat",{"_index":317,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error('method",{"_index":499,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["error(`échec",{"_index":342,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error.children",{"_index":517,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.children.length",{"_index":518,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.constraints",{"_index":514,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.message",{"_index":249,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error.status",{"_index":252,"title":{},"body":{"injectables/BaseService.html":{}}}],["errors",{"_index":486,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/ValidationService.html":{}}}],["errors.foreach((error",{"_index":513,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["eslint",{"_index":491,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["eslint/no",{"_index":496,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["est",{"_index":671,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["et",{"_index":670,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":354,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"index.html":{}}}],["exception/exception.service",{"_index":965,"title":{},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exception/response/response.service",{"_index":967,"title":{},"body":{"modules/ValidationModule.html":{}}}],["exceptionfactory",{"_index":980,"title":{},"body":{"injectables/ValidationService.html":{}}}],["exceptionservice",{"_index":221,"title":{"injectables/ExceptionService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["exec",{"_index":609,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["executioncontext",{"_index":623,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["existe",{"_index":669,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":1120,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["express",{"_index":741,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":286,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":897,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":212,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["extraire",{"_index":626,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["exécuter",{"_index":658,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":201,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ValidationService.html":{}}}],["fast",{"_index":1093,"title":{},"body":{"index.html":{}}}],["features",{"_index":1103,"title":{},"body":{"index.html":{}}}],["few",{"_index":1095,"title":{},"body":{"index.html":{}}}],["fichier",{"_index":331,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":908,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.buffer?.length",{"_index":329,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["fileinterceptor",{"_index":739,"title":{},"body":{"controllers/ProductController.html":{}}}],["filename",{"_index":903,"title":{},"body":{"injectables/UploadService.html":{}}}],["filepath",{"_index":905,"title":{},"body":{"injectables/UploadService.html":{}}}],["files",{"_index":289,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["files.foreach((file",{"_index":328,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["files.map((file",{"_index":338,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["files?.length",{"_index":327,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["filestorageservice",{"_index":297,"title":{"interfaces/FileStorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileuploadresult",{"_index":298,"title":{"interfaces/FileUploadResult.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["filter",{"_index":122,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":226,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["filtrer",{"_index":527,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["find",{"_index":114,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["findall",{"_index":84,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@query",{"_index":170,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findall(filter",{"_index":111,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":218,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":228,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyidandupdate(id",{"_index":613,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["findone",{"_index":85,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":168,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":123,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findproductdto",{"_index":525,"title":{"classes/FindProductDto.html":{}},"body":{"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["finduserdto",{"_index":535,"title":{"classes/FindUserDto.html":{}},"body":{"classes/FindUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["firstname",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["focus",{"_index":1102,"title":{},"body":{"index.html":{}}}],["folder",{"_index":287,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["follow",{"_index":1138,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":823,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidden(message",{"_index":833,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidnonwhitelisted",{"_index":977,"title":{},"body":{"injectables/ValidationService.html":{}}}],["format",{"_index":356,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["formaterrors",{"_index":468,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formaterrors(errors",{"_index":487,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["found",{"_index":128,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["framework",{"_index":1036,"title":{},"body":{"index.html":{}}}],["fs",{"_index":887,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.mkdir(dirpath",{"_index":895,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.writefile(filepath",{"_index":907,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":888,"title":{},"body":{"injectables/UploadService.html":{}}}],["full",{"_index":1133,"title":{},"body":{"index.html":{}}}],["function",{"_index":650,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1030,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1098,"title":{},"body":{"index.html":{}}}],["gale",{"_index":389,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["generatefilename",{"_index":873,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(originalname",{"_index":878,"title":{},"body":{"injectables/UploadService.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":124,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["get()@apioperation({summary",{"_index":113,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["getconnectionconfig",{"_index":430,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmodeltoken",{"_index":777,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["getmodeltoken(product.name",{"_index":789,"title":{},"body":{"modules/ProductModule.html":{}}}],["getmodeltoken(user.name",{"_index":952,"title":{},"body":{"modules/UserModule.html":{}}}],["getting",{"_index":1032,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1125,"title":{},"body":{"index.html":{}}}],["group",{"_index":1167,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1148,"title":{},"body":{"index.html":{}}}],["hands",{"_index":1119,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1108,"title":{},"body":{"index.html":{}}}],["hash",{"_index":899,"title":{},"body":{"injectables/UploadService.html":{}}}],["hash}${ext",{"_index":901,"title":{},"body":{"injectables/UploadService.html":{}}}],["hello",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1123,"title":{},"body":{"index.html":{}}}],["here",{"_index":1156,"title":{},"body":{"index.html":{}}}],["hotel",{"_index":290,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["httpexception",{"_index":478,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpexception(response",{"_index":505,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpresponseservice",{"_index":471,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["https://example.com/iphone13.jpg",{"_index":355,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["https://nestjs.com",{"_index":1162,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":489,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.bad_request",{"_index":506,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.forbidden",{"_index":508,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.internal_server_error",{"_index":512,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.not_found",{"_index":510,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["ibaserepository",{"_index":220,"title":{"interfaces/IBaseRepository.html":{}},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id",{"_index":126,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@apibody({description",{"_index":143,"title":{},"body":{"classes/BaseController.html":{}}}],["id'})@apiparam({name",{"_index":125,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["id'})@apiresponse({status",{"_index":127,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["identifier",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":347,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["images",{"_index":343,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["implemented",{"_index":500,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["implements",{"_index":300,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/UploadService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicateur",{"_index":198,"title":{},"body":{"classes/BaseEntity.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["information",{"_index":1082,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1105,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":719,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["initialized",{"_index":761,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["inject",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/DatabaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject('product_repository",{"_index":806,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('uploadservice",{"_index":807,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('user_repository",{"_index":955,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(database_connection",{"_index":459,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"overview.html":{}}}],["install",{"_index":1097,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1048,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1126,"title":{},"body":{"index.html":{}}}],["interdit",{"_index":836,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interface",{"_index":426,"title":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"coverage.html":{}}}],["interfaces",{"_index":428,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/database.interface",{"_index":448,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["interfaces/upload.interface",{"_index":299,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["internalerror",{"_index":824,"title":{},"body":{"injectables/ResponseService.html":{}}}],["internalerror(message",{"_index":837,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interne",{"_index":839,"title":{},"body":{"injectables/ResponseService.html":{}}}],["invalide",{"_index":828,"title":{},"body":{"injectables/ResponseService.html":{}}}],["iphone",{"_index":364,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["iphone'})@isstring()@isoptional",{"_index":529,"title":{},"body":{"classes/FindProductDto.html":{}}}],["isdeleted",{"_index":185,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{}}}],["isglobal",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":553,"title":{},"body":{"classes/FindUserDto.html":{}}}],["isnotempty",{"_index":395,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":394,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["isnumberstring",{"_index":619,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional",{"_index":397,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{}}}],["isoptional()@isnumberstring",{"_index":616,"title":{},"body":{"classes/PaginationDto.html":{}}}],["issa",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["isurl",{"_index":398,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["items",{"_index":680,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.length",{"_index":684,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.slice(startindex",{"_index":689,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["job",{"_index":1141,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1143,"title":{},"body":{"index.html":{}}}],["john",{"_index":554,"title":{},"body":{"classes/FindUserDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":541,"title":{},"body":{"classes/FindUserDto.html":{}}}],["join",{"_index":1154,"title":{},"body":{"index.html":{}}}],["jour",{"_index":269,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["json.stringify(error",{"_index":314,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["kamil",{"_index":1159,"title":{},"body":{"index.html":{}}}],["key",{"_index":1072,"title":{},"body":{"index.html":{}}}],["l'enregistrement",{"_index":912,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'id",{"_index":257,"title":{},"body":{"injectables/BaseService.html":{}}}],["l'image",{"_index":351,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["l'index",{"_index":332,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["l'upload",{"_index":313,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["l'utilisateur",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["la",{"_index":248,"title":{},"body":{"injectables/BaseService.html":{},"classes/CreateProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["lastpage",{"_index":685,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["le",{"_index":330,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["learn",{"_index":1111,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["les",{"_index":627,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1165,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1146,"title":{},"body":{"index.html":{}}}],["limit",{"_index":537,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":494,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["linkedin",{"_index":1140,"title":{},"body":{"index.html":{}}}],["list",{"_index":117,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["liste",{"_index":722,"title":{},"body":{"controllers/ProductController.html":{}}}],["local",{"_index":869,"title":{},"body":{"modules/UploadModule.html":{}}}],["logger",{"_index":281,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["logger(cloudinaryservice.name",{"_index":294,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["logger(uploadservice.name",{"_index":885,"title":{},"body":{"injectables/UploadService.html":{}}}],["logique",{"_index":216,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/PaginationParams.html":{}}}],["logique'})@prop({default",{"_index":200,"title":{},"body":{"classes/BaseEntity.html":{}}}],["logiquement",{"_index":278,"title":{},"body":{"injectables/BaseService.html":{}}}],["looking",{"_index":1083,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1136,"title":{},"body":{"index.html":{}}}],["lors",{"_index":247,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["makes",{"_index":1091,"title":{},"body":{"index.html":{}}}],["manager",{"_index":756,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["managing",{"_index":1104,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":686,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1087,"title":{},"body":{"index.html":{}}}],["message",{"_index":358,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":501,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(...this.formaterrors(error.children",{"_index":519,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(message",{"_index":516,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["meta",{"_index":699,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":396,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/Product.html":{}}}],["min(0",{"_index":404,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["min(1",{"_index":558,"title":{},"body":{"classes/FindUserDto.html":{}}}],["minimum",{"_index":376,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["miscellaneous",{"_index":1029,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mise",{"_index":268,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["mit",{"_index":1145,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1053,"title":{},"body":{"index.html":{}}}],["model",{"_index":595,"title":{},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modification",{"_index":215,"title":{},"body":{"classes/BaseEntity.html":{}}}],["modification'})@prop({default",{"_index":204,"title":{},"body":{"classes/BaseEntity.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["module/product/product.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module.ts",{"_index":948,"title":{},"body":{"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo.config",{"_index":583,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoconfig",{"_index":442,"title":{"injectables/MongoConfig.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"coverage.html":{},"overview.html":{}}}],["mongoconnection",{"_index":446,"title":{"injectables/MongoConnection.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["mongodb",{"_index":189,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongoConnection.html":{},"dependencies.html":{}}}],["mongodb/mongo.config",{"_index":445,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongodb/mongo.connection",{"_index":447,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoose",{"_index":211,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["mongoose.connect(uri",{"_index":585,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoose.disconnect",{"_index":590,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoosemodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":782,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooserepository",{"_index":592,"title":{"injectables/MongooseRepository.html":{}},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["mongooserepository(model",{"_index":788,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["more",{"_index":1081,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1160,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":659,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["méthodes",{"_index":848,"title":{},"body":{"injectables/ResponseService.html":{}}}],["même",{"_index":693,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["n'a",{"_index":333,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["n'est",{"_index":675,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":94,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ndiaye",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ne",{"_index":850,"title":{},"body":{"injectables/ResponseService.html":{}}}],["need",{"_index":1131,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1043,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1164,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1070,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":755,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":963,"title":{},"body":{"modules/ValidationModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":740,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":155,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":100,"title":{},"body":{"classes/BaseController.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["next",{"_index":493,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["node.js",{"_index":1035,"title":{},"body":{"index.html":{}}}],["nom",{"_index":363,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["nombre",{"_index":403,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindUserDto.html":{}}}],["nombre'})@min(0)@isnotempty({message",{"_index":380,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["non",{"_index":258,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["notfound",{"_index":825,"title":{},"body":{"injectables/ResponseService.html":{}}}],["notfound(message",{"_index":841,"title":{},"body":{"injectables/ResponseService.html":{}}}],["npm",{"_index":1047,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1063,"title":{},"body":{"index.html":{}}}],["number",{"_index":373,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{}}}],["number(request.query.limit",{"_index":639,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number(request.query.page",{"_index":637,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number})@apiquery({name",{"_index":726,"title":{},"body":{"controllers/ProductController.html":{}}}],["number})@get",{"_index":728,"title":{},"body":{"controllers/ProductController.html":{}}}],["numéro",{"_index":548,"title":{},"body":{"classes/FindUserDto.html":{}}}],["o.image",{"_index":407,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["object",{"_index":112,"title":{},"body":{"classes/BaseController.html":{}}}],["object.values(error.constraints).foreach((message",{"_index":515,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["obtenir",{"_index":661,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["offer",{"_index":1142,"title":{},"body":{"index.html":{}}}],["official",{"_index":1088,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":452,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["onmoduleinit",{"_index":453,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["open",{"_index":1147,"title":{},"body":{"index.html":{}}}],["option",{"_index":717,"title":{},"body":{"controllers/ProductController.html":{}}}],["optional",{"_index":96,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["options",{"_index":974,"title":{},"body":{"injectables/ValidationService.html":{}}}],["opération",{"_index":698,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["originale",{"_index":660,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod",{"_index":648,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod.apply(this",{"_index":665,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":880,"title":{},"body":{"injectables/UploadService.html":{}}}],["ou",{"_index":388,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["ouakam",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1171,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1065,"title":{},"body":{"index.html":{}}}],["package",{"_index":1001,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":538,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["paginateditems",{"_index":688,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paginateparams",{"_index":631,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":550,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":614,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["paginationparams",{"_index":620,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginée",{"_index":692,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["par",{"_index":528,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["param",{"_index":148,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":173,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["paramètres",{"_index":628,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paris",{"_index":556,"title":{},"body":{"classes/FindUserDto.html":{}}}],["paris'})@isstring()@isoptional",{"_index":539,"title":{},"body":{"classes/FindUserDto.html":{}}}],["parser",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":1132,"title":{},"body":{"index.html":{}}}],["partial",{"_index":98,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":858,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":857,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":861,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":334,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":817,"title":{},"body":{"interfaces/Response.html":{},"injectables/UploadService.html":{}}}],["path.extname(originalname",{"_index":898,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(dirpath",{"_index":906,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(folder",{"_index":910,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(this.basedir",{"_index":894,"title":{},"body":{"injectables/UploadService.html":{}}}],["platform",{"_index":1086,"title":{},"body":{"index.html":{}}}],["please",{"_index":1114,"title":{},"body":{"index.html":{}}}],["possible",{"_index":1078,"title":{},"body":{"index.html":{}}}],["post",{"_index":146,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":99,"title":{},"body":{"classes/BaseController.html":{}}}],["post()@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":714,"title":{},"body":{"controllers/ProductController.html":{}}}],["pour",{"_index":549,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":712,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":348,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["private",{"_index":280,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["prix",{"_index":374,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["process.env.cloudinary_api_key",{"_index":305,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":307,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":303,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.storage_service",{"_index":868,"title":{},"body":{"modules/UploadModule.html":{}}}],["process.env.upload_dir",{"_index":891,"title":{},"body":{"injectables/UploadService.html":{}}}],["product",{"_index":700,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.controller",{"_index":775,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":750,"title":{},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":346,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:12",{"_index":530,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:22",{"_index":533,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:24",{"_index":372,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:32",{"_index":534,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:42",{"_index":381,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:57",{"_index":392,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:70",{"_index":362,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.name",{"_index":783,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.service",{"_index":748,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/product.controller.ts",{"_index":736,"title":{},"body":{"controllers/ProductController.html":{}}}],["product/product.module.ts",{"_index":774,"title":{},"body":{"modules/ProductModule.html":{}}}],["product_repository",{"_index":787,"title":{},"body":{"modules/ProductModule.html":{}}}],["productcontroller",{"_index":710,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["production",{"_index":1055,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":41,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["products",{"_index":713,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["productschema",{"_index":708,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":747,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productservice).createwithimage",{"_index":766,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice).updatewithimage",{"_index":767,"title":{},"body":{"controllers/ProductController.html":{}}}],["produit",{"_index":353,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["produits",{"_index":723,"title":{},"body":{"controllers/ProductController.html":{}}}],["progressive",{"_index":1034,"title":{},"body":{"index.html":{}}}],["project",{"_index":1045,"title":{},"body":{"index.html":{}}}],["promise",{"_index":110,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":308,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":337,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["prop",{"_index":206,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["prop({required",{"_index":703,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["properties",{"_index":182,"title":{"properties.html":{}},"body":{"classes/BaseEntity.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"interfaces/Response.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":647,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["propertykey",{"_index":645,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["protected",{"_index":236,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":449,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["prénom",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["put",{"_index":147,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":172,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id')@apioperation({summary",{"_index":142,"title":{},"body":{"classes/BaseController.html":{}}}],["put(':id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":731,"title":{},"body":{"controllers/ProductController.html":{}}}],["quantit",{"_index":382,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["quantity",{"_index":349,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["que",{"_index":667,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":150,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["questions",{"_index":1112,"title":{},"body":{"index.html":{}}}],["qui",{"_index":849,"title":{},"body":{"injectables/ResponseService.html":{}}}],["read",{"_index":1155,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ready",{"_index":1068,"title":{},"body":{"index.html":{}}}],["real",{"_index":1127,"title":{},"body":{"index.html":{}}}],["recherche",{"_index":260,"title":{},"body":{"injectables/BaseService.html":{}}}],["recursive",{"_index":896,"title":{},"body":{"injectables/UploadService.html":{}}}],["reflect",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":785,"title":{},"body":{"modules/ProductModule.html":{}}}],["reject",{"_index":309,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":315,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(new",{"_index":316,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["relativepath",{"_index":909,"title":{},"body":{"injectables/UploadService.html":{}}}],["remove",{"_index":86,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":176,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":130,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rensaigner",{"_index":408,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["rensaigner'})@isoptional",{"_index":361,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["renseign",{"_index":371,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["renseignée",{"_index":391,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/BaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":634,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.limit",{"_index":638,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.page",{"_index":636,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.limit",{"_index":657,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.page",{"_index":656,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":366,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{}}}],["requiring",{"_index":1094,"title":{},"body":{"index.html":{}}}],["requête",{"_index":630,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["resolve",{"_index":323,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resources",{"_index":1106,"title":{},"body":{"index.html":{}}}],["response",{"_index":159,"title":{"interfaces/Response.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["response.interface",{"_index":845,"title":{},"body":{"injectables/ResponseService.html":{}}}],["response/response.service",{"_index":490,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["responseservice",{"_index":222,"title":{"injectables/ResponseService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ressource",{"_index":831,"title":{},"body":{"injectables/ResponseService.html":{}}}],["result",{"_index":270,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{}}}],["result.public_id",{"_index":322,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":325,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retournent",{"_index":851,"title":{},"body":{"injectables/ResponseService.html":{}}}],["retourner",{"_index":690,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["retournés",{"_index":643,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":1049,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1076,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["récupération",{"_index":263,"title":{},"body":{"injectables/BaseService.html":{}}}],["récupérer",{"_index":652,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["récupérée",{"_index":724,"title":{},"body":{"controllers/ProductController.html":{}}}],["réponse",{"_index":691,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultat",{"_index":662,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultats",{"_index":642,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["réussie",{"_index":587,"title":{},"body":{"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":1039,"title":{},"body":{"index.html":{}}}],["schema",{"_index":207,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":707,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(product",{"_index":709,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":921,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":1040,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":840,"title":{},"body":{"injectables/ResponseService.html":{}}}],["service",{"_index":663,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse",{"_index":664,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.data",{"_index":668,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.message",{"_index":697,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.status",{"_index":695,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["services/base/entity/base.entity",{"_index":918,"title":{},"body":{"classes/User.html":{}}}],["services/base/methode/mongoose.repository",{"_index":776,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["services/database/database.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/cloudinary/cloudinary.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.service",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1046,"title":{},"body":{"index.html":{}}}],["si",{"_index":673,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":1041,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1096,"title":{},"body":{"index.html":{}}}],["soft",{"_index":138,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["softdelete",{"_index":561,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdelete(id",{"_index":568,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdeleted",{"_index":275,"title":{},"body":{"injectables/BaseService.html":{}}}],["softremove",{"_index":87,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["softremove(@param('id",{"_index":179,"title":{},"body":{"classes/BaseController.html":{}}}],["softremove(id",{"_index":136,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"index.html":{}}}],["sponsors",{"_index":1150,"title":{},"body":{"index.html":{}}}],["src/.../database.interface.ts",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.decorator.ts",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../product.entity.ts",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload.interface.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts",{"_index":615,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:10",{"_index":617,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:6",{"_index":618,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/pagination.decorator",{"_index":753,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/decorator/pagination/pagination.decorator.ts",{"_index":621,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":991,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/product/dto/create",{"_index":345,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/find",{"_index":526,"title":{},"body":{"classes/FindProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/update",{"_index":856,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/module/product/entities/product.entity.ts",{"_index":701,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/product/entities/product.entity.ts:11",{"_index":705,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:14",{"_index":706,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:17",{"_index":702,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:8",{"_index":704,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/product.controller.ts",{"_index":711,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/module/product/product.module.ts",{"_index":773,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/module/product/product.service.ts",{"_index":790,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/module/product/product.service.ts:11",{"_index":793,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:23",{"_index":795,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:43",{"_index":797,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/user/dto/create",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/find",{"_index":536,"title":{},"body":{"classes/FindUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/update",{"_index":860,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/module/user/entities/user.entity.ts",{"_index":914,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/user/entities/user.entity.ts:11",{"_index":917,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:14",{"_index":915,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:8",{"_index":916,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/user.controller.ts",{"_index":923,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.module.ts",{"_index":947,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service.ts",{"_index":953,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:10",{"_index":954,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/base/entity/base.entity",{"_index":604,"title":{},"body":{"injectables/MongooseRepository.html":{},"classes/Product.html":{}}}],["src/services/base/entity/base.entity.ts",{"_index":181,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/services/base/entity/base.entity.ts:12",{"_index":196,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:16",{"_index":205,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:20",{"_index":202,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:8",{"_index":191,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/methode/base.controller",{"_index":745,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/services/base/methode/base.controller.ts",{"_index":82,"title":{},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["src/services/base/methode/base.controller.ts:16",{"_index":92,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:23",{"_index":108,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:31",{"_index":129,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:38",{"_index":119,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:47",{"_index":145,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:58",{"_index":135,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:66",{"_index":139,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.repository.interface",{"_index":603,"title":{},"body":{"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.repository.interface.ts",{"_index":560,"title":{},"body":{"interfaces/IBaseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/base.repository.interface.ts:10",{"_index":569,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:5",{"_index":563,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:6",{"_index":567,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:7",{"_index":566,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:8",{"_index":570,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:9",{"_index":565,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.service",{"_index":804,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.service.ts",{"_index":217,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/services/base/methode/base.service.ts:10",{"_index":223,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:17",{"_index":225,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:28",{"_index":229,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:44",{"_index":227,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:55",{"_index":232,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:71",{"_index":230,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:87",{"_index":231,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/mongoose.repository.ts",{"_index":593,"title":{},"body":{"injectables/MongooseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/mongoose.repository.ts:10",{"_index":596,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:13",{"_index":597,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:18",{"_index":600,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:22",{"_index":599,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:26",{"_index":602,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:30",{"_index":598,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:35",{"_index":601,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/database/database.module",{"_index":966,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/services/database/database.module.ts",{"_index":443,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/services/database/database.service.ts",{"_index":451,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/services/database/database.service.ts:13",{"_index":455,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:18",{"_index":458,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:22",{"_index":457,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/interfaces/database.interface.ts",{"_index":429,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/database/interfaces/database.interface.ts:2",{"_index":431,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["src/services/database/interfaces/database.interface.ts:6",{"_index":436,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/interfaces/database.interface.ts:7",{"_index":437,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/mongodb/mongo.config.ts",{"_index":571,"title":{},"body":{"injectables/MongoConfig.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.config.ts:5",{"_index":573,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.config.ts:8",{"_index":574,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.connection.ts",{"_index":577,"title":{},"body":{"injectables/MongoConnection.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:11",{"_index":581,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:22",{"_index":582,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:8",{"_index":579,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts",{"_index":279,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:11",{"_index":284,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:21",{"_index":293,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:50",{"_index":288,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/interfaces/upload.interface",{"_index":805,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts",{"_index":520,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:12",{"_index":521,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:8",{"_index":523,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/upload.module",{"_index":780,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/services/upload/upload.module.ts",{"_index":865,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/services/upload/upload.service.ts",{"_index":870,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/services/upload/upload.service.ts:12",{"_index":882,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:15",{"_index":886,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:16",{"_index":875,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:22",{"_index":877,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:28",{"_index":879,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:34",{"_index":884,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:58",{"_index":883,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/validation/exception/exception.service",{"_index":234,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/exception.service.ts",{"_index":462,"title":{},"body":{"injectables/ExceptionService.html":{},"coverage.html":{}}}],["src/validation/exception/exception.service.ts:11",{"_index":470,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:14",{"_index":485,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:23",{"_index":477,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:28",{"_index":482,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:33",{"_index":480,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:38",{"_index":488,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:9",{"_index":473,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/response/response.interface",{"_index":160,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["src/validation/exception/response/response.interface.ts",{"_index":816,"title":{},"body":{"interfaces/Response.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service",{"_index":235,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/response/response.service.ts",{"_index":821,"title":{},"body":{"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts:15",{"_index":830,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:25",{"_index":827,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:34",{"_index":834,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:42",{"_index":842,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:50",{"_index":838,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:6",{"_index":844,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/validation.module.ts",{"_index":961,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/validation/validation.service.ts",{"_index":969,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{}}}],["src/validation/validation.service.ts:7",{"_index":972,"title":{},"body":{"injectables/ValidationService.html":{}}}],["start",{"_index":1051,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1054,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1056,"title":{},"body":{"index.html":{}}}],["started",{"_index":1033,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1044,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":687,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":164,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":818,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["stay",{"_index":1135,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1073,"title":{},"body":{"index.html":{}}}],["stock",{"_index":384,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["straightforward",{"_index":1092,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string})@apiquery({name",{"_index":727,"title":{},"body":{"controllers/ProductController.html":{}}}],["structure",{"_index":678,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":696,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["success(data",{"_index":843,"title":{},"body":{"injectables/ResponseService.html":{}}}],["successfully",{"_index":106,"title":{},"body":{"classes/BaseController.html":{}}}],["succès",{"_index":274,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{}}}],["summary",{"_index":162,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["super(options",{"_index":982,"title":{},"body":{"injectables/ValidationService.html":{}}}],["super(productservice",{"_index":759,"title":{},"body":{"controllers/ProductController.html":{}}}],["super(repository",{"_index":808,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["super(userservice",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["super.create(createdto",{"_index":940,"title":{},"body":{"controllers/UserController.html":{}}}],["super.findall(filter",{"_index":768,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super.findone(id",{"_index":938,"title":{},"body":{"controllers/UserController.html":{}}}],["super.remove(id",{"_index":943,"title":{},"body":{"controllers/UserController.html":{}}}],["super.update(id",{"_index":942,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":1113,"title":{},"body":{"index.html":{},"modules.html":{}}}],["suppression",{"_index":199,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{}}}],["supprimée",{"_index":273,"title":{},"body":{"injectables/BaseService.html":{}}}],["supérieure",{"_index":387,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["sur",{"_index":641,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["svg",{"_index":1169,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":820,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["table",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":672,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1074,"title":{},"body":{"index.html":{}}}],["target",{"_index":644,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["teamx",{"_index":1166,"title":{},"body":{"index.html":{}}}],["test",{"_index":1059,"title":{},"body":{"index.html":{}}}],["test:covexample",{"_index":1062,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1061,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1057,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1149,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.basedir",{"_index":890,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.baseservice.create(createdto",{"_index":166,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findall(filter",{"_index":171,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findbyid(id",{"_index":169,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.remove(id",{"_index":177,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.softremove(id",{"_index":180,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.update(id",{"_index":174,"title":{},"body":{"classes/BaseController.html":{}}}],["this.config.getconnectionconfig",{"_index":584,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["this.configservice.get('mongodb_uri",{"_index":575,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["this.connection.connect",{"_index":460,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.connection.disconnect",{"_index":461,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.create(createdto",{"_index":813,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.ensuredirectory(folder",{"_index":902,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.exceptionservice.createinternalserverexception",{"_index":245,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["this.exceptionservice.createnotfoundexception",{"_index":254,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.exceptionservice.createvalidationexception(errors",{"_index":981,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.formaterrors(errors",{"_index":502,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.generatefilename(file.originalname",{"_index":904,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.httpresponseservice.badrequest",{"_index":503,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.forbidden(message",{"_index":507,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.internalerror(message",{"_index":511,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.notfound(message",{"_index":509,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.logger.error",{"_index":312,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.error(`échec",{"_index":340,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.log(`image",{"_index":320,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.model",{"_index":612,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model(createdto",{"_index":605,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.find",{"_index":608,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyid(id).exec",{"_index":607,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidanddelete(id).exec",{"_index":611,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidandupdate(id",{"_index":610,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.productservice",{"_index":765,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.repository.create(createdto",{"_index":240,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.delete(id",{"_index":271,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findall(filter",{"_index":261,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findbyid(id",{"_index":250,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.softdelete(id",{"_index":276,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.update(id",{"_index":266,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.created(created",{"_index":241,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success",{"_index":277,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entities",{"_index":262,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entity",{"_index":251,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(null",{"_index":272,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(updated",{"_index":267,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.update(id",{"_index":815,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadservice.uploadsingle",{"_index":810,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadsingle(file",{"_index":339,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["time",{"_index":1128,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":819,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["timestamps",{"_index":919,"title":{},"body":{"classes/User.html":{}}}],["total",{"_index":683,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":1157,"title":{},"body":{"index.html":{}}}],["transform",{"_index":976,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transformer",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":978,"title":{},"body":{"injectables/ValidationService.html":{}}}],["tre",{"_index":360,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["trouvée",{"_index":259,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{}}}],["true})@isnumber",{"_index":378,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["true})@isnumber()@min(0",{"_index":386,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["true})@isstring({message",{"_index":367,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":237,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["tsconfig.jsondeployment",{"_index":1066,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1163,"title":{},"body":{"index.html":{}}}],["type",{"_index":95,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":210,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/PaginationParams.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":187,"title":{},"body":{"classes/BaseEntity.html":{}}}],["types/multer",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":495,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["ui",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":379,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiquery({name",{"_index":725,"title":{},"body":{"controllers/ProductController.html":{}}}],["une",{"_index":368,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["unique",{"_index":190,"title":{},"body":{"classes/BaseEntity.html":{}}}],["unit",{"_index":1058,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":632,"title":{},"body":{"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1178,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":497,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["update",{"_index":88,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":941,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":140,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":144,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["updatedat",{"_index":186,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedto",{"_index":141,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedto.image",{"_index":814,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":730,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updates",{"_index":1137,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":859,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatewithimage",{"_index":792,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatewithimage(id",{"_index":796,"title":{},"body":{"injectables/ProductService.html":{}}}],["upload",{"_index":524,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"miscellaneous/variables.html":{}}}],["upload.service",{"_index":867,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadedfile",{"_index":738,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadfile",{"_index":874,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadfile(image",{"_index":881,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":42,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadmultiple",{"_index":282,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadmultiple(files",{"_index":285,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadresult",{"_index":809,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadresult.url",{"_index":812,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":892,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploads/${relativepath",{"_index":911,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadservice",{"_index":46,"title":{"injectables/UploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProductService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadsingle",{"_index":283,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadsingle(file",{"_index":292,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadstream",{"_index":310,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadstream.end(file.buffer",{"_index":326,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadée",{"_index":321,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uri",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["url",{"_index":324,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["useclass",{"_index":450,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UploadModule.html":{}}}],["useexisting",{"_index":968,"title":{},"body":{"modules/ValidationModule.html":{}}}],["usefactory",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["useinterceptors",{"_index":737,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":762,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":763,"title":{},"body":{"controllers/ProductController.html":{}}}],["user",{"_index":913,"title":{"classes/User.html":{}},"body":{"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":949,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":862,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":542,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:17",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":544,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:27",{"_index":540,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:30",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":552,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:39",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":547,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.name",{"_index":950,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":932,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user_repository",{"_index":951,"title":{},"body":{"modules/UserModule.html":{}}}],["usercontroller",{"_index":922,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":920,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":931,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1129,"title":{},"body":{"index.html":{}}}],["v2",{"_index":295,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["validateif",{"_index":399,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validateif((o",{"_index":406,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validation",{"_index":504,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["validation.service",{"_index":964,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validation/exception/exception.service",{"_index":778,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/exception/response/response.service",{"_index":779,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/validation.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["validationerror",{"_index":484,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ValidationService.html":{}}}],["validationmodule",{"_index":44,"title":{"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["validationpipe",{"_index":970,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationpipeoptions",{"_index":973,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationservice",{"_index":960,"title":{"injectables/ValidationService.html":{}},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":400,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["valide",{"_index":336,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["value",{"_index":121,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1179,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":498,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["version",{"_index":1176,"title":{},"body":{"properties.html":{}}}],["vide",{"_index":319,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["video",{"_index":1121,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1110,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1124,"title":{},"body":{"index.html":{}}}],["void",{"_index":475,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["votre",{"_index":694,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["vérifier",{"_index":666,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":1052,"title":{},"body":{"index.html":{}}}],["website",{"_index":1161,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":975,"title":{},"body":{"injectables/ValidationService.html":{}}}],["working",{"_index":1109,"title":{},"body":{"index.html":{}}}],["world",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1139,"title":{},"body":{"index.html":{}}}],["yes",{"_index":522,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["you'd",{"_index":1153,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1067,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // app.module.ts\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { DatabaseModule } from './services/database/database.module';\nimport { UserModule } from './module/user/user.module';\nimport { ValidationModule } from './validation/validation.module';\nimport { CloudinaryService } from './services/upload/cloudinary/cloudinary.service';\nimport { UploadService } from './services/upload/upload.service';\nimport { UploadModule } from './services/upload/upload.module';\nimport { ProductModule } from './module/product/product.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n      }),\n      inject: [ConfigService],\n    }),\n    DatabaseModule,\n    UserModule,\n    ValidationModule,\n    UploadModule,\n    ProductModule,\n  ],\n  providers: [CloudinaryService, UploadService],\n  controllers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseController.html":{"url":"classes/BaseController.html","title":"class - BaseController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseService: BaseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.controller.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseService\n                                                  \n                                                        \n                                                                        BaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new entity'})@ApiBody({description: 'Entity data'})@ApiResponse({status: 201, description: 'Entity successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: object)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all entities'})@ApiResponse({status: 200, description: 'List of entities.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiBody({description: 'Updated entity data'})@ApiResponse({status: 200, description: 'Entity updated.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n  Query,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\nimport { BaseEntity } from '../entity/base.entity';\nimport { BaseService } from './base.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\nexport abstract class BaseController {\n  constructor(private readonly baseService: BaseService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new entity' })\n  @ApiBody({ description: 'Entity data' })\n  @ApiResponse({ status: 201, description: 'Entity successfully created.' })\n  async create(@Body() createDto: Partial): Promise> {\n    return this.baseService.create(createDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find entity by id' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity found.' })\n  async findOne(@Param('id') id: string): Promise> {\n    return this.baseService.findById(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all entities' })\n  @ApiResponse({ status: 200, description: 'List of entities.' })\n  async findAll(@Query() filter = {}): Promise> {\n    return this.baseService.findAll(filter);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiBody({ description: 'Updated entity data' })\n  @ApiResponse({ status: 200, description: 'Entity updated.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: Partial,\n  ): Promise> {\n    return this.baseService.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity deleted.' })\n  async remove(@Param('id') id: string): Promise> {\n    return this.baseService.remove(id);\n  }\n\n  @Delete(':id/soft')\n  @ApiOperation({ summary: 'Soft delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity soft deleted.' })\n  async softRemove(@Param('id') id: string): Promise> {\n    return this.baseService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/entity/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID MongoDB unique'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de création'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicateur de suppression logique'})@Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de dernière modification'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document, Types } from 'mongoose';\n\n@Schema()\nexport class BaseEntity extends Document {\n  @ApiProperty({ description: 'ID MongoDB unique' })\n  _id: Types.ObjectId;\n\n  @ApiProperty({ description: 'Date de création' })\n  @Prop({ default: Date.now })\n  createdAt: Date;\n\n  @ApiProperty({ description: 'Date de dernière modification' })\n  @Prop({ default: Date.now })\n  updatedAt: Date;\n\n  @ApiProperty({ description: 'Indicateur de suppression logique' })\n  @Prop({ default: false })\n  isDeleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FilterQuery } from 'mongoose';\nimport { BaseEntity } from '../entity/base.entity';\nimport { IBaseRepository } from './base.repository.interface';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected readonly repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {}\n\n  async create(createDto: Partial): Promise> {\n    try {\n      const created = await this.repository.create(createDto);\n      return this.responseService.created(created);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création: ${error.message}`,\n      );\n    }\n  }\n\n  async findById(id: string): Promise> {\n    try {\n      const entity = await this.repository.findById(id);\n      return this.responseService.success(entity);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la recherche: ${error.message}`,\n      );\n    }\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise> {\n    try {\n      const entities = await this.repository.findAll(filter);\n      return this.responseService.success(entities);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la récupération des entités: ${error.message}`,\n      );\n    }\n  }\n\n  async update(id: string, updateDto: Partial): Promise> {\n    try {\n      const updated = await this.repository.update(id, updateDto);\n      return this.responseService.success(updated);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour: ${error.message}`,\n      );\n    }\n  }\n\n  async remove(id: string): Promise> {\n    try {\n      const result = await this.repository.delete(id);\n      if (!result) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      return this.responseService.success(null, 'Entité supprimée avec succès');\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression: ${error.message}`,\n      );\n    }\n  }\n\n  async softRemove(id: string): Promise> {\n    try {\n      const softDeleted = await this.repository.softDelete(id);\n      return this.responseService.success(\n        softDeleted,\n        'Entité supprimée logiquement avec succès',\n      );\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression logique: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CloudinaryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../interfaces/upload.interface';\n\n@Injectable()\nexport class CloudinaryService implements FileStorageService {\n  private logger = new Logger(CloudinaryService.name);\n\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        { folder },\n        (error, result) => {\n          if (error) {\n            this.logger.error(\n              `Erreur lors de l'upload: ${JSON.stringify(error)}`,\n            );\n            return reject(error);\n          }\n          if (!result) {\n            return reject(new Error(\"Résultat d'upload vide\"));\n          }\n          this.logger.log(`Image uploadée avec succès: ${result.public_id}`);\n          resolve({\n            url: result.secure_url,\n            id: result.public_id,\n          });\n        },\n      );\n\n      uploadStream.end(file.buffer);\n    });\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    files.forEach((file, index) => {\n      if (!file.buffer?.length) {\n        throw new Error(\n          `Le fichier à l'index ${index} n'a pas de contenu valide`,\n        );\n      }\n    });\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw new Error(`Échec de l'upload des images: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL de l'image du produit', example: 'https://example.com/iphone13.jpg', type: 'string', format: 'binary'})@ValidateIf(o => , {message: 'l'image doit être rensaigner'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom du produit', example: 'iPhone 13', required: true})@IsString({message: 'Le nom doit être une chaîne de caractères'})@IsNotEmpty({message: 'Le nom doit être renseigné'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prix du produit', example: 10000, minimum: 0, required: true})@IsNumber({}, {message: 'Le prix doit être un nombre'})@Min(0)@IsNotEmpty({message: 'Le prix doit être renseigné'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Quantité en stock', example: 50, minimum: 0, required: true})@IsNumber()@Min(0, {message: 'La quantité doit être supérieure ou égale à 0'})@IsNotEmpty({message: 'La quantité doit être renseignée'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNumber,\n  IsNotEmpty,\n  Min,\n  IsOptional,\n  /*   IsUrl, */\n  ValidateIf,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Nom du produit',\n    example: 'iPhone 13',\n    required: true,\n  })\n  @IsString({\n    message: 'Le nom doit être une chaîne de caractères',\n  })\n  @IsNotEmpty({\n    message: 'Le nom doit être renseigné',\n  })\n  name: string;\n\n  @ApiProperty({\n    description: 'Prix du produit',\n    example: 10000,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber(\n    {},\n    {\n      message: 'Le prix doit être un nombre',\n    },\n  )\n  @Min(0)\n  @IsNotEmpty({\n    message: 'Le prix doit être renseigné',\n  })\n  price: number;\n\n  @ApiProperty({\n    description: 'Quantité en stock',\n    example: 50,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber()\n  @Min(0, {\n    message: 'La quantité doit être supérieure ou égale à 0',\n  })\n  @IsNotEmpty({\n    message: 'La quantité doit être renseignée',\n  })\n  quantity: number;\n\n  @ApiPropertyOptional({\n    description: \"URL de l'image du produit\",\n    example: 'https://example.com/iphone13.jpg',\n    type: 'string',\n    format: 'binary',\n  })\n  @ValidateIf((o) => o.image !== undefined && o.image !== '', {\n    message: \"l'image doit être rensaigner\",\n  })\n  /*  @IsUrl() */\n  @IsOptional()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Adresse de l'utilisateur', example: 'Ouakam', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prénom de l'utilisateur', example: 'Baba Issa', required: true})@IsString({message: 'Le prénom doit être une chaîne de caractères'})@IsNotEmpty({message: 'Le prénom doit être renseigné'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom de l'utilisateur', example: 'Ndiaye', required: true})@IsString({message: 'Le nom doit être une chaîne de caractères'})@IsNotEmpty({message: 'Le nom doit être renseigné'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: \"Prénom de l'utilisateur\",\n    example: 'Baba Issa',\n    required: true,\n  })\n  @IsString({\n    message: 'Le prénom doit être une chaîne de caractères',\n  })\n  @IsNotEmpty({\n    message: 'Le prénom doit être renseigné',\n  })\n  firstname: string;\n\n  @ApiProperty({\n    description: \"Nom de l'utilisateur\",\n    example: 'Ndiaye',\n    required: true,\n  })\n  @IsString({\n    message: 'Le nom doit être une chaîne de caractères',\n  })\n  @IsNotEmpty({\n    message: 'Le nom doit être renseigné',\n  })\n  lastname: string;\n\n  @ApiProperty({\n    description: \"Adresse de l'utilisateur\",\n    example: 'Ouakam',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConfig.html":{"url":"interfaces/DatabaseConfig.html","title":"interface - DatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionConfig\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConnection.html":{"url":"interfaces/DatabaseConnection.html","title":"interface - DatabaseConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connect\n                                    \n                                \n                                \n                                    \n                                        disconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MongoConfig\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseService } from './database.service';\nimport { MongoConfig } from './mongodb/mongo.config';\nimport { MongoConnection } from './mongodb/mongo.connection';\nimport { DATABASE_CONNECTION } from './interfaces/database.interface';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    MongoConfig,\n    {\n      provide: DATABASE_CONNECTION,\n      useClass: MongoConnection,\n    },\n    DatabaseService,\n  ],\n  exports: [DatabaseService, DATABASE_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: DatabaseConnection)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/database.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                        DatabaseConnection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport {\n  DatabaseConnection,\n  DATABASE_CONNECTION,\n} from './interfaces/database.interface';\n\n@Injectable()\nexport class DatabaseService implements OnModuleInit, OnModuleDestroy {\n  constructor(\n    @Inject(DATABASE_CONNECTION) private connection: DatabaseConnection,\n  ) {}\n\n  async onModuleInit() {\n    await this.connection.connect();\n  }\n\n  async onModuleDestroy() {\n    await this.connection.disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionService.html":{"url":"injectables/ExceptionService.html","title":"injectable - ExceptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/exception.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBadRequestException\n                            \n                            \n                                createForbiddenException\n                            \n                            \n                                createInternalServerException\n                            \n                            \n                                createNotFoundException\n                            \n                            \n                                createValidationException\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpResponseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/exception/exception.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpResponseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBadRequestException\n                        \n                    \n                \n            \n            \n                \ncreateBadRequestException(arg0: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg0\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createForbiddenException\n                        \n                    \n                \n            \n            \n                \ncreateForbiddenException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInternalServerException\n                        \n                    \n                \n            \n            \n                \ncreateInternalServerException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNotFoundException\n                        \n                    \n                \n            \n            \n                \ncreateNotFoundException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createValidationException\n                        \n                    \n                \n            \n            \n                \ncreateValidationException(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ResponseService } from './response/response.service';\n\n@Injectable()\nexport class ExceptionService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createBadRequestException(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(private readonly httpResponseService: ResponseService) {}\n\n  createValidationException(errors: ValidationError[]): HttpException {\n    const messages = this.formatErrors(errors);\n    const response = this.httpResponseService.badRequest(\n      messages,\n      'Erreur de validation',\n    );\n    return new HttpException(response, HttpStatus.BAD_REQUEST);\n  }\n\n  createForbiddenException(message: string): HttpException {\n    const response = this.httpResponseService.forbidden(message);\n    return new HttpException(response, HttpStatus.FORBIDDEN);\n  }\n\n  createNotFoundException(message: string): HttpException {\n    const response = this.httpResponseService.notFound(message);\n    return new HttpException(response, HttpStatus.NOT_FOUND);\n  }\n\n  createInternalServerException(message: string): HttpException {\n    const response = this.httpResponseService.internalError(message);\n    return new HttpException(response, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const messages: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        Object.values(error.constraints).forEach((message) => {\n          messages.push(message);\n        });\n      }\n      if (error.children && error.children.length > 0) {\n        messages.push(...this.formatErrors(error.children));\n      }\n    });\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorageService.html":{"url":"interfaces/FileStorageService.html","title":"interface - FileStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        uploadMultiple\n                                    \n                                \n                                \n                                    \n                                        uploadSingle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \nuploadMultiple(files: Express.Multer.File[], folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \nuploadSingle(file: Express.Multer.File, folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadResult.html":{"url":"interfaces/FileUploadResult.html","title":"interface - FileUploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductDto.html":{"url":"classes/FindProductDto.html","title":"class - FindProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/find-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom de produit', example: 'iPhone'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prix', example: 999.99, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par quantité', example: 50, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsOptional, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindProductDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom de produit',\n    example: 'iPhone',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par prix',\n    example: 999.99,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  price?: number;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par quantité',\n    example: 50,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  quantity?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserDto.html":{"url":"classes/FindUserDto.html","title":"class - FindUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/find-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par adresse', example: 'Paris'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prénom', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Nombre d'éléments par page', example: 10})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Numéro de page pour la pagination', example: 1})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsInt, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindUserDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par prénom',\n    example: 'John',\n  })\n  @IsString()\n  @IsOptional()\n  firstname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsOptional()\n  lastname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par adresse',\n    example: 'Paris',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiPropertyOptional({\n    description: 'Numéro de page pour la pagination',\n    example: 1,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  page?: number;\n\n  @ApiPropertyOptional({\n    description: \"Nombre d'éléments par page\",\n    example: 10,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseRepository.html":{"url":"interfaces/IBaseRepository.html","title":"interface - IBaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                                \n                                    \n                                        softDelete\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(filter?: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        softDelete\n                        \n                    \n                \n            \n            \n                \nsoftDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FilterQuery } from 'mongoose';\n\nexport interface IBaseRepository {\n  create(entity: Partial): Promise;\n  findById(id: string): Promise;\n  findAll(filter?: FilterQuery): Promise;\n  update(id: string, entity: Partial): Promise;\n  delete(id: string): Promise;\n  softDelete(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConfig.html":{"url":"injectables/MongoConfig.html","title":"injectable - MongoConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConnectionConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.config.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.config.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { uri: any; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { DatabaseConfig } from '../interfaces/database.interface';\n@Injectable()\nexport class MongoConfig implements DatabaseConfig {\n  constructor(private configService: ConfigService) {}\n\n  getConnectionConfig() {\n    const uri = this.configService.get('MONGODB_URI');\n    console.log('MongoDB URI:', uri);\n    return { uri };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConnection.html":{"url":"injectables/MongoConnection.html","title":"injectable - MongoConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.connection.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: MongoConfig)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.connection.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        MongoConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                        \n                    connect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as mongoose from 'mongoose';\nimport { DatabaseConnection } from '../interfaces/database.interface';\nimport { MongoConfig } from './mongo.config';\n\n@Injectable()\nexport class MongoConnection implements DatabaseConnection {\n  constructor(private config: MongoConfig) {}\n\n  async connect(): Promise {\n    try {\n      const { uri } = this.config.getConnectionConfig();\n      await mongoose.connect(uri);\n      console.log('Connexion à MongoDB réussie ! 🎉');\n    } catch (error) {\n      console.error('Erreur de connexion à MongoDB:', error);\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise {\n    await mongoose.disconnect();\n    console.log('Déconnexion de MongoDB réussie');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongooseRepository.html":{"url":"injectables/MongooseRepository.html","title":"injectable - MongooseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongooseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/mongoose.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/mongoose.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, FilterQuery } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Injectable()\nexport class MongooseRepository\n  implements IBaseRepository\n{\n  constructor(private readonly model: Model) {}\n\n  async create(createDto: Partial): Promise {\n    const created = new this.model(createDto);\n    return created.save();\n  }\n\n  async findById(id: string): Promise {\n    return this.model.findById(id).exec();\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise {\n    return this.model.find({ ...filter, isDeleted: false }).exec();\n  }\n\n  async update(id: string, updateDto: Partial): Promise {\n    return this.model.findByIdAndUpdate(id, updateDto, { new: true }).exec();\n  }\n\n  async delete(id: string): Promise {\n    const result = await this.model.findByIdAndDelete(id).exec();\n    return !!result;\n  }\n\n  async softDelete(id: string): Promise {\n    return this.model\n      .findByIdAndUpdate(id, { isDeleted: true }, { new: true })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsNumberString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @IsNumberString()\n  page?: string;\n\n  @IsOptional()\n  @IsNumberString()\n  limit?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/pagination.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\n// Définition des types pour la pagination\ninterface PaginationParams {\n  page: number;\n  limit: number;\n}\n\n// Décorateur pour extraire les paramètres de pagination depuis la requête\nexport const PaginateParams = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n);\n\n// Décorateur pour appliquer la logique de pagination sur les résultats retournés\nexport const Pagination = () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/entities/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Schema()\nexport class Product extends BaseEntity {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, min: 0 })\n  price: number;\n\n  @Prop({ required: true, min: 0 })\n  quantity: number;\n\n  @Prop()\n  image: string;\n}\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'Produit créer avec option d''upload image', type: CreateProductDto})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:47\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'get All list '})@ApiResponse({status: 200, description: 'Liste des produits récupérée avec succès', type: undefined})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiQuery({name: 'name', required: false, type: String})@ApiQuery({name: 'price', required: false, type: Number})@ApiQuery({name: 'quantity', required: false, type: Number})@Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:88\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:61\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:31\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:58\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // product/product.controller.ts\nimport {\n  Controller,\n  Post,\n  Put,\n  Param,\n  Body,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  Get,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiConsumes,\n  ApiBody,\n  ApiQuery,\n  ApiResponse,\n  ApiOperation,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { FindProductDto } from './dto/find-product.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\nimport { CacheInterceptor } from '@nestjs/cache-manager';\n\n@Controller('products')\n@ApiTags('products')\nexport class ProductController extends BaseController {\n  constructor(private readonly productService: ProductService) {\n    super(productService);\n    console.log('ProductController initialized');\n  }\n\n  @Post()\n  /*  @UseInterceptors(CacheInterceptor) */\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: \"Produit créer avec option d''upload image\",\n    type: CreateProductDto,\n  })\n  async create(\n    @Body() createDto: CreateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).createWithImage(\n      createDto,\n      file,\n    );\n  }\n\n  @Put(':id')\n  @UseInterceptors(FileInterceptor('image'))\n  /* @UseInterceptors(CacheInterceptor) */\n  @ApiConsumes('multipart/form-data')\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).updateWithImage(\n      id,\n      updateDto,\n      file,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'get All list ' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des produits récupérée avec succès',\n    type: [CreateProductDto],\n  })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiQuery({ name: 'name', required: false, type: String })\n  @ApiQuery({ name: 'price', required: false, type: Number })\n  @ApiQuery({ name: 'quantity', required: false, type: Number })\n  /*  @Pagination() */\n  /*  @UseInterceptors(CacheInterceptor) */\n  @Get()\n  async findAll(@Query() filter: FindProductDto) {\n    return super.findAll(filter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nUploadModule\n\nUploadModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ProductService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UploadModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // product/product.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProductController } from './product.controller';\nimport { ProductService } from './product.service';\nimport { Product, ProductSchema } from './entities/product.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\nimport { UploadModule } from 'src/services/upload/upload.module';\nimport { CacheModule } from '@nestjs/cache-manager';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Product.name, schema: ProductSchema }]),\n    UploadModule,\n    CacheModule.register(), // Register the cache module\n  ],\n  controllers: [ProductController],\n  providers: [\n    ProductService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'PRODUCT_REPOSITORY',\n      useFactory: (model: Model) => {\n        const repository = new MongooseRepository(model);\n        return repository;\n      },\n      inject: [getModelToken(Product.name)],\n    },\n  ],\n  exports: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWithImage\n                            \n                            \n                                    Async\n                                updateWithImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, uploadService: FileStorageService, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/product/product.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        FileStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWithImage(createDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithImage(id: string, updateDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { Product } from './entities/product.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { FileStorageService } from 'src/services/upload/interfaces/upload.interface';\n\n@Injectable()\nexport class ProductService extends BaseService {\n  constructor(\n    @Inject('PRODUCT_REPOSITORY')\n    repository: IBaseRepository,\n    @Inject('UploadService')\n    private readonly uploadService: FileStorageService,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n\n  async createWithImage(\n    createDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        createDto.image = uploadResult.url;\n      }\n      return this.create(createDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création du produit avec image: ${error.message}`,\n      );\n    }\n  }\n\n  async updateWithImage(\n    id: string,\n    updateDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        updateDto.image = uploadResult.url;\n      }\n      return this.update(id, updateDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour du produit avec image: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Response {\n  statusCode: number;\n  message: string;\n  data?: T;\n  errors?: string[];\n  timestamp: string;\n  path?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequest\n                            \n                            \n                                created\n                            \n                            \n                                forbidden\n                            \n                            \n                                internalError\n                            \n                            \n                                notFound\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequest\n                        \n                    \n                \n            \n            \n                \nbadRequest(errors: string[], message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Requête invalide'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n            \n                \ncreated(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource créée avec succès'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbidden\n                        \n                    \n                \n            \n            \n                \nforbidden(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Accès interdit'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalError\n                        \n                    \n                \n            \n            \n                \ninternalError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notFound\n                        \n                    \n                \n            \n            \n                \nnotFound(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource non trouvée'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n            \n                \nsuccess(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:6\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Opération réussie'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from './response.interface';\n\n@Injectable()\nexport class ResponseService {\n  success(data: T, message = 'Opération réussie'): Response {\n    return {\n      statusCode: 200,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  created(data: T, message = 'Ressource créée avec succès'): Response {\n    return {\n      statusCode: 201,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Ajout du type void pour les méthodes qui ne retournent pas de données\n  badRequest(errors: string[], message = 'Requête invalide'): Response {\n    return {\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  forbidden(message = 'Accès interdit'): Response {\n    return {\n      statusCode: 403,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  notFound(message = 'Ressource non trouvée'): Response {\n    return {\n      statusCode: 404,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  internalError(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary/cloudinary.service';\nimport { UploadService } from './upload.service';\n@Module({\n  providers: [\n    {\n      provide: 'UploadService',\n      useClass:\n        process.env.STORAGE_SERVICE === 'local'\n          ? UploadService\n          : CloudinaryService,\n    },\n  ],\n  exports: ['UploadService'],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseDir\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                ensureDirectory\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/upload.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureDirectory(folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(originalName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UploadService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from './interfaces/upload.interface';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n@Injectable()\nexport class UploadService implements FileStorageService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  uploadFile(image: Express.Multer.File) {\n    throw new Error('Method not implemented.');\n  }\n  private logger = new Logger(UploadService.name);\n  private baseDir: string;\n\n  constructor() {\n    this.baseDir = process.env.UPLOAD_DIR || 'uploads';\n  }\n\n  private async ensureDirectory(folder: string): Promise {\n    const dirPath = path.join(this.baseDir, folder);\n    await fs.mkdir(dirPath, { recursive: true });\n    return dirPath;\n  }\n\n  private generateFileName(originalName: string): string {\n    const ext = path.extname(originalName);\n    const hash = crypto.randomBytes(8).toString('hex');\n    return `${hash}${ext}`;\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    const dirPath = await this.ensureDirectory(folder);\n    const fileName = this.generateFileName(file.originalname);\n    const filePath = path.join(dirPath, fileName);\n\n    try {\n      await fs.writeFile(filePath, file.buffer);\n      const relativePath = path.join(folder, fileName);\n\n      return {\n        url: `/uploads/${relativePath}`,\n        id: relativePath,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erreur lors de l'enregistrement du fichier: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                firstname\n                            \n                            \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from '../../../services/base/entity/base.entity';\n\n@Schema({ timestamps: true })\nexport class User extends BaseEntity {\n  @Prop({ required: true })\n  firstname: string;\n\n  @Prop({ required: true })\n  lastname: string;\n\n  @Prop({ required: true })\n  address: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:49\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:38\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:60\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { FindUserDto } from './dto/find-user.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\n\n@Controller('users')\n@ApiTags('users')\nexport class UserController extends BaseController {\n  constructor(private readonly userService: UserService) {\n    super(userService);\n    console.log('UserController initialized');\n  }\n\n  @Get()\n  /* @Pagination() */\n  async findAll(@Query() filter: FindUserDto) {\n    console.log('Finding all users with filter:', filter);\n    return super.findAll(filter);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return super.findOne(id);\n  }\n\n  @Post()\n  async create(@Body() createDto: CreateUserDto) {\n    console.log('Creating user:', createDto);\n    return super.create(createDto);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateDto: UpdateUserDto) {\n    return super.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return super.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // module/user/user.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { User, UserSchema } from './entities/user.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'USER_REPOSITORY',\n      useFactory: (model: Model) => {\n        return new MongooseRepository(model);\n      },\n      inject: [getModelToken(User.name)],\n    },\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { User } from './entities/user.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\n\n@Injectable()\nexport class UserService extends BaseService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_imports\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/validation/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { ValidationService } from './validation.service';\nimport { ExceptionService } from './exception/exception.service';\nimport { DatabaseModule } from 'src/services/database/database.module';\nimport { ResponseService } from './exception/response/response.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ValidationService,\n    ExceptionService,\n\n    {\n      provide: APP_PIPE,\n      useExisting: ValidationService,\n    },\n\n    ResponseService,\n  ],\n  exports: [ValidationService, ExceptionService, ResponseService],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validation.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ValidationPipe\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exceptionService: ExceptionService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/validation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationPipe, ValidationPipeOptions } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ExceptionService } from './exception/exception.service';\n@Injectable()\nexport class ValidationService extends ValidationPipe {\n  constructor(private readonly exceptionService: ExceptionService) {\n    const options: ValidationPipeOptions = {\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      exceptionFactory: (errors: ValidationError[]) => {\n        return this.exceptionService.createValidationException(errors);\n      },\n    };\n    super(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/pagination.decorator.ts\n            \n            interface\n            PaginationParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            PaginateParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            Pagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/product/dto/find-product.dto.ts\n            \n            class\n            FindProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/module/product/entities/product.entity.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/user/dto/find-user.dto.ts\n            \n            class\n            FindUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/module/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/entity/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.controller.ts\n            \n            class\n            BaseController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.repository.interface.ts\n            \n            interface\n            IBaseRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.service.ts\n            \n            injectable\n            BaseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/mongoose.repository.ts\n            \n            injectable\n            MongooseRepository\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConnection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/database/interfaces/database.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.config.ts\n            \n            injectable\n            MongoConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.connection.ts\n            \n            injectable\n            MongoConnection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/upload/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileStorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileUploadResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/upload/interfaces/upload.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validation/exception/exception.service.ts\n            \n            injectable\n            ExceptionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.interface.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.service.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^3.0.0\n        \n            @nestjs/common : ^10.4.15\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.0.4\n        \n            @types/multer : ^1.4.12\n        \n            body-parser : ^1.20.3\n        \n            cache-manager : ^6.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.5.1\n        \n            mongodb : ^6.13.0\n        \n            mongoose : ^8.10.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covExample :## Documentation \n$ npx @compodoc/compodoc -p tsconfig.jsonDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nTeamx-Group-Nest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DATABASE_CONNECTION   (src/.../database.interface.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../upload.interface.ts)\n                        \n                        \n                            PaginateParams   (src/.../pagination.decorator.ts)\n                        \n                        \n                            Pagination   (src/.../pagination.decorator.ts)\n                        \n                        \n                            ProductSchema   (src/.../product.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/database/interfaces/database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_CONNECTION'\n                    \n                \n\n\n        \n    \n\n    src/services/upload/interfaces/upload.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UPLOAD'\n                    \n                \n\n\n        \n    \n\n    src/decorator/Pagination/pagination.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginateParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Pagination\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/module/product/entities/product.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n    src/module/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
