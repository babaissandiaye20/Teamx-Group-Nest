var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.788,1,2.694]],["body/controllers/AppController.html",[0,2.987,1,4.5,2,2.613,3,0.265,4,0.231,5,0.231,6,4.143,7,0.488,8,1.486,9,5.717,10,1.902,11,0.022,12,0.706,13,4.854,14,1.213,15,1.048,16,0.55,17,0.909,18,4.402,19,4.854,20,0.265,21,0.073,22,2.284,23,2.145,24,1.356,25,4.854,26,0.017,27,0.017]],["title/modules/AppModule.html",[28,1.316,29,2.437]],["body/modules/AppModule.html",[2,1.873,3,0.19,4,0.166,5,0.166,11,0.022,16,0.633,17,0.652,20,0.19,21,0.052,26,0.014,27,0.014,28,2.023,29,4.923,30,1.637,31,1.637,32,1.873,33,1.873,34,1.637,35,2.946,36,1.873,37,2.969,38,2.969,39,2.969,40,3.701,41,4.007,42,3.701,43,4.007,44,4.007,45,3.701,46,3.439,47,2.577,48,1.873,49,1.748,50,3.478,51,3.002,52,3.478,53,2.969,54,5.031,55,2.382,56,2.633,57,1.873,58,3.478,59,3.478,60,3.478,61,3.478,62,3.478,63,3.478,64,3.478,65,3.478,66,3.478,67,1.748,68,3.478,69,2.633,70,1.215,71,2.633,72,3.478,73,2.015]],["title/injectables/AppService.html",[18,2.437,74,0.59]],["body/injectables/AppService.html",[3,0.276,4,0.24,5,0.24,7,0.508,8,1.521,9,5.792,11,0.021,12,0.734,14,1.261,15,1.073,16,0.466,17,0.945,18,4.168,20,0.276,21,0.076,24,1.409,26,0.018,27,0.018,74,1.008,75,1.761,76,4.304,77,5.043,78,5.043,79,5.043]],["title/classes/BaseController.html",[21,0.053,80,2.232]],["body/classes/BaseController.html",[0,1.036,3,0.113,4,0.098,5,0.098,7,0.208,8,0.813,10,2.068,11,0.022,12,0.804,14,1.319,15,1.102,16,0.459,17,0.386,20,0.113,21,0.031,22,0.971,23,0.911,24,1.475,26,0.01,27,0.01,70,2.327,80,2.039,81,0.808,82,1.76,83,2.018,84,1.633,85,2.461,86,1.884,87,1.884,88,2.496,89,0.808,90,2.062,91,3.058,92,2.062,93,1.631,94,1.373,95,0.751,96,1.233,97,1.11,98,3.058,99,2.062,100,1.53,101,2.062,102,4.386,103,3.251,104,2.774,105,3.016,106,3.251,107,2.226,108,2.062,109,1.75,110,2.064,111,1.036,112,3.251,113,1.76,114,3.897,115,2.062,116,4.13,117,2.774,118,3.434,119,2.062,120,0.911,121,0.911,122,1.633,123,1.561,124,1.76,125,1.76,126,2.511,127,3.046,128,2.774,129,2.062,130,1.195,131,1.76,132,3.117,133,3.046,134,3.456,135,2.062,136,1.195,137,1.561,138,3.456,139,2.062,140,1.036,141,2.458,142,2.062,143,2.062,144,3.897,145,2.062,146,2.461,147,1.561,148,1.561,149,2.226,150,1.561,151,4.182,152,4.182,153,4.24,154,3.046,155,0.857,156,1.036,157,1.76,158,2.062,159,1.11,160,1.76,161,2.062,162,4.505,163,1.884,164,3.615,165,1.76,166,2.062,167,1.76,168,1.76,169,2.062,170,1.561,171,2.062,172,1.561,173,1.76,174,2.062,175,1.76,176,1.76,177,2.062,178,2.062,179,2.062,180,2.062]],["title/classes/BaseEntity.html",[21,0.053,156,1.788]],["body/classes/BaseEntity.html",[3,0.202,4,0.177,5,0.177,7,0.373,10,2.371,11,0.022,12,0.881,16,0.523,20,0.202,21,0.056,26,0.015,27,0.015,57,1.994,81,1.452,95,0.823,105,2.674,120,2.498,126,1.847,155,1.54,156,2.51,181,3.162,182,1.649,183,5.653,184,5.653,185,4.825,186,5.653,187,4.996,188,4.58,189,3.782,190,4.996,191,3.705,192,6.765,193,2.273,194,3.705,195,3.422,196,3.705,197,4.996,198,4.996,199,4.264,200,3.705,201,3.422,202,3.705,203,4.996,204,3.705,205,3.705,206,4.58,207,3.134,208,4.782,209,4.996,210,2.804,211,1.861,212,1.637,213,2.804,214,4.996,215,3.705,216,2.804]],["title/injectables/BaseService.html",[74,0.59,91,2.062]],["body/injectables/BaseService.html",[3,0.112,4,0.097,5,0.097,7,0.206,8,0.807,11,0.022,12,0.801,14,1.314,15,1.1,16,0.509,17,0.383,20,0.112,21,0.031,23,1.768,24,1.469,26,0.009,27,0.009,70,2.324,74,0.535,75,0.714,83,1.427,84,1.622,86,1.871,87,1.871,88,1.622,89,1.265,91,1.871,93,1.626,94,1.229,95,0.749,96,1.229,97,1.738,98,3.047,102,1.283,107,1.4,109,1.101,110,2.06,111,1.622,118,1.745,120,0.903,121,0.903,122,1.027,126,2.11,130,1.871,136,1.871,140,1.622,141,2.447,144,1.745,156,1.027,157,1.745,159,1.101,160,1.745,193,1.837,199,2.756,211,1.027,213,1.548,216,1.548,217,1.745,218,2.025,219,1.548,220,2.447,221,2.289,222,2.036,223,2.045,224,2.025,225,2.045,226,2.851,227,2.045,228,2.025,229,2.045,230,2.045,231,2.045,232,2.045,233,2.045,234,1.548,235,1.548,236,3.029,237,3.299,238,1.469,239,2.475,240,2.045,241,2.045,242,3.299,243,3.299,244,3.485,245,4.488,246,3.047,247,3.602,248,3.299,249,3.602,250,2.045,251,2.045,252,4.001,253,3.415,254,4.544,255,5.259,256,2.831,257,4.544,258,3.879,259,3.879,260,2.045,261,2.045,262,2.045,263,2.045,264,1.4,265,2.045,266,2.045,267,2.045,268,1.745,269,1.745,270,2.444,271,2.045,272,2.045,273,3.229,274,2.211,275,3.229,276,2.045,277,2.045,278,2.045]],["title/injectables/CloudinaryService.html",[45,2.062,74,0.59]],["body/injectables/CloudinaryService.html",[3,0.156,4,0.136,5,0.234,7,0.494,8,1.041,11,0.022,12,0.786,14,1.041,15,1.056,16,0.454,17,0.535,20,0.156,21,0.043,24,1.603,26,0.012,27,0.012,45,2.412,70,2.092,74,0.69,75,0.998,89,1.925,93,1.23,94,0.929,95,0.566,96,0.929,100,2.7,110,1.782,120,2.17,121,2.17,126,1.056,182,1.374,193,1.885,237,1.792,238,0.798,239,1.344,242,1.792,243,3.386,244,2.412,246,1.655,247,1.957,249,2.851,256,1.538,264,1.957,270,3.152,274,1.957,279,2.438,280,3.081,281,4.606,282,3.364,283,3.364,284,4.163,285,2.163,286,3.47,287,4.339,288,2.857,289,2.851,290,4.606,291,4.606,292,2.163,293,2.857,294,4.163,295,2.857,296,3.553,297,2.241,298,1.655,299,2.438,300,1.655,301,2.857,302,2.857,303,2.857,304,2.857,305,2.857,306,2.857,307,2.857,308,2.857,309,2.857,310,2.857,311,2.857,312,2.438,313,4.192,314,2.857,315,2.857,316,2.857,317,2.857,318,2.857,319,2.857,320,2.857,321,2.857,322,4.163,323,2.857,324,1.792,325,2.857,326,2.857,327,2.438,328,2.857,329,2.857,330,2.163,331,2.438,332,2.857,333,2.857,334,1.957,335,2.857,336,2.857,337,2.438,338,2.438,339,2.438,340,2.438,341,2.438,342,2.857,343,2.857]],["title/classes/CreateProductDto.html",[21,0.053,344,2.232]],["body/classes/CreateProductDto.html",[3,0.175,4,0.152,5,0.152,7,0.322,10,2.227,11,0.022,12,0.827,15,1.097,16,0.417,20,0.175,21,0.068,26,0.013,27,0.013,67,2.628,81,1.253,94,1.168,95,0.846,96,1.008,105,2.511,155,1.329,182,1.49,188,3.959,193,1.576,195,2.19,208,4.301,324,2.831,344,2.831,345,5.115,346,2.19,347,3.281,348,3.582,349,3.582,350,2.42,351,4.513,352,3.604,353,4.26,354,4.095,355,4.513,356,4.513,357,3.197,358,3.582,359,3.197,360,3.091,361,3.852,362,3.852,363,3.902,364,2.729,365,3.197,366,3.059,367,3.852,368,4.513,369,4.85,370,3.565,371,4.513,372,3.197,373,3.852,374,4.513,375,4.513,376,3.852,377,3.197,378,3.091,379,4.464,380,4.85,381,2.19,382,4.513,383,3.197,384,1.606,385,3.416,386,3.852,387,3.197,388,3.197,389,4.513]],["title/classes/CreateUserDto.html",[21,0.053,390,2.232]],["body/classes/CreateUserDto.html",[3,0.209,4,0.182,5,0.182,7,0.385,10,2.251,11,0.021,12,0.836,15,1.158,16,0.472,20,0.209,21,0.077,26,0.015,27,0.015,67,2.886,81,1.498,95,0.781,105,2.538,155,1.59,182,1.685,188,4.348,193,2.294,208,4.639,354,4.121,360,3.495,363,4.121,364,4.903,378,4.198,380,5.231,384,1.921,390,3.202,391,5.231,392,2.619,393,4.348,394,4.348,395,4.348,396,4.356,397,6.569,398,5.104,399,3.824,400,4.356,401,5.104,402,5.104,403,3.824,404,5.104,405,3.824]],["title/interfaces/DatabaseConfig.html",[406,1.175,407,2.232]],["body/interfaces/DatabaseConfig.html",[3,0.275,4,0.239,5,0.239,7,0.506,8,1.518,11,0.021,12,0.731,14,1.256,20,0.357,26,0.018,27,0.018,110,2.005,238,1.404,406,2.005,407,3.809,408,2.525,409,3.442,410,5.131,411,5.025,412,2.912,413,3.804,414,3.804,415,3.051]],["title/interfaces/DatabaseConnection.html",[406,1.175,412,2.062]],["body/interfaces/DatabaseConnection.html",[3,0.266,4,0.232,5,0.232,7,0.49,8,1.489,11,0.021,12,0.867,14,1.489,20,0.352,26,0.018,27,0.018,110,2.214,238,1.361,406,1.967,407,3.055,408,2.447,409,3.336,410,3.687,412,3.452,413,5.076,414,5.076,415,2.994,416,4.871,417,4.871]],["title/modules/DatabaseModule.html",[28,1.316,40,2.062]],["body/modules/DatabaseModule.html",[3,0.226,4,0.197,5,0.197,11,0.022,16,0.621,17,0.775,20,0.226,21,0.062,26,0.016,27,0.016,28,2.207,30,1.946,31,1.946,32,2.226,33,2.226,34,1.946,35,3.213,36,3.213,40,4.059,47,2.893,48,2.226,49,2.078,51,2.594,53,4.586,55,2.832,415,2.999,418,3.529,419,3.529,420,3.529,421,4.492,422,3.89,423,4.135,424,4.135,425,4.135,426,3.68,427,4.135,428,2.832,429,2.594,430,3.529]],["title/injectables/DatabaseService.html",[74,0.59,421,2.232]],["body/injectables/DatabaseService.html",[3,0.237,4,0.207,5,0.207,7,0.436,8,1.385,11,0.022,12,0.889,14,1.385,16,0.512,17,0.812,20,0.237,21,0.065,26,0.016,27,0.016,70,2.375,73,2.513,74,0.918,75,1.515,89,2.171,93,1.281,94,0.968,95,0.59,96,0.968,239,2.607,280,2.72,300,2.513,412,3.728,415,2.179,421,3.476,428,2.97,431,3.701,432,6.799,433,6.799,434,4.337,435,4.337,436,5.541,437,4.337,438,4.337,439,4.337,440,4.337,441,4.337]],["title/injectables/ExceptionService.html",[74,0.59,221,1.479]],["body/injectables/ExceptionService.html",[3,0.154,4,0.134,5,0.134,7,0.283,8,1.029,11,0.022,12,0.895,14,1.488,15,1.213,16,0.45,17,0.527,20,0.154,21,0.062,22,1.323,23,1.242,24,1.593,26,0.012,27,0.012,74,0.682,75,0.982,89,1.102,93,1.817,94,1.373,95,0.837,96,1.373,100,2.682,159,2.884,193,0.982,221,1.711,222,1.981,238,1.664,244,1.629,246,1.629,280,3.053,370,1.764,384,1.413,442,2.4,443,4.115,444,4.115,445,4.115,446,4.115,447,4.115,448,4.115,449,2.812,450,2.812,451,4.115,452,4.115,453,2.812,454,2.812,455,2.129,456,4.115,457,2.812,458,3.053,459,6.435,460,4.115,461,2.812,462,4.115,463,2.812,464,4.115,465,5.25,466,2.812,467,2.818,468,4.115,469,2.812,470,2.812,471,2.812,472,2.129,473,2.129,474,2.129,475,2.129,476,1.926,477,2.129,478,2.129,479,2.129,480,2.4,481,2.4,482,5.356,483,2.812,484,2.812,485,2.812,486,5.356,487,2.812,488,2.812,489,2.812,490,2.812,491,2.812,492,2.812,493,2.812,494,2.812,495,2.812,496,2.812,497,2.812,498,2.812,499,2.812,500,2.812]],["title/interfaces/FileStorageService.html",[297,1.916,406,1.175]],["body/interfaces/FileStorageService.html",[3,0.235,4,0.205,5,0.29,7,0.432,8,1.377,11,0.021,12,0.802,14,1.377,15,1.231,20,0.332,26,0.016,27,0.016,93,1.627,94,1.23,95,0.749,96,1.23,110,2.117,126,1.589,238,1.201,282,4.164,283,4.164,285,3.253,286,3.93,287,4.645,289,3.773,292,3.253,297,2.965,298,2.49,324,2.696,406,1.819,408,2.159,415,2.159,501,2.943,502,4.297,503,3.773,504,4.297,505,3.253]],["title/interfaces/FileUploadResult.html",[298,2.062,406,1.175]],["body/interfaces/FileUploadResult.html",[3,0.257,4,0.224,5,0.278,7,0.472,11,0.021,15,1.253,20,0.346,26,0.017,27,0.017,95,0.792,110,1.923,126,2.448,182,1.923,238,1.311,282,3.215,283,3.215,286,3.374,287,3.989,289,3.215,297,2.527,298,3.374,324,4.153,406,1.923,408,2.359,415,2.359,501,3.215,505,3.553]],["title/classes/FindProductDto.html",[21,0.053,506,2.437]],["body/classes/FindProductDto.html",[3,0.205,4,0.178,5,0.178,7,0.377,10,2.227,11,0.021,12,0.827,15,0.887,16,0.465,20,0.205,21,0.076,26,0.015,27,0.015,81,1.467,94,1.269,95,0.773,96,1.457,105,2.511,155,1.556,182,1.661,193,1.757,346,2.564,348,3.892,349,3.892,350,4.302,353,3.446,354,4.096,358,4.162,360,3.446,361,3.195,366,3.271,367,4.294,369,5.186,370,3.156,373,4.294,376,4.294,378,3.446,379,4.85,381,2.564,384,1.881,385,4.6,386,4.294,506,3.446,507,5.186,508,5.572,509,5.572,510,3.744,511,3.744,512,5.031,513,5.031,514,3.744,515,3.744]],["title/classes/FindUserDto.html",[21,0.053,516,2.437]],["body/classes/FindUserDto.html",[3,0.178,4,0.155,5,0.155,7,0.328,10,2.366,11,0.021,12,0.879,15,1.104,16,0.423,20,0.178,21,0.069,26,0.013,27,0.013,81,1.279,95,0.821,96,1.509,105,2.668,155,1.357,182,1.512,193,1.599,248,2.872,350,4.571,354,4.239,358,4.288,360,3.136,366,3.087,378,3.927,381,2.235,384,1.64,385,4.739,392,2.235,393,4.004,394,4.004,395,4.004,396,3.908,400,3.908,508,5.343,509,5.601,516,3.136,517,5.343,518,3.318,519,4.033,520,3.263,521,3.263,522,3.263,523,3.263,524,3.263,525,3.263,526,4.578,527,4.578,528,3.263,529,3.263,530,4.578,531,3.136,532,2.653,533,3.263,534,3.263,535,5.289,536,3.263,537,3.263,538,3.263,539,2.47,540,4.578,541,2.47]],["title/interfaces/IBaseRepository.html",[220,1.916,406,1.175]],["body/interfaces/IBaseRepository.html",[3,0.201,4,0.175,5,0.175,7,0.37,8,1.242,11,0.021,12,0.945,14,1.623,15,1.24,16,0.34,20,0.201,26,0.015,27,0.015,83,2.196,84,2.497,88,2.497,93,1.918,94,1.45,95,0.883,96,1.45,98,3.763,102,3.784,110,2.322,111,2.497,122,1.847,126,2.23,132,3.118,140,2.497,211,1.847,218,3.118,220,2.676,226,3.784,228,3.118,406,1.214,408,1.847,503,2.518,542,3.137,543,4.242,544,4.97,545,3.676,546,4.242,547,3.676,548,3.676,549,3.676,550,4.242,551,3.676,552,3.676]],["title/injectables/MongoConfig.html",[74,0.59,422,2.062]],["body/injectables/MongoConfig.html",[3,0.244,4,0.212,5,0.212,7,0.449,8,1.41,11,0.022,12,0.821,14,1.114,16,0.572,17,0.835,20,0.244,21,0.067,22,2.098,24,1.246,26,0.017,27,0.017,54,5.845,55,3.054,71,5.075,74,0.934,75,1.557,89,1.747,93,1.317,94,0.995,95,0.606,96,0.995,238,1.246,300,2.583,407,3.538,410,4.92,422,3.267,428,3.054,553,3.805,554,4.459,555,4.459,556,4.459,557,4.459,558,4.459]],["title/injectables/MongoConnection.html",[74,0.59,426,2.437]],["body/injectables/MongoConnection.html",[3,0.214,4,0.186,5,0.186,7,0.393,8,1.294,11,0.022,12,0.845,14,1.294,16,0.571,17,0.732,20,0.214,21,0.059,22,1.839,26,0.015,27,0.015,70,2.309,71,2.958,74,0.858,75,1.365,89,1.531,93,1.154,94,0.872,95,0.531,96,0.872,110,2.041,189,4.396,193,1.808,211,2.602,237,2.452,238,1.092,239,2.436,242,2.452,243,3.643,244,2.264,300,2.264,412,3,413,4.68,414,4.68,422,3.582,426,3.546,428,2.677,559,3.335,560,3.908,561,3.908,562,5.178,563,3.908,564,3.908,565,3.908,566,3.908,567,3.908,568,3.908,569,3.546,570,3.908,571,3.908,572,3.908,573,3.908]],["title/injectables/MongooseRepository.html",[74,0.59,574,2.232]],["body/injectables/MongooseRepository.html",[3,0.156,4,0.136,5,0.136,7,0.288,8,1.041,11,0.022,12,0.9,14,1.497,15,1.186,16,0.499,17,0.535,20,0.156,21,0.043,22,1.344,23,1.262,24,1.673,26,0.012,27,0.012,67,2.468,70,2.45,74,0.69,75,0.998,83,1.84,84,2.092,88,2.092,89,1.12,93,1.826,94,1.38,95,0.841,96,1.38,97,2.241,98,3.47,100,2.311,107,1.957,109,1.538,110,2.22,111,2.092,120,1.262,121,1.262,122,2.092,126,1.996,132,2.612,140,2.092,141,2.906,156,1.436,185,3.553,201,1.957,211,1.436,218,2.612,220,2.241,226,3.386,228,2.612,238,1.163,239,1.344,270,3.152,300,1.655,543,3.553,546,3.553,550,3.553,574,2.612,575,2.438,576,2.857,577,4.533,578,2.857,579,2.857,580,2.857,581,2.857,582,2.857,583,2.857,584,2.857,585,2.163,586,2.438,587,2.857,588,2.857,589,2.857,590,2.857,591,4.912,592,2.857,593,2.857,594,2.857,595,2.857]],["title/classes/PaginationDto.html",[21,0.053,596,2.694]],["body/classes/PaginationDto.html",[3,0.259,4,0.226,5,0.226,7,0.477,10,2.296,11,0.021,12,0.853,15,1.171,16,0.438,20,0.259,21,0.088,26,0.017,27,0.017,81,1.858,95,0.797,96,1.483,182,1.935,358,4.356,384,2.382,518,3.99,519,3.99,596,4.436,597,4.046,598,5.86,599,4.741,600,4.741,601,6.36]],["title/interfaces/PaginationParams.html",[406,1.175,602,2.437]],["body/interfaces/PaginationParams.html",[3,0.149,4,0.13,5,0.13,7,0.275,11,0.022,15,0.482,16,0.252,17,0.512,20,0.22,24,1.574,26,0.012,27,0.012,70,0.954,95,0.548,163,2.334,164,1.87,182,1.33,193,1.845,195,1.87,210,2.067,216,2.067,222,1.01,238,1.881,239,1.285,248,3.924,256,1.47,264,1.87,330,3.049,334,1.87,352,1.582,366,3.173,406,0.902,408,1.372,458,1.713,518,4.075,519,3.924,531,3.618,532,3.264,539,3.998,541,3.049,569,1.87,602,3.277,603,2.067,604,3.438,605,3.438,606,2.731,607,4.028,608,2.731,609,3.622,610,3.438,611,2.731,612,3.049,613,2.067,614,1.713,615,2.331,616,3.438,617,2.331,618,2.331,619,2.331,620,2.331,621,2.331,622,2.731,623,2.731,624,2.731,625,2.731,626,2.067,627,2.331,628,3.438,629,2.331,630,2.331,631,3.438,632,2.067,633,3.438,634,2.331,635,2.331,636,2.331,637,2.331,638,2.331,639,2.331,640,2.331,641,2.331,642,2.331,643,2.331,644,2.331,645,2.331,646,4.084,647,2.331,648,2.331,649,3.438,650,4.084,651,2.331,652,2.331,653,2.331,654,2.331,655,2.331,656,2.331,657,2.331,658,2.331,659,2.331,660,2.331,661,3.438,662,2.331,663,2.331,664,2.331,665,2.331,666,3.438,667,2.331,668,3.438,669,2.331,670,3.438,671,3.438,672,2.331,673,2.331,674,2.331,675,2.331,676,2.331,677,2.331,678,2.331,679,2.067,680,2.331,681,2.067,682,2.331]],["title/classes/Product.html",[21,0.053,683,2.062]],["body/classes/Product.html",[3,0.22,4,0.192,5,0.192,7,0.406,10,2.452,11,0.022,12,0.911,15,1.103,16,0.488,20,0.289,21,0.061,26,0.016,27,0.016,57,2.169,67,3.35,81,1.579,94,1.316,95,0.851,156,2.655,182,1.744,206,5.046,207,3.314,212,1.781,238,1.126,347,3.698,348,4.037,349,4.037,363,3.698,366,3.368,370,3.925,381,4.285,586,3.439,683,3.061,684,3.05,685,4.03,686,5.031,687,4.03,688,4.03,689,4.03,690,3.439,691,2.76,692,3.439]],["title/controllers/ProductController.html",[0,1.788,693,2.437]],["body/controllers/ProductController.html",[0,0.996,2,1.067,3,0.108,4,0.094,5,0.277,7,0.199,8,0.787,10,2.033,11,0.022,12,0.755,14,1.297,15,1.051,16,0.562,17,0.371,20,0.108,21,0.03,22,0.933,23,0.876,24,1.095,26,0.009,27,0.009,70,2.249,80,3.541,83,1.732,84,1.583,85,2.385,86,1.825,87,1.825,88,1.97,93,1.532,94,1.403,95,0.912,96,1.158,97,1.067,102,3.413,105,2.57,109,2.11,110,1.294,111,0.996,113,1.692,114,1.692,116,3.338,117,2.689,122,1.583,123,1.5,124,1.692,125,1.692,126,2.15,127,2.967,128,1.692,130,1.148,131,1.692,132,1.976,133,2.385,134,2.385,136,1.148,137,1.5,138,2.385,140,0.996,141,2.404,146,2.385,147,1.5,148,1.5,149,2.685,150,1.5,151,2.385,152,2.385,154,2.385,155,0.824,162,1.692,163,2.271,164,1.357,170,1.5,172,1.5,173,1.692,201,4.082,212,1.392,256,2.404,264,2.157,274,2.157,286,3.006,344,3.413,347,1.976,348,2.157,349,2.157,353,2.157,363,3.739,366,2.404,503,2.157,506,3.059,518,1.976,519,1.976,532,1.825,614,2.459,683,1.148,693,2.157,694,1.692,695,1.692,696,1.692,697,1.982,698,1.982,699,3.15,700,3.15,701,3.15,702,3.553,703,1.982,704,1.982,705,3.15,706,3.15,707,3.15,708,1.982,709,3.92,710,1.982,711,1.982,712,1.982,713,3.059,714,1.982,715,1.982,716,1.982,717,1.982,718,1.692,719,1.982,720,1.982,721,3.92,722,1.982,723,1.692,724,1.692,725,1.692,726,1.982,727,4.428,728,1.692,729,1.5,730,2.271,731,1.692,732,1.692,733,3.346,734,1.692,735,1.692,736,1.692,737,1.982,738,1.5,739,1.5,740,1.982,741,1.982,742,1.982,743,1.982,744,1.692,745,3.92,746,3.15,747,3.15,748,3.15,749,1.982,750,1.982,751,1.692]],["title/modules/ProductModule.html",[28,1.316,41,2.232]],["body/modules/ProductModule.html",[2,2.513,3,0.183,4,0.16,5,0.16,11,0.022,16,0.64,17,0.629,20,0.183,21,0.05,24,0.937,26,0.014,27,0.014,28,2.146,30,1.579,31,1.579,32,1.806,33,1.806,34,1.579,35,2.89,36,2.89,41,4.378,42,3.66,47,2.513,48,1.806,49,1.686,51,2.929,56,2.54,57,2.513,69,2.54,73,1.944,94,0.749,100,1.579,207,2.105,211,1.686,221,2.626,222,2.336,224,2.929,238,0.937,429,2.105,574,2.105,577,4.064,683,1.944,691,3.197,693,3.677,729,2.54,730,4.014,731,2.864,738,2.54,739,2.54,752,2.864,753,3.355,754,2.864,755,2.864,756,3.355,757,3.355,758,3.355,759,2.864,760,2.864,761,2.864,762,2.864,763,3.355,764,3.355,765,2.864,766,3.355,767,3.355,768,3.355,769,2.864,770,3.355,771,2.864,772,3.355]],["title/injectables/ProductService.html",[74,0.59,730,2.062]],["body/injectables/ProductService.html",[3,0.125,4,0.109,5,0.301,7,0.231,8,0.882,11,0.022,12,0.885,14,1.482,15,1.114,16,0.531,17,0.429,20,0.125,21,0.034,23,1.901,24,0.986,26,0.01,27,0.01,46,2.317,70,2.37,73,1.328,74,0.585,75,0.8,83,1.559,84,1.773,86,2.045,87,2.045,88,1.773,89,1.383,91,3.525,93,1.797,94,1.358,95,0.827,96,1.358,97,1.234,98,3.599,109,2.317,110,1.82,111,1.151,120,1.013,121,1.013,122,1.151,126,2.039,130,1.328,136,1.328,140,1.151,141,2.968,193,1.232,212,1.559,213,1.735,218,2.214,219,1.735,220,2.602,221,2.465,222,2.193,224,2.214,226,2.214,228,1.438,234,1.735,235,1.735,236,2.671,237,2.214,238,0.986,239,1.66,242,2.214,243,2.214,244,2.045,245,3.012,246,2.045,247,2.417,248,2.214,249,2.417,256,1.9,268,1.956,269,1.956,280,1.438,286,3.194,297,2.602,347,2.214,352,2.045,353,2.417,503,2.417,585,1.735,614,2.214,683,1.328,696,3.012,702,3.776,729,1.735,730,2.045,773,1.956,774,4.303,775,4.303,776,2.292,777,2.292,778,2.292,779,2.292,780,2.292,781,1.956,782,1.956,783,1.956,784,1.956,785,1.956,786,1.956,787,1.956,788,2.292,789,2.292,790,2.292,791,1.956,792,3.529,793,3.529,794,2.292,795,3.529,796,2.292,797,2.292,798,2.292]],["title/interfaces/Response.html",[159,1.916,406,1.175]],["body/interfaces/Response.html",[3,0.242,4,0.211,5,0.211,7,0.446,11,0.021,15,1.275,20,0.242,26,0.017,27,0.017,95,0.93,96,1.526,159,3.024,163,3.757,182,1.854,366,3.32,406,1.463,408,2.226,458,4.068,467,4.441,799,3.782,800,5.535,801,5.535,802,5.535,803,5.264]],["title/injectables/ResponseService.html",[74,0.59,222,1.316]],["body/injectables/ResponseService.html",[3,0.144,4,0.125,5,0.125,7,0.265,8,0.979,11,0.022,12,0.846,14,1.453,15,1.199,16,0.362,17,0.493,20,0.144,21,0.04,24,1.624,26,0.012,27,0.012,74,0.649,75,0.919,93,1.827,94,1.298,95,0.86,96,1.298,100,2.736,104,2.245,107,2.683,116,1.801,120,2.569,121,2.569,159,3.599,163,3.005,193,0.919,222,1.448,246,2.27,253,2.245,256,2.109,258,3.343,259,3.343,274,2.683,334,1.801,352,2.712,455,1.991,458,4.349,467,2.683,531,1.801,569,2.683,609,1.991,612,2.965,679,2.965,681,2.965,801,4.962,802,4.962,803,5.281,804,2.245,805,3.917,806,3.917,807,3.917,808,3.917,809,3.917,810,2.63,811,3.917,812,3.917,813,2.63,814,5.186,815,3.917,816,3.917,817,2.63,818,3.917,819,3.917,820,3.917,821,2.63,822,3.917,823,3.917,824,3.917,825,2.63,826,3.917,827,2.63,828,2.63,829,5.813,830,2.63,831,2.63,832,2.63,833,2.63,834,2.63,835,2.63,836,2.63,837,2.63,838,2.63]],["title/classes/UpdateProductDto.html",[21,0.053,713,2.437]],["body/classes/UpdateProductDto.html",[3,0.285,4,0.248,5,0.248,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.041,83,2.302,155,2.166,212,2.741,344,3.268,346,3.568,713,4.249,733,4.446,839,4.446,840,6.205,841,4.446]],["title/classes/UpdateUserDto.html",[21,0.053,842,2.437]],["body/classes/UpdateUserDto.html",[3,0.285,4,0.248,5,0.248,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.041,83,2.302,155,2.166,212,2.741,390,3.268,392,3.568,841,4.446,842,4.249,843,4.446,844,6.205,845,4.446]],["title/modules/UploadModule.html",[28,1.316,42,2.062]],["body/modules/UploadModule.html",[3,0.248,4,0.216,5,0.216,11,0.022,16,0.576,17,0.849,20,0.248,21,0.068,26,0.017,27,0.017,28,2.304,30,2.131,31,2.131,32,2.439,33,2.439,34,2.131,35,3.066,36,3.354,42,3.903,45,3.3,46,3.834,47,3.066,48,2.439,49,2.276,429,2.842,430,3.866,846,3.866,847,3.866,848,4.53,849,4.53,850,4.53,851,4.53,852,4.53]],["title/injectables/UploadService.html",[46,1.916,74,0.59]],["body/injectables/UploadService.html",[3,0.132,4,0.116,5,0.212,7,0.244,8,0.921,11,0.022,12,0.879,14,1.338,15,1.191,16,0.495,17,0.454,20,0.132,21,0.036,24,1.496,26,0.011,27,0.011,46,1.983,67,1.218,70,2.16,74,0.61,75,0.847,89,1.746,93,1.581,94,1.195,95,0.767,96,1.195,100,2.097,110,1.861,120,1.969,121,1.969,126,0.896,182,1.216,193,1.287,237,2.311,238,1.637,239,2.342,242,2.311,243,3.122,244,2.582,246,1.405,247,1.66,249,2.523,280,4.076,281,4.248,282,3.052,283,3.052,285,1.835,286,3.583,287,4.235,289,2.523,290,4.248,291,4.248,292,1.835,297,1.983,298,1.405,299,2.069,300,1.405,312,2.069,313,2.069,324,1.521,327,2.069,331,2.069,337,2.069,338,2.069,339,2.069,340,2.069,341,2.069,347,1.521,352,1.405,455,1.835,472,1.835,473,1.835,474,1.835,475,1.835,476,1.66,477,1.835,478,1.835,479,1.835,480,2.069,481,2.069,800,3.144,853,2.069,854,4.456,855,3.684,856,3.684,857,3.684,858,3.684,859,3.684,860,2.424,861,3.684,862,2.424,863,2.424,864,3.684,865,2.424,866,2.424,867,2.424,868,3.684,869,2.424,870,2.424,871,2.424,872,3.684,873,2.424,874,2.424,875,2.424,876,4.456,877,2.424,878,2.424,879,2.424,880,2.424,881,2.424,882,2.424,883,2.424,884,2.424,885,2.424,886,4.456,887,2.424,888,2.424,889,2.424,890,2.424,891,2.424,892,3.684,893,2.424,894,2.424,895,2.424]],["title/classes/User.html",[21,0.053,896,2.062]],["body/classes/User.html",[3,0.232,4,0.202,5,0.202,7,0.427,10,2.369,11,0.022,12,0.88,15,1.192,16,0.505,20,0.299,21,0.064,26,0.016,27,0.016,57,2.286,67,3.456,81,1.664,95,0.822,156,2.746,182,1.805,206,4.832,207,3.429,212,1.876,238,1.186,363,3.792,393,4.576,394,4.576,395,4.576,686,5.159,690,3.624,896,3.167,897,3.214,898,4.246,899,4.246,900,4.246,901,4.246,902,4.246,903,2.908,904,3.624]],["title/controllers/UserController.html",[0,1.788,905,2.437]],["body/controllers/UserController.html",[0,1.286,2,1.378,3,0.14,4,0.122,5,0.122,7,0.258,8,0.959,10,2.255,11,0.022,12,0.838,14,1.438,15,1.145,16,0.58,17,0.479,20,0.14,21,0.038,22,1.204,23,1.131,24,1.531,26,0.011,27,0.011,70,2.397,80,3.85,83,1.696,84,1.928,85,2.905,86,2.224,87,2.224,88,1.928,93,1.7,94,1.285,95,0.783,96,1.285,97,1.378,102,2.408,105,1.696,109,2.479,110,0.845,111,1.286,116,1.753,122,2.571,123,1.937,126,2.27,127,1.937,130,1.483,132,2.408,133,1.937,134,1.937,136,1.483,137,1.937,138,2.905,140,1.286,141,2.754,146,3.486,147,1.937,148,1.937,149,2.629,150,1.937,151,1.937,152,1.937,153,2.184,154,1.937,155,1.064,165,2.184,167,3.276,168,2.184,170,1.937,172,2.905,175,3.276,176,2.184,212,1.696,390,3.209,472,1.937,473,1.937,474,1.937,475,1.937,476,1.753,477,1.937,478,1.937,479,1.937,516,3.504,532,2.224,614,3.438,695,2.184,702,3.941,718,2.184,725,2.184,727,2.184,728,2.184,732,2.184,734,2.184,735,2.184,736,2.184,744,2.184,751,2.184,842,3.504,845,3.93,896,2.224,905,2.629,906,2.184,907,3.838,908,2.559,909,2.559,910,2.559,911,2.559,912,2.559,913,1.937,914,2.668,915,2.184,916,2.559,917,2.559,918,2.559,919,2.559,920,2.559,921,2.559,922,2.559,923,2.559,924,2.559,925,2.559,926,2.559]],["title/modules/UserModule.html",[28,1.316,43,2.232]],["body/modules/UserModule.html",[2,2.643,3,0.197,4,0.172,5,0.172,11,0.022,16,0.637,17,0.676,20,0.197,21,0.054,24,1.009,26,0.014,27,0.014,28,2.063,30,1.699,31,1.699,32,1.944,33,1.944,34,1.699,35,3.004,36,3.004,43,4.365,47,2.643,48,1.944,49,1.814,51,2.265,56,2.733,57,2.643,69,2.733,73,2.092,94,0.806,100,1.699,207,2.265,211,1.814,221,2.686,222,2.389,429,2.265,574,2.265,577,4.223,759,3.082,760,3.082,761,3.082,762,3.082,765,3.082,771,3.082,896,2.092,903,3.363,905,3.821,913,2.733,914,4.063,915,3.082,927,3.082,928,3.082,929,3.082,930,3.611,931,3.611,932,3.611,933,3.611,934,3.611,935,3.611]],["title/injectables/UserService.html",[74,0.59,914,2.062]],["body/injectables/UserService.html",[3,0.168,4,0.147,5,0.147,7,0.31,8,1.098,11,0.022,12,0.92,14,1.536,15,1.14,16,0.568,17,0.577,20,0.168,21,0.046,23,1.942,26,0.013,27,0.013,70,2.383,73,1.784,74,0.728,75,1.076,83,1.942,84,2.208,86,2.546,87,2.546,88,2.208,89,1.722,91,3.813,93,1.867,94,1.412,95,0.86,96,1.412,97,1.658,98,3.238,109,1.658,110,2.028,111,1.547,120,1.361,121,1.361,122,1.547,126,2.066,130,1.784,136,1.784,140,1.547,141,2.366,212,1.942,218,2.757,219,2.331,220,3.008,221,2.688,222,2.391,224,2.757,226,2.757,228,1.932,234,2.331,235,2.331,236,3.327,585,2.331,702,4.208,781,2.628,782,2.628,783,2.628,784,2.628,785,2.628,786,2.628,787,2.628,791,2.628,896,1.784,913,2.331,914,2.546,936,2.628,937,3.08,938,3.08]],["title/modules/ValidationModule.html",[28,1.316,44,2.232]],["body/modules/ValidationModule.html",[3,0.207,4,0.18,5,0.18,11,0.022,16,0.605,17,0.709,20,0.207,21,0.057,26,0.015,27,0.015,28,2.113,30,1.78,31,1.78,32,2.037,33,2.037,34,1.78,35,3.076,36,3.076,40,3.794,44,4.503,47,2.728,48,2.037,49,1.901,51,3.179,221,2.937,222,2.612,429,2.373,939,3.229,940,3.783,941,3.229,942,3.229,943,4.459,944,3.783,945,5.067,946,3.229,947,3.783,948,3.229,949,3.783,950,3.783,951,3.783]],["title/injectables/ValidationService.html",[74,0.59,943,2.232]],["body/injectables/ValidationService.html",[3,0.231,4,0.202,5,0.202,11,0.022,12,0.616,16,0.589,17,1.022,20,0.231,21,0.082,22,1.992,23,1.871,24,1.183,26,0.016,27,0.016,67,3.204,74,0.904,75,1.479,89,1.659,93,1.25,94,0.945,95,0.576,96,0.945,121,1.871,201,3.736,212,2.411,221,2.809,238,1.183,384,2.127,465,5.152,467,2.899,626,3.205,943,3.422,948,3.613,952,3.613,953,6.037,954,4.233,955,4.233,956,5.456,957,4.233,958,4.233,959,4.233,960,4.233,961,4.233,962,4.233,963,4.233,964,4.233,965,4.233]],["title/coverage.html",[966,3.68]],["body/coverage.html",[0,2.44,1,2.12,5,0.133,6,2.391,11,0.022,18,1.918,21,0.099,26,0.012,27,0.012,34,1.318,45,1.623,46,1.508,74,1.121,76,2.391,80,1.757,82,2.391,91,1.623,95,0.381,100,1.318,156,1.407,159,1.508,181,2.391,217,2.391,220,1.508,221,1.164,222,1.036,279,2.391,297,1.508,298,1.623,344,1.757,345,2.391,346,3.326,370,4.616,390,1.757,391,2.391,392,3.326,406,2.028,407,1.757,409,3.326,412,1.623,415,2.062,421,1.757,422,1.623,426,1.918,431,2.391,442,2.391,501,3.326,506,1.918,507,2.391,516,1.918,517,2.391,532,1.623,542,2.391,553,2.391,559,2.391,574,1.757,575,2.391,596,2.12,597,2.391,602,1.918,603,3.676,613,2.12,632,2.12,683,1.623,684,3.106,691,1.918,693,1.918,694,2.391,713,1.918,730,1.623,773,2.391,799,2.391,804,2.391,839,2.391,842,1.918,843,2.391,853,2.391,896,1.623,897,3.106,903,1.918,905,1.918,906,2.391,914,1.623,936,2.391,943,1.757,952,2.391,966,2.12,967,2.391,968,2.801,969,2.801,970,5.346,971,5.947,972,5.947,973,6.428,974,2.391,975,5.346,976,5.691,977,5.691,978,2.801,979,2.801,980,5.691,981,2.801,982,2.801,983,2.801]],["title/dependencies.html",[31,2.015,984,2.534]],["body/dependencies.html",[11,0.022,17,0.846,21,0.085,26,0.017,27,0.017,31,2.125,55,3.092,57,2.431,149,3.092,155,1.877,189,3.418,210,3.418,211,2.269,296,3.854,384,2.269,723,3.854,724,4.851,738,3.418,739,4.303,769,3.854,946,3.854,985,4.515,986,4.515,987,4.515,988,5.684,989,4.515,990,4.515,991,4.515,992,4.515,993,4.515,994,4.515,995,4.515,996,4.515,997,4.515,998,4.515,999,4.515,1000,4.515,1001,4.515,1002,4.515,1003,4.515,1004,4.515,1005,4.515,1006,4.515,1007,4.515,1008,4.515,1009,4.515,1010,4.515,1011,4.515]],["title/miscellaneous/functions.html",[1012,2.034,1013,3.654]],["body/miscellaneous/functions.html",[7,0.561,11,0.019,26,0.019,27,0.019,34,3.208,974,4.759,1012,3.819,1013,4.759,1014,5.576]],["title/index.html",[7,0.299,1015,2.969,1016,2.969]],["body/index.html",[4,0.138,11,0.021,26,0.012,27,0.012,49,3.026,105,1.283,224,1.822,354,3.412,476,1.989,966,2.198,967,3.595,1017,2.904,1018,2.904,1019,4.958,1020,4.213,1021,2.904,1022,2.904,1023,2.904,1024,2.904,1025,4.213,1026,5.438,1027,2.904,1028,5.438,1029,2.904,1030,6.364,1031,2.904,1032,6.213,1033,2.904,1034,2.904,1035,2.904,1036,4.213,1037,2.904,1038,4.213,1039,2.904,1040,4.958,1041,2.904,1042,4.213,1043,2.904,1044,2.904,1045,2.904,1046,2.904,1047,2.904,1048,5.438,1049,6.364,1050,6.022,1051,2.904,1052,4.213,1053,2.904,1054,2.904,1055,2.904,1056,2.904,1057,2.904,1058,6.022,1059,4.213,1060,5.438,1061,2.904,1062,4.213,1063,2.904,1064,2.904,1065,4.213,1066,6.022,1067,5.438,1068,2.904,1069,4.213,1070,2.904,1071,2.904,1072,2.904,1073,2.904,1074,5.438,1075,2.904,1076,2.904,1077,2.904,1078,2.904,1079,4.213,1080,2.904,1081,2.904,1082,2.904,1083,2.904,1084,2.904,1085,4.213,1086,2.904,1087,2.904,1088,2.904,1089,4.213,1090,2.904,1091,2.904,1092,4.642,1093,4.213,1094,2.904,1095,2.904,1096,2.904,1097,2.904,1098,2.904,1099,2.904,1100,2.904,1101,2.904,1102,4.213,1103,2.904,1104,2.904,1105,2.904,1106,2.904,1107,4.958,1108,2.904,1109,2.904,1110,2.904,1111,2.904,1112,2.904,1113,2.904,1114,4.213,1115,2.904,1116,2.904,1117,2.904,1118,2.904,1119,2.904,1120,4.213,1121,2.904,1122,2.904,1123,2.904,1124,4.213,1125,4.213,1126,2.904,1127,2.904,1128,2.904,1129,2.904,1130,2.904,1131,2.904,1132,2.904,1133,2.904,1134,2.904,1135,2.904,1136,2.904,1137,2.478,1138,2.904,1139,2.904,1140,2.904,1141,2.904,1142,2.904,1143,2.904,1144,2.478,1145,2.904,1146,2.904]],["title/modules.html",[30,2.288]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.504,30,2.407,40,2.964,41,3.209,42,2.964,43,3.209,44,3.209,1092,6.043,1147,7.081,1148,7.081,1149,7.081]],["title/overview.html",[1150,4.149]],["body/overview.html",[2,1.749,11,0.022,26,0.013,27,0.013,28,1.201,29,4.841,30,1.528,31,1.528,32,1.749,33,1.749,34,1.528,35,1.749,36,1.749,37,2.772,38,2.772,39,2.772,40,3.86,41,4.321,42,3.493,43,4.235,44,4.385,45,3.057,46,3.457,47,2.457,48,1.749,49,1.632,75,1.135,81,1.273,221,2.77,222,2.463,362,2.772,408,1.632,418,2.772,419,2.772,420,2.772,421,4.028,422,3.057,730,3.721,752,2.772,754,2.772,755,2.772,846,2.772,847,2.772,914,3.721,927,2.772,928,2.772,929,2.772,939,2.772,941,2.772,942,2.772,943,4.028,1150,2.772,1151,3.248,1152,3.248,1153,3.248,1154,3.248]],["title/properties.html",[182,1.413,984,2.534]],["body/properties.html",[11,0.021,26,0.019,27,0.019,105,2.435,182,1.82,1137,4.704,1144,4.704,1155,5.512,1156,5.512,1157,5.512]],["title/miscellaneous/variables.html",[1012,2.034,1158,3.654]],["body/miscellaneous/variables.html",[7,0.286,11,0.022,15,0.864,24,1.6,26,0.012,27,0.012,70,0.994,95,0.565,120,2.642,121,2.642,163,2.405,164,1.949,193,1.45,195,1.949,222,1.052,238,1.857,239,1.339,248,3.593,256,1.532,330,3.142,334,1.949,352,1.649,409,1.949,415,2.878,458,1.785,501,1.949,505,2.154,518,3.752,519,3.379,531,1.949,532,2.839,539,4.078,541,3.142,569,1.949,602,1.949,603,2.154,604,2.429,605,2.429,609,2.154,610,2.429,612,2.154,613,3.142,614,1.785,615,2.429,616,3.543,617,2.429,618,2.429,619,2.429,620,2.429,621,2.429,626,2.154,627,2.429,628,3.543,629,2.429,630,2.429,631,3.543,632,2.154,633,3.543,634,2.429,635,2.429,636,2.429,637,2.429,638,2.429,639,2.429,640,2.429,641,2.429,642,2.429,643,2.429,644,2.429,645,2.429,646,4.183,647,2.429,648,2.429,649,3.543,650,4.183,651,2.429,652,2.429,653,2.429,654,2.429,655,2.429,656,2.429,657,2.429,658,2.429,659,2.429,660,2.429,661,3.543,662,2.429,663,2.429,664,2.429,665,2.429,666,3.543,667,2.429,668,3.543,669,2.429,670,3.543,671,3.543,672,2.429,673,2.429,674,2.429,675,2.429,676,2.429,677,2.429,678,2.429,679,2.154,680,2.429,681,2.154,682,2.429,684,2.154,691,2.843,692,2.429,897,2.154,903,2.843,904,2.429,1012,1.949,1158,2.429,1159,2.846,1160,2.846,1161,4.151,1162,2.846,1163,2.846]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":370,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1156,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["0})@isnumber()@isoptional()@min(0",{"_index":513,"title":{},"body":{"classes/FindProductDto.html":{}}}],["1",{"_index":539,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["1.20.3",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":541,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["10000",{"_index":368,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["10})@isint()@min(1)@isoptional",{"_index":528,"title":{},"body":{"classes/FindUserDto.html":{}}}],["11",{"_index":1153,"title":{},"body":{"overview.html":{}}}],["11.0.1",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["11.0.4",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":362,"title":{},"body":{"classes/CreateProductDto.html":{},"overview.html":{}}}],["1})@isint()@min(1)@isoptional",{"_index":533,"title":{},"body":{"classes/FindUserDto.html":{}}}],["2.1.0",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["2.5.1",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":116,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{}}}],["201",{"_index":104,"title":{},"body":{"classes/BaseController.html":{},"injectables/ResponseService.html":{}}}],["3",{"_index":1152,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":836,"title":{},"body":{"injectables/ResponseService.html":{}}}],["403",{"_index":837,"title":{},"body":{"injectables/ResponseService.html":{}}}],["404",{"_index":253,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["5.0.1",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":376,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["500",{"_index":838,"title":{},"body":{"injectables/ResponseService.html":{}}}],["6",{"_index":1151,"title":{},"body":{"overview.html":{}}}],["6.13.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1154,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["8.10.1",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["999.99",{"_index":512,"title":{},"body":{"classes/FindProductDto.html":{}}}],["_id",{"_index":183,"title":{},"body":{"classes/BaseEntity.html":{}}}],["abstract",{"_index":161,"title":{},"body":{"classes/BaseController.html":{}}}],["accès",{"_index":818,"title":{},"body":{"injectables/ResponseService.html":{}}}],["address",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["adresse",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["ajout",{"_index":830,"title":{},"body":{"injectables/ResponseService.html":{}}}],["allowing",{"_index":1080,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1130,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":304,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":306,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":154,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":726,"title":{},"body":{"controllers/ProductController.html":{}}}],["apiconsumes('multipart/form",{"_index":747,"title":{},"body":{"controllers/ProductController.html":{}}}],["apioperation",{"_index":151,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":153,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":188,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":385,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apipropertyoptional({description",{"_index":350,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apiquery",{"_index":727,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse",{"_index":152,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":704,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags",{"_index":725,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('products",{"_index":741,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('users",{"_index":917,"title":{},"body":{"controllers/UserController.html":{}}}],["app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["app_pipe",{"_index":945,"title":{},"body":{"modules/ValidationModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["application",{"_index":1050,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1025,"title":{},"body":{"index.html":{}}}],["appliquer",{"_index":622,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["arg",{"_index":636,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg.page",{"_index":637,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg0",{"_index":454,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["args",{"_index":633,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["args.find((arg",{"_index":635,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(serviceresponse.data",{"_index":664,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":1137,"title":{},"body":{"index.html":{},"properties.html":{}}}],["avec",{"_index":256,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":239,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1069,"title":{},"body":{"index.html":{}}}],["baba",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["backers",{"_index":1131,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":805,"title":{},"body":{"injectables/ResponseService.html":{}}}],["badrequest(errors",{"_index":809,"title":{},"body":{"injectables/ResponseService.html":{}}}],["base.repository.interface",{"_index":233,"title":{},"body":{"injectables/BaseService.html":{}}}],["base.service",{"_index":158,"title":{},"body":{"classes/BaseController.html":{}}}],["basecontroller",{"_index":80,"title":{"classes/BaseController.html":{}},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["basecontroller:31",{"_index":716,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:38",{"_index":909,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:44",{"_index":910,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:47",{"_index":703,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:49",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:55",{"_index":912,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:58",{"_index":717,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:60",{"_index":911,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:61",{"_index":715,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:66",{"_index":718,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["basecontroller:88",{"_index":712,"title":{},"body":{"controllers/ProductController.html":{}}}],["based",{"_index":1064,"title":{},"body":{"index.html":{}}}],["basedir",{"_index":854,"title":{},"body":{"injectables/UploadService.html":{}}}],["baseentity",{"_index":156,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"classes/User.html":{},"coverage.html":{}}}],["baseservice",{"_index":91,"title":{"injectables/BaseService.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["baseservice:17",{"_index":781,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:28",{"_index":783,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:44",{"_index":782,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:55",{"_index":786,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:71",{"_index":784,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:87",{"_index":785,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["batch",{"_index":341,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["binary",{"_index":387,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["binary'})@validateif(o",{"_index":357,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["board",{"_index":1123,"title":{},"body":{"index.html":{}}}],["body",{"_index":149,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["boolean",{"_index":197,"title":{},"body":{"classes/BaseEntity.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1149,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1147,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1020,"title":{},"body":{"index.html":{}}}],["cache",{"_index":769,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":737,"title":{},"body":{"controllers/ProductController.html":{}}}],["cachemodule",{"_index":764,"title":{},"body":{"modules/ProductModule.html":{}}}],["cachemodule.register",{"_index":767,"title":{},"body":{"modules/ProductModule.html":{}}}],["calcul",{"_index":665,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["cas",{"_index":659,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":242,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ce",{"_index":657,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["chambres",{"_index":291,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["channel",{"_index":1095,"title":{},"body":{"index.html":{}}}],["check",{"_index":1058,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":81,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clicks",{"_index":1079,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1063,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":302,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":296,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{}}}],["cloudinary.config",{"_index":301,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":311,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.service",{"_index":849,"title":{},"body":{"modules/UploadModule.html":{}}}],["cloudinaryservice",{"_index":45,"title":{"injectables/CloudinaryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CloudinaryService.html":{},"modules/UploadModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":752,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_exports",{"_index":754,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":753,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":755,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":846,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":847,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":927,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":929,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":928,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_validationmodule",{"_index":939,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_exports",{"_index":941,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_imports",{"_index":940,"title":{},"body":{"modules/ValidationModule.html":{}}}],["cluster_validationmodule_providers",{"_index":942,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["come",{"_index":1086,"title":{},"body":{"index.html":{}}}],["config",{"_index":562,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{}}}],["configservice.get('mongodb_uri",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":413,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["connection",{"_index":436,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["connexion",{"_index":571,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["conserver",{"_index":660,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["console.error('erreur",{"_index":570,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('connexion",{"_index":568,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('creating",{"_index":922,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('déconnexion",{"_index":573,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('finding",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('mongodb",{"_index":558,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["console.log('productcontroller",{"_index":743,"title":{},"body":{"controllers/ProductController.html":{}}}],["console.log('usercontroller",{"_index":919,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":238,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["constructor(baseservice",{"_index":90,"title":{},"body":{"classes/BaseController.html":{}}}],["constructor(config",{"_index":560,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["constructor(configservice",{"_index":554,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["constructor(connection",{"_index":434,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(exceptionservice",{"_index":954,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(httpresponseservice",{"_index":449,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["constructor(model",{"_index":576,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor(repository",{"_index":219,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["contenu",{"_index":335,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('products",{"_index":740,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('users",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["courses",{"_index":1101,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":966,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":83,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":165,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["create(createdto",{"_index":97,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(entity",{"_index":544,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["createbadrequestexception",{"_index":443,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createbadrequestexception(arg0",{"_index":452,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["created",{"_index":107,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"injectables/ResponseService.html":{}}}],["created(data",{"_index":812,"title":{},"body":{"injectables/ResponseService.html":{}}}],["created.save",{"_index":588,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["createdat",{"_index":184,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdto",{"_index":109,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdto.image",{"_index":794,"title":{},"body":{"injectables/ProductService.html":{}}}],["createforbiddenexception",{"_index":444,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createforbiddenexception(message",{"_index":456,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception",{"_index":445,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception(message",{"_index":460,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception",{"_index":446,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception(message",{"_index":462,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createparamdecorator",{"_index":604,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["createproductdto",{"_index":344,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":390,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createvalidationexception",{"_index":447,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createvalidationexception(errors",{"_index":464,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createwithimage",{"_index":774,"title":{},"body":{"injectables/ProductService.html":{}}}],["createwithimage(createdto",{"_index":777,"title":{},"body":{"injectables/ProductService.html":{}}}],["crypto",{"_index":872,"title":{},"body":{"injectables/UploadService.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":883,"title":{},"body":{"injectables/UploadService.html":{}}}],["création",{"_index":213,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["création'})@prop({default",{"_index":194,"title":{},"body":{"classes/BaseEntity.html":{}}}],["créer",{"_index":699,"title":{},"body":{"controllers/ProductController.html":{}}}],["créée",{"_index":815,"title":{},"body":{"injectables/ResponseService.html":{}}}],["ctx",{"_index":615,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":617,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d''upload",{"_index":701,"title":{},"body":{"controllers/ProductController.html":{}}}],["d'origine",{"_index":662,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d'upload",{"_index":318,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["d'éléments",{"_index":527,"title":{},"body":{"classes/FindUserDto.html":{}}}],["data",{"_index":163,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":698,"title":{},"body":{"controllers/ProductController.html":{}}}],["data'})@apiresponse({status",{"_index":103,"title":{},"body":{"classes/BaseController.html":{}}}],["database.service",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database_connection",{"_index":415,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":407,"title":{"interfaces/DatabaseConfig.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{},"coverage.html":{}}}],["databaseconnection",{"_index":412,"title":{"interfaces/DatabaseConnection.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["databasemodule",{"_index":40,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":421,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/BaseEntity.html":{}}}],["date().toisostring",{"_index":829,"title":{},"body":{"injectables/ResponseService.html":{}}}],["date.now",{"_index":214,"title":{},"body":{"classes/BaseEntity.html":{}}}],["de",{"_index":193,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":1097,"title":{},"body":{"index.html":{}}}],["default",{"_index":120,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["delete",{"_index":132,"title":{},"body":{"classes/BaseController.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":175,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":131,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["delete(':id/soft",{"_index":178,"title":{},"body":{"classes/BaseController.html":{}}}],["delete(':id/soft')@apioperation({summary",{"_index":137,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":546,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["deleted",{"_index":134,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1048,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1068,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1059,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1078,"title":{},"body":{"index.html":{}}}],["depuis",{"_index":611,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["dernière",{"_index":203,"title":{},"body":{"classes/BaseEntity.html":{}}}],["des",{"_index":264,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{}}}],["description",{"_index":105,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":628,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["descriptor.value",{"_index":631,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1033,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1109,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":876,"title":{},"body":{"injectables/UploadService.html":{}}}],["disable",{"_index":473,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["disconnect",{"_index":414,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["discord",{"_index":1094,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1096,"title":{},"body":{"index.html":{}}}],["document",{"_index":209,"title":{},"body":{"classes/BaseEntity.html":{}}}],["documentation",{"_index":967,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":537,"title":{},"body":{"classes/FindUserDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":524,"title":{},"body":{"classes/FindUserDto.html":{}}}],["données",{"_index":835,"title":{},"body":{"injectables/ResponseService.html":{}}}],["dto/create",{"_index":732,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/find",{"_index":735,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/update",{"_index":734,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["du",{"_index":352,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["décorateur",{"_index":607,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["définition",{"_index":606,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["e2e",{"_index":1043,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1021,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1056,"title":{},"body":{"index.html":{}}}],["en",{"_index":374,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["enableimplicitconversion",{"_index":962,"title":{},"body":{"injectables/ValidationService.html":{}}}],["ensure",{"_index":1054,"title":{},"body":{"index.html":{}}}],["ensuredirectory",{"_index":855,"title":{},"body":{"injectables/UploadService.html":{}}}],["ensuredirectory(folder",{"_index":859,"title":{},"body":{"injectables/UploadService.html":{}}}],["enterprise",{"_index":1113,"title":{},"body":{"index.html":{}}}],["entit",{"_index":255,"title":{},"body":{"injectables/BaseService.html":{}}}],["entities",{"_index":118,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entities'})@apiresponse({status",{"_index":115,"title":{},"body":{"classes/BaseController.html":{}}}],["entities/product.entity",{"_index":729,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["entities/user.entity",{"_index":913,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":102,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity'})@apibody({description",{"_index":101,"title":{},"body":{"classes/BaseController.html":{}}}],["entity'})@apiparam({name",{"_index":133,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity/base.entity",{"_index":157,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entités",{"_index":265,"title":{},"body":{"injectables/BaseService.html":{}}}],["erreur",{"_index":246,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["error",{"_index":243,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error(\"résultat",{"_index":317,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error('method",{"_index":480,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["error(`échec",{"_index":342,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error.children",{"_index":498,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.children.length",{"_index":499,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.constraints",{"_index":495,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.message",{"_index":249,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error.status",{"_index":252,"title":{},"body":{"injectables/BaseService.html":{}}}],["errors",{"_index":467,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/ValidationService.html":{}}}],["errors.foreach((error",{"_index":494,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["eslint",{"_index":472,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["eslint/no",{"_index":477,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["est",{"_index":653,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["et",{"_index":652,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":354,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"index.html":{}}}],["exception/exception.service",{"_index":948,"title":{},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exception/response/response.service",{"_index":950,"title":{},"body":{"modules/ValidationModule.html":{}}}],["exceptionfactory",{"_index":963,"title":{},"body":{"injectables/ValidationService.html":{}}}],["exceptionservice",{"_index":221,"title":{"injectables/ExceptionService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["exec",{"_index":591,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["executioncontext",{"_index":605,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["existe",{"_index":651,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":1099,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["express",{"_index":724,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":286,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":880,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":212,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["extraire",{"_index":608,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["exécuter",{"_index":640,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":201,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ValidationService.html":{}}}],["fast",{"_index":1072,"title":{},"body":{"index.html":{}}}],["features",{"_index":1082,"title":{},"body":{"index.html":{}}}],["few",{"_index":1074,"title":{},"body":{"index.html":{}}}],["fichier",{"_index":331,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":891,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.buffer?.length",{"_index":329,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["fileinterceptor",{"_index":722,"title":{},"body":{"controllers/ProductController.html":{}}}],["filename",{"_index":886,"title":{},"body":{"injectables/UploadService.html":{}}}],["filepath",{"_index":888,"title":{},"body":{"injectables/UploadService.html":{}}}],["files",{"_index":289,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["files.foreach((file",{"_index":328,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["files.map((file",{"_index":338,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["files?.length",{"_index":327,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["filestorageservice",{"_index":297,"title":{"interfaces/FileStorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileuploadresult",{"_index":298,"title":{"interfaces/FileUploadResult.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["filter",{"_index":122,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":226,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["filtrer",{"_index":508,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["find",{"_index":114,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["findall",{"_index":84,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@query",{"_index":170,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findall(filter",{"_index":111,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":218,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":228,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyidandupdate(id",{"_index":595,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["findone",{"_index":85,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":168,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":123,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findproductdto",{"_index":506,"title":{"classes/FindProductDto.html":{}},"body":{"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["finduserdto",{"_index":516,"title":{"classes/FindUserDto.html":{}},"body":{"classes/FindUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["firstname",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["focus",{"_index":1081,"title":{},"body":{"index.html":{}}}],["folder",{"_index":287,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["follow",{"_index":1117,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":806,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidden(message",{"_index":816,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidnonwhitelisted",{"_index":960,"title":{},"body":{"injectables/ValidationService.html":{}}}],["format",{"_index":356,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["formaterrors",{"_index":448,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formaterrors(errors",{"_index":468,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["found",{"_index":128,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["framework",{"_index":1019,"title":{},"body":{"index.html":{}}}],["fs",{"_index":870,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.mkdir(dirpath",{"_index":878,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.writefile(filepath",{"_index":890,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":871,"title":{},"body":{"injectables/UploadService.html":{}}}],["full",{"_index":1112,"title":{},"body":{"index.html":{}}}],["function",{"_index":632,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1013,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1077,"title":{},"body":{"index.html":{}}}],["generatefilename",{"_index":856,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(originalname",{"_index":861,"title":{},"body":{"injectables/UploadService.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":124,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["get()@apioperation({summary",{"_index":113,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["getconnectionconfig",{"_index":410,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmodeltoken",{"_index":760,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["getmodeltoken(product.name",{"_index":772,"title":{},"body":{"modules/ProductModule.html":{}}}],["getmodeltoken(user.name",{"_index":935,"title":{},"body":{"modules/UserModule.html":{}}}],["getting",{"_index":1015,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1104,"title":{},"body":{"index.html":{}}}],["group",{"_index":1146,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1127,"title":{},"body":{"index.html":{}}}],["hands",{"_index":1098,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1087,"title":{},"body":{"index.html":{}}}],["hash",{"_index":882,"title":{},"body":{"injectables/UploadService.html":{}}}],["hash}${ext",{"_index":884,"title":{},"body":{"injectables/UploadService.html":{}}}],["hello",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1102,"title":{},"body":{"index.html":{}}}],["here",{"_index":1135,"title":{},"body":{"index.html":{}}}],["hotel",{"_index":290,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["httpexception",{"_index":459,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpexception(response",{"_index":486,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpresponseservice",{"_index":451,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["https://example.com/iphone13.jpg",{"_index":355,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["https://nestjs.com",{"_index":1141,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":470,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.bad_request",{"_index":487,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.forbidden",{"_index":489,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.internal_server_error",{"_index":493,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.not_found",{"_index":491,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["ibaserepository",{"_index":220,"title":{"interfaces/IBaseRepository.html":{}},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id",{"_index":126,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@apibody({description",{"_index":143,"title":{},"body":{"classes/BaseController.html":{}}}],["id'})@apiparam({name",{"_index":125,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["id'})@apiresponse({status",{"_index":127,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["identifier",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":347,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["images",{"_index":343,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["implemented",{"_index":481,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["implements",{"_index":300,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/UploadService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicateur",{"_index":198,"title":{},"body":{"classes/BaseEntity.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["information",{"_index":1061,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1084,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":702,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["initialized",{"_index":744,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["inject",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/DatabaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject('product_repository",{"_index":789,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('uploadservice",{"_index":790,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('user_repository",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(database_connection",{"_index":439,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"overview.html":{}}}],["install",{"_index":1076,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1031,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1105,"title":{},"body":{"index.html":{}}}],["interdit",{"_index":819,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interface",{"_index":406,"title":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"coverage.html":{}}}],["interfaces",{"_index":408,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/database.interface",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["interfaces/upload.interface",{"_index":299,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["internalerror",{"_index":807,"title":{},"body":{"injectables/ResponseService.html":{}}}],["internalerror(message",{"_index":820,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interne",{"_index":822,"title":{},"body":{"injectables/ResponseService.html":{}}}],["invalide",{"_index":811,"title":{},"body":{"injectables/ResponseService.html":{}}}],["iphone",{"_index":361,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["iphone'})@isstring()@isoptional",{"_index":510,"title":{},"body":{"classes/FindProductDto.html":{}}}],["isdeleted",{"_index":185,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{}}}],["isglobal",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":535,"title":{},"body":{"classes/FindUserDto.html":{}}}],["isnotempty",{"_index":380,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":379,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["isnumberstring",{"_index":601,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional",{"_index":358,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{}}}],["isoptional()@isnumberstring",{"_index":598,"title":{},"body":{"classes/PaginationDto.html":{}}}],["issa",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":378,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["isurl",{"_index":382,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["items",{"_index":663,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.length",{"_index":667,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.slice(startindex",{"_index":672,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["job",{"_index":1120,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1122,"title":{},"body":{"index.html":{}}}],["john",{"_index":536,"title":{},"body":{"classes/FindUserDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":522,"title":{},"body":{"classes/FindUserDto.html":{}}}],["join",{"_index":1133,"title":{},"body":{"index.html":{}}}],["jour",{"_index":269,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["json.stringify(error",{"_index":314,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["kamil",{"_index":1138,"title":{},"body":{"index.html":{}}}],["key",{"_index":1051,"title":{},"body":{"index.html":{}}}],["l'enregistrement",{"_index":895,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'id",{"_index":257,"title":{},"body":{"injectables/BaseService.html":{}}}],["l'image",{"_index":351,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["l'index",{"_index":332,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["l'upload",{"_index":313,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["l'utilisateur",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["la",{"_index":248,"title":{},"body":{"injectables/BaseService.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["lastpage",{"_index":668,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["le",{"_index":330,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["learn",{"_index":1090,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["les",{"_index":609,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1144,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1125,"title":{},"body":{"index.html":{}}}],["limit",{"_index":518,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":475,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["linkedin",{"_index":1119,"title":{},"body":{"index.html":{}}}],["list",{"_index":117,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["liste",{"_index":705,"title":{},"body":{"controllers/ProductController.html":{}}}],["local",{"_index":852,"title":{},"body":{"modules/UploadModule.html":{}}}],["logger",{"_index":281,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["logger(cloudinaryservice.name",{"_index":294,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["logger(uploadservice.name",{"_index":868,"title":{},"body":{"injectables/UploadService.html":{}}}],["logique",{"_index":216,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/PaginationParams.html":{}}}],["logique'})@prop({default",{"_index":200,"title":{},"body":{"classes/BaseEntity.html":{}}}],["logiquement",{"_index":278,"title":{},"body":{"injectables/BaseService.html":{}}}],["looking",{"_index":1062,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1115,"title":{},"body":{"index.html":{}}}],["lors",{"_index":247,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["makes",{"_index":1070,"title":{},"body":{"index.html":{}}}],["manager",{"_index":739,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["managing",{"_index":1083,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":669,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1066,"title":{},"body":{"index.html":{}}}],["message",{"_index":458,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":482,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(...this.formaterrors(error.children",{"_index":500,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(message",{"_index":497,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["meta",{"_index":682,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":381,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/Product.html":{}}}],["min(0",{"_index":386,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["min(1",{"_index":540,"title":{},"body":{"classes/FindUserDto.html":{}}}],["minimum",{"_index":369,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["miscellaneous",{"_index":1012,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mise",{"_index":268,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["mit",{"_index":1124,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1036,"title":{},"body":{"index.html":{}}}],["model",{"_index":577,"title":{},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modification",{"_index":215,"title":{},"body":{"classes/BaseEntity.html":{}}}],["modification'})@prop({default",{"_index":204,"title":{},"body":{"classes/BaseEntity.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["module/product/product.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module.ts",{"_index":931,"title":{},"body":{"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo.config",{"_index":565,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoconfig",{"_index":422,"title":{"injectables/MongoConfig.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"coverage.html":{},"overview.html":{}}}],["mongoconnection",{"_index":426,"title":{"injectables/MongoConnection.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["mongodb",{"_index":189,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongoConnection.html":{},"dependencies.html":{}}}],["mongodb/mongo.config",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongodb/mongo.connection",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoose",{"_index":211,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["mongoose.connect(uri",{"_index":567,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoose.disconnect",{"_index":572,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoosemodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":765,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooserepository",{"_index":574,"title":{"injectables/MongooseRepository.html":{}},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["mongooserepository(model",{"_index":771,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["more",{"_index":1060,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1139,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":641,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["méthodes",{"_index":831,"title":{},"body":{"injectables/ResponseService.html":{}}}],["même",{"_index":676,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["n'a",{"_index":333,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["n'est",{"_index":658,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":94,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ndiaye",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ne",{"_index":833,"title":{},"body":{"injectables/ResponseService.html":{}}}],["need",{"_index":1110,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1026,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1143,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1049,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":738,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":946,"title":{},"body":{"modules/ValidationModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":723,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":155,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":100,"title":{},"body":{"classes/BaseController.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["next",{"_index":474,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["node.js",{"_index":1018,"title":{},"body":{"index.html":{}}}],["nom",{"_index":360,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["nombre",{"_index":526,"title":{},"body":{"classes/FindUserDto.html":{}}}],["non",{"_index":258,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["notfound",{"_index":808,"title":{},"body":{"injectables/ResponseService.html":{}}}],["notfound(message",{"_index":824,"title":{},"body":{"injectables/ResponseService.html":{}}}],["npm",{"_index":1030,"title":{},"body":{"index.html":{}}}],["number",{"_index":366,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{}}}],["number(request.query.limit",{"_index":621,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number(request.query.page",{"_index":619,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number})@apiquery({name",{"_index":709,"title":{},"body":{"controllers/ProductController.html":{}}}],["number})@get",{"_index":711,"title":{},"body":{"controllers/ProductController.html":{}}}],["numéro",{"_index":530,"title":{},"body":{"classes/FindUserDto.html":{}}}],["o.image",{"_index":389,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["object",{"_index":112,"title":{},"body":{"classes/BaseController.html":{}}}],["object.values(error.constraints).foreach((message",{"_index":496,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["obtenir",{"_index":643,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["offer",{"_index":1121,"title":{},"body":{"index.html":{}}}],["official",{"_index":1067,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":432,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["onmoduleinit",{"_index":433,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["open",{"_index":1126,"title":{},"body":{"index.html":{}}}],["option",{"_index":700,"title":{},"body":{"controllers/ProductController.html":{}}}],["optional",{"_index":96,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["options",{"_index":957,"title":{},"body":{"injectables/ValidationService.html":{}}}],["opération",{"_index":681,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["originale",{"_index":642,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod",{"_index":630,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod.apply(this",{"_index":647,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":863,"title":{},"body":{"injectables/UploadService.html":{}}}],["ouakam",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1150,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":984,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":519,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["paginateditems",{"_index":671,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paginateparams",{"_index":613,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":532,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":596,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["paginationparams",{"_index":602,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginée",{"_index":675,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["par",{"_index":509,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["param",{"_index":148,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":173,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["paramètres",{"_index":610,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paris",{"_index":538,"title":{},"body":{"classes/FindUserDto.html":{}}}],["paris'})@isstring()@isoptional",{"_index":520,"title":{},"body":{"classes/FindUserDto.html":{}}}],["parser",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":1111,"title":{},"body":{"index.html":{}}}],["partial",{"_index":98,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":841,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":840,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":844,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":334,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":800,"title":{},"body":{"interfaces/Response.html":{},"injectables/UploadService.html":{}}}],["path.extname(originalname",{"_index":881,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(dirpath",{"_index":889,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(folder",{"_index":893,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(this.basedir",{"_index":877,"title":{},"body":{"injectables/UploadService.html":{}}}],["platform",{"_index":1065,"title":{},"body":{"index.html":{}}}],["please",{"_index":1093,"title":{},"body":{"index.html":{}}}],["possible",{"_index":1057,"title":{},"body":{"index.html":{}}}],["post",{"_index":146,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":99,"title":{},"body":{"classes/BaseController.html":{}}}],["post()@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":697,"title":{},"body":{"controllers/ProductController.html":{}}}],["pour",{"_index":531,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":695,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":348,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["private",{"_index":280,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["prix",{"_index":367,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["process.env.cloudinary_api_key",{"_index":305,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":307,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":303,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.storage_service",{"_index":851,"title":{},"body":{"modules/UploadModule.html":{}}}],["process.env.upload_dir",{"_index":874,"title":{},"body":{"injectables/UploadService.html":{}}}],["product",{"_index":683,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.controller",{"_index":758,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":733,"title":{},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":346,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:12",{"_index":511,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:20",{"_index":365,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:22",{"_index":514,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:31",{"_index":372,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:32",{"_index":515,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:42",{"_index":377,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:53",{"_index":359,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.name",{"_index":766,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.service",{"_index":731,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/product.controller.ts",{"_index":719,"title":{},"body":{"controllers/ProductController.html":{}}}],["product/product.module.ts",{"_index":757,"title":{},"body":{"modules/ProductModule.html":{}}}],["product_repository",{"_index":770,"title":{},"body":{"modules/ProductModule.html":{}}}],["productcontroller",{"_index":693,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["production",{"_index":1038,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":41,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["products",{"_index":696,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["productschema",{"_index":691,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":730,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productservice).createwithimage",{"_index":749,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice).updatewithimage",{"_index":750,"title":{},"body":{"controllers/ProductController.html":{}}}],["produit",{"_index":353,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["produits",{"_index":706,"title":{},"body":{"controllers/ProductController.html":{}}}],["progressive",{"_index":1017,"title":{},"body":{"index.html":{}}}],["project",{"_index":1028,"title":{},"body":{"index.html":{}}}],["promise",{"_index":110,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":308,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":337,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["prop",{"_index":206,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["prop({required",{"_index":686,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["properties",{"_index":182,"title":{"properties.html":{}},"body":{"classes/BaseEntity.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"interfaces/Response.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":629,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["propertykey",{"_index":627,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["protected",{"_index":236,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":429,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["prénom",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["put",{"_index":147,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":172,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id')@apioperation({summary",{"_index":142,"title":{},"body":{"classes/BaseController.html":{}}}],["put(':id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":714,"title":{},"body":{"controllers/ProductController.html":{}}}],["quantit",{"_index":373,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["quantity",{"_index":349,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["que",{"_index":649,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":150,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["questions",{"_index":1091,"title":{},"body":{"index.html":{}}}],["qui",{"_index":832,"title":{},"body":{"injectables/ResponseService.html":{}}}],["read",{"_index":1134,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ready",{"_index":1047,"title":{},"body":{"index.html":{}}}],["real",{"_index":1106,"title":{},"body":{"index.html":{}}}],["recherche",{"_index":260,"title":{},"body":{"injectables/BaseService.html":{}}}],["recursive",{"_index":879,"title":{},"body":{"injectables/UploadService.html":{}}}],["reflect",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":768,"title":{},"body":{"modules/ProductModule.html":{}}}],["reject",{"_index":309,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":315,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(new",{"_index":316,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["relativepath",{"_index":892,"title":{},"body":{"injectables/UploadService.html":{}}}],["remove",{"_index":86,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":176,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":130,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/BaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":616,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.limit",{"_index":620,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.page",{"_index":618,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.limit",{"_index":639,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.page",{"_index":638,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":363,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{}}}],["requiring",{"_index":1073,"title":{},"body":{"index.html":{}}}],["requête",{"_index":612,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["resolve",{"_index":323,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resources",{"_index":1085,"title":{},"body":{"index.html":{}}}],["response",{"_index":159,"title":{"interfaces/Response.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["response.interface",{"_index":828,"title":{},"body":{"injectables/ResponseService.html":{}}}],["response/response.service",{"_index":471,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["responseservice",{"_index":222,"title":{"injectables/ResponseService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ressource",{"_index":814,"title":{},"body":{"injectables/ResponseService.html":{}}}],["result",{"_index":270,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{}}}],["result.public_id",{"_index":322,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":325,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retournent",{"_index":834,"title":{},"body":{"injectables/ResponseService.html":{}}}],["retourner",{"_index":673,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["retournés",{"_index":625,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":1032,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1055,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["récupération",{"_index":263,"title":{},"body":{"injectables/BaseService.html":{}}}],["récupérer",{"_index":634,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["récupérée",{"_index":707,"title":{},"body":{"controllers/ProductController.html":{}}}],["réponse",{"_index":674,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultat",{"_index":644,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultats",{"_index":624,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["réussie",{"_index":569,"title":{},"body":{"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":1022,"title":{},"body":{"index.html":{}}}],["schema",{"_index":207,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":690,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(product",{"_index":692,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":904,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":1023,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":823,"title":{},"body":{"injectables/ResponseService.html":{}}}],["service",{"_index":645,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse",{"_index":646,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.data",{"_index":650,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.message",{"_index":680,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.status",{"_index":678,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["services/base/entity/base.entity",{"_index":901,"title":{},"body":{"classes/User.html":{}}}],["services/base/methode/mongoose.repository",{"_index":759,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["services/database/database.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/cloudinary/cloudinary.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.service",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1029,"title":{},"body":{"index.html":{}}}],["si",{"_index":656,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":1024,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1075,"title":{},"body":{"index.html":{}}}],["soft",{"_index":138,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["softdelete",{"_index":543,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdelete(id",{"_index":550,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdeleted",{"_index":275,"title":{},"body":{"injectables/BaseService.html":{}}}],["softremove",{"_index":87,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["softremove(@param('id",{"_index":179,"title":{},"body":{"classes/BaseController.html":{}}}],["softremove(id",{"_index":136,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"index.html":{}}}],["sponsors",{"_index":1129,"title":{},"body":{"index.html":{}}}],["src/.../database.interface.ts",{"_index":1159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.decorator.ts",{"_index":1161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../product.entity.ts",{"_index":1162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload.interface.ts",{"_index":1160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts",{"_index":597,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:10",{"_index":599,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:6",{"_index":600,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/pagination.decorator",{"_index":736,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/decorator/pagination/pagination.decorator.ts",{"_index":603,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":974,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/product/dto/create",{"_index":345,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/find",{"_index":507,"title":{},"body":{"classes/FindProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/update",{"_index":839,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/module/product/entities/product.entity.ts",{"_index":684,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/product/entities/product.entity.ts:11",{"_index":688,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:14",{"_index":689,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:17",{"_index":685,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:8",{"_index":687,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/product.controller.ts",{"_index":694,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/module/product/product.module.ts",{"_index":756,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/module/product/product.service.ts",{"_index":773,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/module/product/product.service.ts:11",{"_index":776,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:23",{"_index":778,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:43",{"_index":780,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/user/dto/create",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/find",{"_index":517,"title":{},"body":{"classes/FindUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/update",{"_index":843,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/module/user/entities/user.entity.ts",{"_index":897,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/user/entities/user.entity.ts:11",{"_index":900,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:14",{"_index":898,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:8",{"_index":899,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/user.controller.ts",{"_index":906,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.module.ts",{"_index":930,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service.ts",{"_index":936,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:10",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/base/entity/base.entity",{"_index":586,"title":{},"body":{"injectables/MongooseRepository.html":{},"classes/Product.html":{}}}],["src/services/base/entity/base.entity.ts",{"_index":181,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/services/base/entity/base.entity.ts:12",{"_index":196,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:16",{"_index":205,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:20",{"_index":202,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:8",{"_index":191,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/methode/base.controller",{"_index":728,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/services/base/methode/base.controller.ts",{"_index":82,"title":{},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["src/services/base/methode/base.controller.ts:16",{"_index":92,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:23",{"_index":108,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:31",{"_index":129,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:38",{"_index":119,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:47",{"_index":145,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:58",{"_index":135,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:66",{"_index":139,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.repository.interface",{"_index":585,"title":{},"body":{"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.repository.interface.ts",{"_index":542,"title":{},"body":{"interfaces/IBaseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/base.repository.interface.ts:10",{"_index":551,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:5",{"_index":545,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:6",{"_index":549,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:7",{"_index":548,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:8",{"_index":552,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:9",{"_index":547,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.service",{"_index":787,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.service.ts",{"_index":217,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/services/base/methode/base.service.ts:10",{"_index":223,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:17",{"_index":225,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:28",{"_index":229,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:44",{"_index":227,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:55",{"_index":232,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:71",{"_index":230,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:87",{"_index":231,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/mongoose.repository.ts",{"_index":575,"title":{},"body":{"injectables/MongooseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/mongoose.repository.ts:10",{"_index":578,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:13",{"_index":579,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:18",{"_index":582,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:22",{"_index":581,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:26",{"_index":584,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:30",{"_index":580,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:35",{"_index":583,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/database/database.module",{"_index":949,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/services/database/database.module.ts",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/services/database/database.service.ts",{"_index":431,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/services/database/database.service.ts:13",{"_index":435,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:18",{"_index":438,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:22",{"_index":437,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/interfaces/database.interface.ts",{"_index":409,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/database/interfaces/database.interface.ts:2",{"_index":411,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["src/services/database/interfaces/database.interface.ts:6",{"_index":416,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/interfaces/database.interface.ts:7",{"_index":417,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/mongodb/mongo.config.ts",{"_index":553,"title":{},"body":{"injectables/MongoConfig.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.config.ts:5",{"_index":555,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.config.ts:8",{"_index":556,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.connection.ts",{"_index":559,"title":{},"body":{"injectables/MongoConnection.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:11",{"_index":563,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:22",{"_index":564,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:8",{"_index":561,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts",{"_index":279,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:11",{"_index":284,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:21",{"_index":293,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:50",{"_index":288,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/interfaces/upload.interface",{"_index":788,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts",{"_index":501,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:12",{"_index":502,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:8",{"_index":504,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/upload.module",{"_index":763,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/services/upload/upload.module.ts",{"_index":848,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/services/upload/upload.service.ts",{"_index":853,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/services/upload/upload.service.ts:12",{"_index":865,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:15",{"_index":869,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:16",{"_index":858,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:22",{"_index":860,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:28",{"_index":862,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:34",{"_index":867,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:58",{"_index":866,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/validation/exception/exception.service",{"_index":234,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/exception.service.ts",{"_index":442,"title":{},"body":{"injectables/ExceptionService.html":{},"coverage.html":{}}}],["src/validation/exception/exception.service.ts:11",{"_index":450,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:14",{"_index":466,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:23",{"_index":457,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:28",{"_index":463,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:33",{"_index":461,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:38",{"_index":469,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:9",{"_index":453,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/response/response.interface",{"_index":160,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["src/validation/exception/response/response.interface.ts",{"_index":799,"title":{},"body":{"interfaces/Response.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service",{"_index":235,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/response/response.service.ts",{"_index":804,"title":{},"body":{"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts:15",{"_index":813,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:25",{"_index":810,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:34",{"_index":817,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:42",{"_index":825,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:50",{"_index":821,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:6",{"_index":827,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/validation.module.ts",{"_index":944,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/validation/validation.service.ts",{"_index":952,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{}}}],["src/validation/validation.service.ts:7",{"_index":955,"title":{},"body":{"injectables/ValidationService.html":{}}}],["start",{"_index":1034,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1037,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1039,"title":{},"body":{"index.html":{}}}],["started",{"_index":1016,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1027,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":670,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":164,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":801,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["stay",{"_index":1114,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1052,"title":{},"body":{"index.html":{}}}],["stock",{"_index":375,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["straightforward",{"_index":1071,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string})@apiquery({name",{"_index":710,"title":{},"body":{"controllers/ProductController.html":{}}}],["structure",{"_index":661,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":679,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["success(data",{"_index":826,"title":{},"body":{"injectables/ResponseService.html":{}}}],["successfully",{"_index":106,"title":{},"body":{"classes/BaseController.html":{}}}],["succès",{"_index":274,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{}}}],["summary",{"_index":162,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["super(options",{"_index":965,"title":{},"body":{"injectables/ValidationService.html":{}}}],["super(productservice",{"_index":742,"title":{},"body":{"controllers/ProductController.html":{}}}],["super(repository",{"_index":791,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["super(userservice",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["super.create(createdto",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["super.findall(filter",{"_index":751,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super.findone(id",{"_index":921,"title":{},"body":{"controllers/UserController.html":{}}}],["super.remove(id",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["super.update(id",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":1092,"title":{},"body":{"index.html":{},"modules.html":{}}}],["suppression",{"_index":199,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{}}}],["supprimée",{"_index":273,"title":{},"body":{"injectables/BaseService.html":{}}}],["sur",{"_index":623,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["svg",{"_index":1148,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":803,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["table",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":655,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1053,"title":{},"body":{"index.html":{}}}],["target",{"_index":626,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["teamx",{"_index":1145,"title":{},"body":{"index.html":{}}}],["test",{"_index":1042,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1045,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1044,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1040,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1128,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.basedir",{"_index":873,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.baseservice.create(createdto",{"_index":166,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findall(filter",{"_index":171,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findbyid(id",{"_index":169,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.remove(id",{"_index":177,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.softremove(id",{"_index":180,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.update(id",{"_index":174,"title":{},"body":{"classes/BaseController.html":{}}}],["this.config.getconnectionconfig",{"_index":566,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["this.configservice.get('mongodb_uri",{"_index":557,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["this.connection.connect",{"_index":440,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.connection.disconnect",{"_index":441,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.create(createdto",{"_index":796,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.ensuredirectory(folder",{"_index":885,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.exceptionservice.createinternalserverexception",{"_index":245,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["this.exceptionservice.createnotfoundexception",{"_index":254,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.exceptionservice.createvalidationexception(errors",{"_index":964,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.formaterrors(errors",{"_index":483,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.generatefilename(file.originalname",{"_index":887,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.httpresponseservice.badrequest",{"_index":484,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.forbidden(message",{"_index":488,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.internalerror(message",{"_index":492,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.notfound(message",{"_index":490,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.logger.error",{"_index":312,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.error(`échec",{"_index":340,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.log(`image",{"_index":320,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.model",{"_index":594,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model(createdto",{"_index":587,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.find",{"_index":590,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyid(id).exec",{"_index":589,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidanddelete(id).exec",{"_index":593,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidandupdate(id",{"_index":592,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.productservice",{"_index":748,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.repository.create(createdto",{"_index":240,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.delete(id",{"_index":271,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findall(filter",{"_index":261,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findbyid(id",{"_index":250,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.softdelete(id",{"_index":276,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.update(id",{"_index":266,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.created(created",{"_index":241,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success",{"_index":277,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entities",{"_index":262,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entity",{"_index":251,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(null",{"_index":272,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(updated",{"_index":267,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.update(id",{"_index":798,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadservice.uploadsingle",{"_index":793,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadsingle(file",{"_index":339,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["time",{"_index":1107,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":802,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["timestamps",{"_index":902,"title":{},"body":{"classes/User.html":{}}}],["total",{"_index":666,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":1136,"title":{},"body":{"index.html":{}}}],["transform",{"_index":959,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transformer",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":961,"title":{},"body":{"injectables/ValidationService.html":{}}}],["trouvée",{"_index":259,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{}}}],["true})@isnumber()@min(0)@isnotempty",{"_index":371,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":364,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":237,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["twitter",{"_index":1142,"title":{},"body":{"index.html":{}}}],["type",{"_index":95,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":210,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/PaginationParams.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":187,"title":{},"body":{"classes/BaseEntity.html":{}}}],["types/multer",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":476,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["ui",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":654,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiquery({name",{"_index":708,"title":{},"body":{"controllers/ProductController.html":{}}}],["unique",{"_index":190,"title":{},"body":{"classes/BaseEntity.html":{}}}],["unit",{"_index":1041,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":614,"title":{},"body":{"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1157,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":478,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["update",{"_index":88,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":140,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":144,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["updatedat",{"_index":186,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedto",{"_index":141,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedto.image",{"_index":797,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":713,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updates",{"_index":1116,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":842,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatewithimage",{"_index":775,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatewithimage(id",{"_index":779,"title":{},"body":{"injectables/ProductService.html":{}}}],["upload",{"_index":505,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"miscellaneous/variables.html":{}}}],["upload.service",{"_index":850,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadedfile",{"_index":721,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadfile",{"_index":857,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadfile(image",{"_index":864,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":42,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadmultiple",{"_index":282,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadmultiple(files",{"_index":285,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadresult",{"_index":792,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadresult.url",{"_index":795,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":875,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploads/${relativepath",{"_index":894,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadservice",{"_index":46,"title":{"injectables/UploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProductService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadsingle",{"_index":283,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadsingle(file",{"_index":292,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadstream",{"_index":310,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadstream.end(file.buffer",{"_index":326,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadée",{"_index":321,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uri",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["url",{"_index":324,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["useclass",{"_index":430,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UploadModule.html":{}}}],["useexisting",{"_index":951,"title":{},"body":{"modules/ValidationModule.html":{}}}],["usefactory",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["useinterceptors",{"_index":720,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":745,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":746,"title":{},"body":{"controllers/ProductController.html":{}}}],["user",{"_index":896,"title":{"classes/User.html":{}},"body":{"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":932,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":845,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":523,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:13",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":525,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:22",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":521,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:31",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":534,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:45",{"_index":529,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.name",{"_index":933,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":915,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user_repository",{"_index":934,"title":{},"body":{"modules/UserModule.html":{}}}],["usercontroller",{"_index":905,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":903,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":914,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1108,"title":{},"body":{"index.html":{}}}],["v2",{"_index":295,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["validateif",{"_index":383,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validateif((o",{"_index":388,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validation",{"_index":485,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["validation.service",{"_index":947,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validation/exception/exception.service",{"_index":761,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/exception/response/response.service",{"_index":762,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/validation.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["validationerror",{"_index":465,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ValidationService.html":{}}}],["validationmodule",{"_index":44,"title":{"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["validationpipe",{"_index":953,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationpipeoptions",{"_index":956,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationservice",{"_index":943,"title":{"injectables/ValidationService.html":{}},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":384,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["valide",{"_index":336,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["value",{"_index":121,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1158,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":479,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["version",{"_index":1155,"title":{},"body":{"properties.html":{}}}],["vide",{"_index":319,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["video",{"_index":1100,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1089,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1103,"title":{},"body":{"index.html":{}}}],["void",{"_index":455,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["votre",{"_index":677,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["vérifier",{"_index":648,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":1035,"title":{},"body":{"index.html":{}}}],["website",{"_index":1140,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":958,"title":{},"body":{"injectables/ValidationService.html":{}}}],["working",{"_index":1088,"title":{},"body":{"index.html":{}}}],["world",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1118,"title":{},"body":{"index.html":{}}}],["yes",{"_index":503,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["you'd",{"_index":1132,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1046,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // app.module.ts\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { DatabaseModule } from './services/database/database.module';\nimport { UserModule } from './module/user/user.module';\nimport { ValidationModule } from './validation/validation.module';\nimport { CloudinaryService } from './services/upload/cloudinary/cloudinary.service';\nimport { UploadService } from './services/upload/upload.service';\nimport { UploadModule } from './services/upload/upload.module';\nimport { ProductModule } from './module/product/product.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n      }),\n      inject: [ConfigService],\n    }),\n    DatabaseModule,\n    UserModule,\n    ValidationModule,\n    UploadModule,\n    ProductModule,\n  ],\n  providers: [CloudinaryService, UploadService],\n  controllers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseController.html":{"url":"classes/BaseController.html","title":"class - BaseController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseService: BaseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.controller.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseService\n                                                  \n                                                        \n                                                                        BaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new entity'})@ApiBody({description: 'Entity data'})@ApiResponse({status: 201, description: 'Entity successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: object)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all entities'})@ApiResponse({status: 200, description: 'List of entities.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiBody({description: 'Updated entity data'})@ApiResponse({status: 200, description: 'Entity updated.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n  Query,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\nimport { BaseEntity } from '../entity/base.entity';\nimport { BaseService } from './base.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\nexport abstract class BaseController {\n  constructor(private readonly baseService: BaseService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new entity' })\n  @ApiBody({ description: 'Entity data' })\n  @ApiResponse({ status: 201, description: 'Entity successfully created.' })\n  async create(@Body() createDto: Partial): Promise> {\n    return this.baseService.create(createDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find entity by id' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity found.' })\n  async findOne(@Param('id') id: string): Promise> {\n    return this.baseService.findById(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all entities' })\n  @ApiResponse({ status: 200, description: 'List of entities.' })\n  async findAll(@Query() filter = {}): Promise> {\n    return this.baseService.findAll(filter);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiBody({ description: 'Updated entity data' })\n  @ApiResponse({ status: 200, description: 'Entity updated.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: Partial,\n  ): Promise> {\n    return this.baseService.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity deleted.' })\n  async remove(@Param('id') id: string): Promise> {\n    return this.baseService.remove(id);\n  }\n\n  @Delete(':id/soft')\n  @ApiOperation({ summary: 'Soft delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity soft deleted.' })\n  async softRemove(@Param('id') id: string): Promise> {\n    return this.baseService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/entity/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID MongoDB unique'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de création'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicateur de suppression logique'})@Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de dernière modification'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document, Types } from 'mongoose';\n\n@Schema()\nexport class BaseEntity extends Document {\n  @ApiProperty({ description: 'ID MongoDB unique' })\n  _id: Types.ObjectId;\n\n  @ApiProperty({ description: 'Date de création' })\n  @Prop({ default: Date.now })\n  createdAt: Date;\n\n  @ApiProperty({ description: 'Date de dernière modification' })\n  @Prop({ default: Date.now })\n  updatedAt: Date;\n\n  @ApiProperty({ description: 'Indicateur de suppression logique' })\n  @Prop({ default: false })\n  isDeleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FilterQuery } from 'mongoose';\nimport { BaseEntity } from '../entity/base.entity';\nimport { IBaseRepository } from './base.repository.interface';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected readonly repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {}\n\n  async create(createDto: Partial): Promise> {\n    try {\n      const created = await this.repository.create(createDto);\n      return this.responseService.created(created);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création: ${error.message}`,\n      );\n    }\n  }\n\n  async findById(id: string): Promise> {\n    try {\n      const entity = await this.repository.findById(id);\n      return this.responseService.success(entity);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la recherche: ${error.message}`,\n      );\n    }\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise> {\n    try {\n      const entities = await this.repository.findAll(filter);\n      return this.responseService.success(entities);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la récupération des entités: ${error.message}`,\n      );\n    }\n  }\n\n  async update(id: string, updateDto: Partial): Promise> {\n    try {\n      const updated = await this.repository.update(id, updateDto);\n      return this.responseService.success(updated);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour: ${error.message}`,\n      );\n    }\n  }\n\n  async remove(id: string): Promise> {\n    try {\n      const result = await this.repository.delete(id);\n      if (!result) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      return this.responseService.success(null, 'Entité supprimée avec succès');\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression: ${error.message}`,\n      );\n    }\n  }\n\n  async softRemove(id: string): Promise> {\n    try {\n      const softDeleted = await this.repository.softDelete(id);\n      return this.responseService.success(\n        softDeleted,\n        'Entité supprimée logiquement avec succès',\n      );\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression logique: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CloudinaryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../interfaces/upload.interface';\n\n@Injectable()\nexport class CloudinaryService implements FileStorageService {\n  private logger = new Logger(CloudinaryService.name);\n\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        { folder },\n        (error, result) => {\n          if (error) {\n            this.logger.error(\n              `Erreur lors de l'upload: ${JSON.stringify(error)}`,\n            );\n            return reject(error);\n          }\n          if (!result) {\n            return reject(new Error(\"Résultat d'upload vide\"));\n          }\n          this.logger.log(`Image uploadée avec succès: ${result.public_id}`);\n          resolve({\n            url: result.secure_url,\n            id: result.public_id,\n          });\n        },\n      );\n\n      uploadStream.end(file.buffer);\n    });\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    files.forEach((file, index) => {\n      if (!file.buffer?.length) {\n        throw new Error(\n          `Le fichier à l'index ${index} n'a pas de contenu valide`,\n        );\n      }\n    });\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw new Error(`Échec de l'upload des images: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL de l'image du produit', example: 'https://example.com/iphone13.jpg', type: 'string', format: 'binary'})@ValidateIf(o => )@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom du produit', example: 'iPhone 13', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prix du produit', example: 10000, minimum: 0, required: true})@IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Quantité en stock', example: 50, minimum: 0, required: true})@IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNumber,\n  IsNotEmpty,\n  Min,\n  IsOptional,\n  /*   IsUrl, */\n  ValidateIf,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Nom du produit',\n    example: 'iPhone 13',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Prix du produit',\n    example: 10000,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  price: number;\n\n  @ApiProperty({\n    description: 'Quantité en stock',\n    example: 50,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  quantity: number;\n\n  @ApiPropertyOptional({\n    description: \"URL de l'image du produit\",\n    example: 'https://example.com/iphone13.jpg',\n    type: 'string',\n    format: 'binary',\n  })\n  @ValidateIf((o) => o.image !== undefined && o.image !== '')\n  /*  @IsUrl() */\n  @IsOptional()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Adresse de l'utilisateur', example: 'Ouakam', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prénom de l'utilisateur', example: 'Baba Issa', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom de l'utilisateur', example: 'Ndiaye', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: \"Prénom de l'utilisateur\",\n    example: 'Baba Issa',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstname: string;\n\n  @ApiProperty({\n    description: \"Nom de l'utilisateur\",\n    example: 'Ndiaye',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastname: string;\n\n  @ApiProperty({\n    description: \"Adresse de l'utilisateur\",\n    example: 'Ouakam',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConfig.html":{"url":"interfaces/DatabaseConfig.html","title":"interface - DatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionConfig\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConnection.html":{"url":"interfaces/DatabaseConnection.html","title":"interface - DatabaseConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connect\n                                    \n                                \n                                \n                                    \n                                        disconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MongoConfig\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseService } from './database.service';\nimport { MongoConfig } from './mongodb/mongo.config';\nimport { MongoConnection } from './mongodb/mongo.connection';\nimport { DATABASE_CONNECTION } from './interfaces/database.interface';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    MongoConfig,\n    {\n      provide: DATABASE_CONNECTION,\n      useClass: MongoConnection,\n    },\n    DatabaseService,\n  ],\n  exports: [DatabaseService, DATABASE_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: DatabaseConnection)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/database.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                        DatabaseConnection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport {\n  DatabaseConnection,\n  DATABASE_CONNECTION,\n} from './interfaces/database.interface';\n\n@Injectable()\nexport class DatabaseService implements OnModuleInit, OnModuleDestroy {\n  constructor(\n    @Inject(DATABASE_CONNECTION) private connection: DatabaseConnection,\n  ) {}\n\n  async onModuleInit() {\n    await this.connection.connect();\n  }\n\n  async onModuleDestroy() {\n    await this.connection.disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionService.html":{"url":"injectables/ExceptionService.html","title":"injectable - ExceptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/exception.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBadRequestException\n                            \n                            \n                                createForbiddenException\n                            \n                            \n                                createInternalServerException\n                            \n                            \n                                createNotFoundException\n                            \n                            \n                                createValidationException\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpResponseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/exception/exception.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpResponseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBadRequestException\n                        \n                    \n                \n            \n            \n                \ncreateBadRequestException(arg0: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg0\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createForbiddenException\n                        \n                    \n                \n            \n            \n                \ncreateForbiddenException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInternalServerException\n                        \n                    \n                \n            \n            \n                \ncreateInternalServerException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNotFoundException\n                        \n                    \n                \n            \n            \n                \ncreateNotFoundException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createValidationException\n                        \n                    \n                \n            \n            \n                \ncreateValidationException(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ResponseService } from './response/response.service';\n\n@Injectable()\nexport class ExceptionService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createBadRequestException(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(private readonly httpResponseService: ResponseService) {}\n\n  createValidationException(errors: ValidationError[]): HttpException {\n    const messages = this.formatErrors(errors);\n    const response = this.httpResponseService.badRequest(\n      messages,\n      'Erreur de validation',\n    );\n    return new HttpException(response, HttpStatus.BAD_REQUEST);\n  }\n\n  createForbiddenException(message: string): HttpException {\n    const response = this.httpResponseService.forbidden(message);\n    return new HttpException(response, HttpStatus.FORBIDDEN);\n  }\n\n  createNotFoundException(message: string): HttpException {\n    const response = this.httpResponseService.notFound(message);\n    return new HttpException(response, HttpStatus.NOT_FOUND);\n  }\n\n  createInternalServerException(message: string): HttpException {\n    const response = this.httpResponseService.internalError(message);\n    return new HttpException(response, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const messages: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        Object.values(error.constraints).forEach((message) => {\n          messages.push(message);\n        });\n      }\n      if (error.children && error.children.length > 0) {\n        messages.push(...this.formatErrors(error.children));\n      }\n    });\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorageService.html":{"url":"interfaces/FileStorageService.html","title":"interface - FileStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        uploadMultiple\n                                    \n                                \n                                \n                                    \n                                        uploadSingle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \nuploadMultiple(files: Express.Multer.File[], folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \nuploadSingle(file: Express.Multer.File, folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadResult.html":{"url":"interfaces/FileUploadResult.html","title":"interface - FileUploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductDto.html":{"url":"classes/FindProductDto.html","title":"class - FindProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/find-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom de produit', example: 'iPhone'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prix', example: 999.99, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par quantité', example: 50, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsOptional, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindProductDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom de produit',\n    example: 'iPhone',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par prix',\n    example: 999.99,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  price?: number;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par quantité',\n    example: 50,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  quantity?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserDto.html":{"url":"classes/FindUserDto.html","title":"class - FindUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/find-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par adresse', example: 'Paris'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prénom', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Nombre d'éléments par page', example: 10})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Numéro de page pour la pagination', example: 1})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsInt, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindUserDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par prénom',\n    example: 'John',\n  })\n  @IsString()\n  @IsOptional()\n  firstname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsOptional()\n  lastname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par adresse',\n    example: 'Paris',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiPropertyOptional({\n    description: 'Numéro de page pour la pagination',\n    example: 1,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  page?: number;\n\n  @ApiPropertyOptional({\n    description: \"Nombre d'éléments par page\",\n    example: 10,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseRepository.html":{"url":"interfaces/IBaseRepository.html","title":"interface - IBaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                                \n                                    \n                                        softDelete\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(filter?: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        softDelete\n                        \n                    \n                \n            \n            \n                \nsoftDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FilterQuery } from 'mongoose';\n\nexport interface IBaseRepository {\n  create(entity: Partial): Promise;\n  findById(id: string): Promise;\n  findAll(filter?: FilterQuery): Promise;\n  update(id: string, entity: Partial): Promise;\n  delete(id: string): Promise;\n  softDelete(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConfig.html":{"url":"injectables/MongoConfig.html","title":"injectable - MongoConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConnectionConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.config.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.config.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { uri: any; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { DatabaseConfig } from '../interfaces/database.interface';\n@Injectable()\nexport class MongoConfig implements DatabaseConfig {\n  constructor(private configService: ConfigService) {}\n\n  getConnectionConfig() {\n    const uri = this.configService.get('MONGODB_URI');\n    console.log('MongoDB URI:', uri);\n    return { uri };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConnection.html":{"url":"injectables/MongoConnection.html","title":"injectable - MongoConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.connection.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: MongoConfig)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.connection.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        MongoConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                        \n                    connect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as mongoose from 'mongoose';\nimport { DatabaseConnection } from '../interfaces/database.interface';\nimport { MongoConfig } from './mongo.config';\n\n@Injectable()\nexport class MongoConnection implements DatabaseConnection {\n  constructor(private config: MongoConfig) {}\n\n  async connect(): Promise {\n    try {\n      const { uri } = this.config.getConnectionConfig();\n      await mongoose.connect(uri);\n      console.log('Connexion à MongoDB réussie ! 🎉');\n    } catch (error) {\n      console.error('Erreur de connexion à MongoDB:', error);\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise {\n    await mongoose.disconnect();\n    console.log('Déconnexion de MongoDB réussie');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongooseRepository.html":{"url":"injectables/MongooseRepository.html","title":"injectable - MongooseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongooseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/mongoose.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/mongoose.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, FilterQuery } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Injectable()\nexport class MongooseRepository\n  implements IBaseRepository\n{\n  constructor(private readonly model: Model) {}\n\n  async create(createDto: Partial): Promise {\n    const created = new this.model(createDto);\n    return created.save();\n  }\n\n  async findById(id: string): Promise {\n    return this.model.findById(id).exec();\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise {\n    return this.model.find({ ...filter, isDeleted: false }).exec();\n  }\n\n  async update(id: string, updateDto: Partial): Promise {\n    return this.model.findByIdAndUpdate(id, updateDto, { new: true }).exec();\n  }\n\n  async delete(id: string): Promise {\n    const result = await this.model.findByIdAndDelete(id).exec();\n    return !!result;\n  }\n\n  async softDelete(id: string): Promise {\n    return this.model\n      .findByIdAndUpdate(id, { isDeleted: true }, { new: true })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsNumberString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @IsNumberString()\n  page?: string;\n\n  @IsOptional()\n  @IsNumberString()\n  limit?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/pagination.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\n// Définition des types pour la pagination\ninterface PaginationParams {\n  page: number;\n  limit: number;\n}\n\n// Décorateur pour extraire les paramètres de pagination depuis la requête\nexport const PaginateParams = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n);\n\n// Décorateur pour appliquer la logique de pagination sur les résultats retournés\nexport const Pagination = () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/entities/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Schema()\nexport class Product extends BaseEntity {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, min: 0 })\n  price: number;\n\n  @Prop({ required: true, min: 0 })\n  quantity: number;\n\n  @Prop()\n  image: string;\n}\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'Produit créer avec option d''upload image', type: CreateProductDto})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:47\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'get All list '})@ApiResponse({status: 200, description: 'Liste des produits récupérée avec succès', type: undefined})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiQuery({name: 'name', required: false, type: String})@ApiQuery({name: 'price', required: false, type: Number})@ApiQuery({name: 'quantity', required: false, type: Number})@Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:88\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:61\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:31\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:58\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // product/product.controller.ts\nimport {\n  Controller,\n  Post,\n  Put,\n  Param,\n  Body,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  Get,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiConsumes,\n  ApiBody,\n  ApiQuery,\n  ApiResponse,\n  ApiOperation,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { FindProductDto } from './dto/find-product.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\nimport { CacheInterceptor } from '@nestjs/cache-manager';\n\n@Controller('products')\n@ApiTags('products')\nexport class ProductController extends BaseController {\n  constructor(private readonly productService: ProductService) {\n    super(productService);\n    console.log('ProductController initialized');\n  }\n\n  @Post()\n  /*  @UseInterceptors(CacheInterceptor) */\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: \"Produit créer avec option d''upload image\",\n    type: CreateProductDto,\n  })\n  async create(\n    @Body() createDto: CreateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).createWithImage(\n      createDto,\n      file,\n    );\n  }\n\n  @Put(':id')\n  @UseInterceptors(FileInterceptor('image'))\n  /* @UseInterceptors(CacheInterceptor) */\n  @ApiConsumes('multipart/form-data')\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).updateWithImage(\n      id,\n      updateDto,\n      file,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'get All list ' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des produits récupérée avec succès',\n    type: [CreateProductDto],\n  })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiQuery({ name: 'name', required: false, type: String })\n  @ApiQuery({ name: 'price', required: false, type: Number })\n  @ApiQuery({ name: 'quantity', required: false, type: Number })\n  /*  @Pagination() */\n  /*  @UseInterceptors(CacheInterceptor) */\n  @Get()\n  async findAll(@Query() filter: FindProductDto) {\n    return super.findAll(filter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nUploadModule\n\nUploadModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ProductService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UploadModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // product/product.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProductController } from './product.controller';\nimport { ProductService } from './product.service';\nimport { Product, ProductSchema } from './entities/product.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\nimport { UploadModule } from 'src/services/upload/upload.module';\nimport { CacheModule } from '@nestjs/cache-manager';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Product.name, schema: ProductSchema }]),\n    UploadModule,\n    CacheModule.register(), // Register the cache module\n  ],\n  controllers: [ProductController],\n  providers: [\n    ProductService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'PRODUCT_REPOSITORY',\n      useFactory: (model: Model) => {\n        const repository = new MongooseRepository(model);\n        return repository;\n      },\n      inject: [getModelToken(Product.name)],\n    },\n  ],\n  exports: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWithImage\n                            \n                            \n                                    Async\n                                updateWithImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, uploadService: FileStorageService, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/product/product.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        FileStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWithImage(createDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithImage(id: string, updateDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { Product } from './entities/product.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { FileStorageService } from 'src/services/upload/interfaces/upload.interface';\n\n@Injectable()\nexport class ProductService extends BaseService {\n  constructor(\n    @Inject('PRODUCT_REPOSITORY')\n    repository: IBaseRepository,\n    @Inject('UploadService')\n    private readonly uploadService: FileStorageService,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n\n  async createWithImage(\n    createDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        createDto.image = uploadResult.url;\n      }\n      return this.create(createDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création du produit avec image: ${error.message}`,\n      );\n    }\n  }\n\n  async updateWithImage(\n    id: string,\n    updateDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        updateDto.image = uploadResult.url;\n      }\n      return this.update(id, updateDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour du produit avec image: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Response {\n  statusCode: number;\n  message: string;\n  data?: T;\n  errors?: string[];\n  timestamp: string;\n  path?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequest\n                            \n                            \n                                created\n                            \n                            \n                                forbidden\n                            \n                            \n                                internalError\n                            \n                            \n                                notFound\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequest\n                        \n                    \n                \n            \n            \n                \nbadRequest(errors: string[], message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Requête invalide'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n            \n                \ncreated(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource créée avec succès'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbidden\n                        \n                    \n                \n            \n            \n                \nforbidden(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Accès interdit'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalError\n                        \n                    \n                \n            \n            \n                \ninternalError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notFound\n                        \n                    \n                \n            \n            \n                \nnotFound(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource non trouvée'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n            \n                \nsuccess(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:6\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Opération réussie'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from './response.interface';\n\n@Injectable()\nexport class ResponseService {\n  success(data: T, message = 'Opération réussie'): Response {\n    return {\n      statusCode: 200,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  created(data: T, message = 'Ressource créée avec succès'): Response {\n    return {\n      statusCode: 201,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Ajout du type void pour les méthodes qui ne retournent pas de données\n  badRequest(errors: string[], message = 'Requête invalide'): Response {\n    return {\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  forbidden(message = 'Accès interdit'): Response {\n    return {\n      statusCode: 403,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  notFound(message = 'Ressource non trouvée'): Response {\n    return {\n      statusCode: 404,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  internalError(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary/cloudinary.service';\nimport { UploadService } from './upload.service';\n@Module({\n  providers: [\n    {\n      provide: 'UploadService',\n      useClass:\n        process.env.STORAGE_SERVICE === 'local'\n          ? UploadService\n          : CloudinaryService,\n    },\n  ],\n  exports: ['UploadService'],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseDir\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                ensureDirectory\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/upload.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureDirectory(folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(originalName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UploadService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from './interfaces/upload.interface';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n@Injectable()\nexport class UploadService implements FileStorageService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  uploadFile(image: Express.Multer.File) {\n    throw new Error('Method not implemented.');\n  }\n  private logger = new Logger(UploadService.name);\n  private baseDir: string;\n\n  constructor() {\n    this.baseDir = process.env.UPLOAD_DIR || 'uploads';\n  }\n\n  private async ensureDirectory(folder: string): Promise {\n    const dirPath = path.join(this.baseDir, folder);\n    await fs.mkdir(dirPath, { recursive: true });\n    return dirPath;\n  }\n\n  private generateFileName(originalName: string): string {\n    const ext = path.extname(originalName);\n    const hash = crypto.randomBytes(8).toString('hex');\n    return `${hash}${ext}`;\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    const dirPath = await this.ensureDirectory(folder);\n    const fileName = this.generateFileName(file.originalname);\n    const filePath = path.join(dirPath, fileName);\n\n    try {\n      await fs.writeFile(filePath, file.buffer);\n      const relativePath = path.join(folder, fileName);\n\n      return {\n        url: `/uploads/${relativePath}`,\n        id: relativePath,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erreur lors de l'enregistrement du fichier: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                firstname\n                            \n                            \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from '../../../services/base/entity/base.entity';\n\n@Schema({ timestamps: true })\nexport class User extends BaseEntity {\n  @Prop({ required: true })\n  firstname: string;\n\n  @Prop({ required: true })\n  lastname: string;\n\n  @Prop({ required: true })\n  address: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:49\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:38\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:60\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { FindUserDto } from './dto/find-user.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\n\n@Controller('users')\n@ApiTags('users')\nexport class UserController extends BaseController {\n  constructor(private readonly userService: UserService) {\n    super(userService);\n    console.log('UserController initialized');\n  }\n\n  @Get()\n  /* @Pagination() */\n  async findAll(@Query() filter: FindUserDto) {\n    console.log('Finding all users with filter:', filter);\n    return super.findAll(filter);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return super.findOne(id);\n  }\n\n  @Post()\n  async create(@Body() createDto: CreateUserDto) {\n    console.log('Creating user:', createDto);\n    return super.create(createDto);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateDto: UpdateUserDto) {\n    return super.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return super.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // module/user/user.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { User, UserSchema } from './entities/user.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'USER_REPOSITORY',\n      useFactory: (model: Model) => {\n        return new MongooseRepository(model);\n      },\n      inject: [getModelToken(User.name)],\n    },\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { User } from './entities/user.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\n\n@Injectable()\nexport class UserService extends BaseService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_imports\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/validation/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { ValidationService } from './validation.service';\nimport { ExceptionService } from './exception/exception.service';\nimport { DatabaseModule } from 'src/services/database/database.module';\nimport { ResponseService } from './exception/response/response.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ValidationService,\n    ExceptionService,\n\n    {\n      provide: APP_PIPE,\n      useExisting: ValidationService,\n    },\n\n    ResponseService,\n  ],\n  exports: [ValidationService, ExceptionService, ResponseService],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validation.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ValidationPipe\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exceptionService: ExceptionService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/validation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationPipe, ValidationPipeOptions } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ExceptionService } from './exception/exception.service';\n@Injectable()\nexport class ValidationService extends ValidationPipe {\n  constructor(private readonly exceptionService: ExceptionService) {\n    const options: ValidationPipeOptions = {\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      exceptionFactory: (errors: ValidationError[]) => {\n        return this.exceptionService.createValidationException(errors);\n      },\n    };\n    super(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/pagination.decorator.ts\n            \n            interface\n            PaginationParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            PaginateParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            Pagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/product/dto/find-product.dto.ts\n            \n            class\n            FindProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/module/product/entities/product.entity.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/user/dto/find-user.dto.ts\n            \n            class\n            FindUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/module/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/entity/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.controller.ts\n            \n            class\n            BaseController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.repository.interface.ts\n            \n            interface\n            IBaseRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.service.ts\n            \n            injectable\n            BaseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/mongoose.repository.ts\n            \n            injectable\n            MongooseRepository\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConnection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/database/interfaces/database.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.config.ts\n            \n            injectable\n            MongoConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.connection.ts\n            \n            injectable\n            MongoConnection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/upload/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileStorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileUploadResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/upload/interfaces/upload.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validation/exception/exception.service.ts\n            \n            injectable\n            ExceptionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.interface.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.service.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^3.0.0\n        \n            @nestjs/common : ^10.4.15\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.0.4\n        \n            @types/multer : ^1.4.12\n        \n            body-parser : ^1.20.3\n        \n            cache-manager : ^6.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.5.1\n        \n            mongodb : ^6.13.0\n        \n            mongoose : ^8.10.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nTeamx-Group-Nest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DATABASE_CONNECTION   (src/.../database.interface.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../upload.interface.ts)\n                        \n                        \n                            PaginateParams   (src/.../pagination.decorator.ts)\n                        \n                        \n                            Pagination   (src/.../pagination.decorator.ts)\n                        \n                        \n                            ProductSchema   (src/.../product.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/database/interfaces/database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_CONNECTION'\n                    \n                \n\n\n        \n    \n\n    src/services/upload/interfaces/upload.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UPLOAD'\n                    \n                \n\n\n        \n    \n\n    src/decorator/Pagination/pagination.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginateParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Pagination\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/module/product/entities/product.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n    src/module/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
