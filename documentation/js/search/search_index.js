var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.788,1,2.694]],["body/controllers/AppController.html",[0,2.988,1,4.501,2,2.614,3,0.265,4,0.231,5,0.231,6,4.143,7,0.489,8,1.486,9,5.717,10,1.902,11,0.022,12,0.707,13,4.855,14,1.213,15,1.048,16,0.55,17,0.91,18,4.402,19,4.855,20,0.265,21,0.073,22,2.284,23,2.145,24,1.356,25,4.855,26,0.017,27,0.017]],["title/modules/AppModule.html",[28,1.316,29,2.437]],["body/modules/AppModule.html",[2,1.873,3,0.19,4,0.166,5,0.166,11,0.022,16,0.633,17,0.652,20,0.19,21,0.052,26,0.014,27,0.014,28,2.024,29,4.924,30,1.637,31,1.637,32,1.873,33,1.873,34,1.637,35,2.946,36,1.873,37,2.97,38,2.97,39,2.97,40,3.701,41,4.007,42,3.701,43,4.007,44,4.007,45,3.701,46,3.439,47,2.577,48,1.873,49,1.748,50,3.48,51,3.003,52,3.48,53,2.97,54,5.031,55,2.383,56,2.634,57,1.873,58,3.48,59,3.48,60,3.48,61,3.48,62,3.48,63,3.48,64,3.48,65,3.48,66,3.48,67,1.748,68,3.48,69,2.634,70,1.215,71,2.634,72,3.48,73,2.016]],["title/injectables/AppService.html",[18,2.437,74,0.59]],["body/injectables/AppService.html",[3,0.276,4,0.24,5,0.24,7,0.508,8,1.521,9,5.792,11,0.021,12,0.734,14,1.261,15,1.073,16,0.466,17,0.945,18,4.168,20,0.276,21,0.076,24,1.409,26,0.018,27,0.018,74,1.008,75,1.762,76,4.305,77,5.044,78,5.044,79,5.044]],["title/classes/BaseController.html",[21,0.053,80,2.232]],["body/classes/BaseController.html",[0,1.037,3,0.113,4,0.098,5,0.098,7,0.208,8,0.813,10,2.069,11,0.022,12,0.804,14,1.32,15,1.103,16,0.459,17,0.387,20,0.113,21,0.031,22,0.971,23,0.912,24,1.475,26,0.01,27,0.01,70,2.328,80,2.04,81,0.809,82,1.761,83,2.018,84,1.634,85,2.462,86,1.884,87,1.884,88,2.497,89,0.809,90,2.064,91,3.059,92,2.064,93,1.632,94,1.373,95,0.751,96,1.234,97,1.111,98,3.059,99,2.064,100,1.53,101,2.064,102,4.386,103,3.252,104,2.776,105,3.016,106,3.252,107,2.227,108,2.064,109,1.751,110,2.065,111,1.037,112,3.252,113,1.761,114,3.898,115,2.064,116,4.131,117,2.776,118,3.435,119,2.064,120,0.912,121,0.912,122,1.634,123,1.562,124,1.761,125,1.761,126,2.511,127,3.047,128,2.776,129,2.064,130,1.196,131,1.761,132,3.118,133,3.047,134,3.458,135,2.064,136,1.196,137,1.562,138,3.458,139,2.064,140,1.037,141,2.459,142,2.064,143,2.064,144,3.898,145,2.064,146,2.462,147,1.562,148,1.562,149,2.227,150,1.562,151,4.183,152,4.183,153,4.242,154,3.047,155,0.858,156,1.037,157,1.761,158,2.064,159,1.111,160,1.761,161,2.064,162,4.506,163,1.884,164,3.616,165,1.761,166,2.064,167,1.761,168,1.761,169,2.064,170,1.562,171,2.064,172,1.562,173,1.761,174,2.064,175,1.761,176,1.761,177,2.064,178,2.064,179,2.064,180,2.064]],["title/classes/BaseEntity.html",[21,0.053,156,1.788]],["body/classes/BaseEntity.html",[3,0.203,4,0.177,5,0.177,7,0.373,10,2.371,11,0.022,12,0.881,16,0.523,20,0.203,21,0.056,26,0.015,27,0.015,57,1.995,81,1.452,95,0.823,105,2.674,120,2.498,126,1.848,155,1.541,156,2.511,181,3.163,182,1.65,183,5.654,184,5.654,185,4.826,186,5.654,187,4.997,188,4.581,189,3.783,190,4.997,191,3.706,192,6.765,193,2.274,194,3.706,195,3.423,196,3.706,197,4.997,198,4.997,199,4.265,200,3.706,201,3.423,202,3.706,203,4.997,204,3.706,205,3.706,206,4.581,207,3.135,208,4.783,209,4.997,210,2.805,211,1.862,212,1.637,213,2.805,214,4.997,215,3.706,216,2.805]],["title/injectables/BaseService.html",[74,0.59,91,2.062]],["body/injectables/BaseService.html",[3,0.112,4,0.097,5,0.097,7,0.206,8,0.807,11,0.022,12,0.802,14,1.315,15,1.1,16,0.509,17,0.383,20,0.112,21,0.031,23,1.768,24,1.47,26,0.01,27,0.01,70,2.324,74,0.535,75,0.715,83,1.427,84,1.623,86,1.872,87,1.872,88,1.623,89,1.266,91,1.872,93,1.626,94,1.229,95,0.749,96,1.229,97,1.739,98,3.048,102,1.283,107,1.401,109,1.101,110,2.06,111,1.623,118,1.746,120,0.904,121,0.904,122,1.028,126,2.111,130,1.872,136,1.872,140,1.623,141,2.447,144,1.746,156,1.028,157,1.746,159,1.101,160,1.746,193,1.837,199,2.757,211,1.028,213,1.549,216,1.549,217,1.746,218,2.026,219,1.549,220,2.447,221,2.29,222,2.036,223,2.046,224,2.026,225,2.046,226,2.852,227,2.046,228,2.026,229,2.046,230,2.046,231,2.046,232,2.046,233,2.046,234,1.549,235,1.549,236,3.03,237,3.3,238,1.47,239,2.475,240,2.046,241,2.046,242,3.3,243,3.3,244,3.486,245,4.489,246,3.048,247,3.602,248,3.3,249,3.602,250,2.046,251,2.046,252,4.002,253,3.416,254,4.546,255,5.26,256,2.832,257,4.546,258,3.88,259,3.88,260,2.046,261,2.046,262,2.046,263,2.046,264,1.401,265,2.046,266,2.046,267,2.046,268,1.746,269,1.746,270,2.445,271,2.046,272,2.046,273,3.23,274,2.212,275,3.23,276,2.046,277,2.046,278,2.046]],["title/injectables/CloudinaryService.html",[45,2.062,74,0.59]],["body/injectables/CloudinaryService.html",[3,0.156,4,0.136,5,0.234,7,0.494,8,1.041,11,0.022,12,0.786,14,1.041,15,1.056,16,0.454,17,0.536,20,0.156,21,0.043,24,1.603,26,0.012,27,0.012,45,2.413,70,2.092,74,0.69,75,0.998,89,1.925,93,1.23,94,0.93,95,0.566,96,0.93,100,2.7,110,1.782,120,2.171,121,2.171,126,1.057,182,1.375,193,1.885,237,1.793,238,0.799,239,1.345,242,1.793,243,3.386,244,2.413,246,1.656,247,1.958,249,2.852,256,1.539,264,1.958,270,3.153,274,1.958,279,2.44,280,3.082,281,4.607,282,3.365,283,3.365,284,4.165,285,2.164,286,3.47,287,4.34,288,2.858,289,2.852,290,4.607,291,4.607,292,2.164,293,2.858,294,4.165,295,2.858,296,3.555,297,2.242,298,1.656,299,2.44,300,1.656,301,2.858,302,2.858,303,2.858,304,2.858,305,2.858,306,2.858,307,2.858,308,2.858,309,2.858,310,2.858,311,2.858,312,2.44,313,4.193,314,2.858,315,2.858,316,2.858,317,2.858,318,2.858,319,2.858,320,2.858,321,2.858,322,4.165,323,2.858,324,1.793,325,2.858,326,2.858,327,2.44,328,2.858,329,2.858,330,2.164,331,2.44,332,2.858,333,2.858,334,1.958,335,2.858,336,2.858,337,2.44,338,2.44,339,2.44,340,2.44,341,2.44,342,2.858,343,2.858]],["title/classes/CreateProductDto.html",[21,0.053,344,2.232]],["body/classes/CreateProductDto.html",[3,0.175,4,0.152,5,0.152,7,0.322,10,2.227,11,0.022,12,0.827,15,1.097,16,0.417,20,0.175,21,0.068,26,0.013,27,0.013,67,2.629,81,1.253,94,1.168,95,0.846,96,1.008,105,2.511,155,1.33,182,1.49,188,3.96,193,1.577,195,2.191,208,4.302,324,2.832,344,2.832,345,5.116,346,2.191,347,3.282,348,3.583,349,3.583,350,2.421,351,4.514,352,3.604,353,4.26,354,4.096,355,4.514,356,4.514,357,3.198,358,3.583,359,3.198,360,3.092,361,3.853,362,3.853,363,3.902,364,2.73,365,3.198,366,3.06,367,3.853,368,4.514,369,4.851,370,3.565,371,4.514,372,3.198,373,3.853,374,4.514,375,4.514,376,3.853,377,3.198,378,3.092,379,4.465,380,4.851,381,2.191,382,4.514,383,3.198,384,1.607,385,3.417,386,3.853,387,3.198,388,3.198,389,4.514]],["title/classes/CreateUserDto.html",[21,0.053,390,2.232]],["body/classes/CreateUserDto.html",[3,0.209,4,0.182,5,0.182,7,0.385,10,2.251,11,0.021,12,0.836,15,1.158,16,0.472,20,0.209,21,0.077,26,0.015,27,0.015,67,2.887,81,1.499,95,0.781,105,2.538,155,1.59,182,1.685,188,4.349,193,2.295,208,4.64,354,4.121,360,3.496,363,4.121,364,4.903,378,4.198,380,5.232,384,1.922,390,3.202,391,5.232,392,2.62,393,4.349,394,4.349,395,4.349,396,4.357,397,6.569,398,5.105,399,3.825,400,4.357,401,5.105,402,5.105,403,3.825,404,5.105,405,3.825]],["title/interfaces/DatabaseConfig.html",[406,1.175,407,2.232]],["body/interfaces/DatabaseConfig.html",[3,0.275,4,0.239,5,0.239,7,0.506,8,1.518,11,0.021,12,0.732,14,1.256,20,0.357,26,0.018,27,0.018,110,2.005,238,1.404,406,2.005,407,3.81,408,2.525,409,3.442,410,5.131,411,5.026,412,2.912,413,3.805,414,3.805,415,3.051]],["title/interfaces/DatabaseConnection.html",[406,1.175,412,2.062]],["body/interfaces/DatabaseConnection.html",[3,0.266,4,0.232,5,0.232,7,0.49,8,1.489,11,0.021,12,0.867,14,1.489,20,0.352,26,0.018,27,0.018,110,2.214,238,1.361,406,1.967,407,3.056,408,2.448,409,3.336,410,3.687,412,3.452,413,5.077,414,5.077,415,2.994,416,4.871,417,4.871]],["title/modules/DatabaseModule.html",[28,1.316,40,2.062]],["body/modules/DatabaseModule.html",[3,0.226,4,0.197,5,0.197,11,0.022,16,0.621,17,0.775,20,0.226,21,0.062,26,0.016,27,0.016,28,2.207,30,1.946,31,1.946,32,2.227,33,2.227,34,1.946,35,3.214,36,3.214,40,4.059,47,2.893,48,2.227,49,2.078,51,2.595,53,4.587,55,2.833,415,3,418,3.53,419,3.53,420,3.53,421,4.492,422,3.89,423,4.136,424,4.136,425,4.136,426,3.681,427,4.136,428,2.833,429,2.595,430,3.53]],["title/injectables/DatabaseService.html",[74,0.59,421,2.232]],["body/injectables/DatabaseService.html",[3,0.237,4,0.207,5,0.207,7,0.437,8,1.385,11,0.022,12,0.889,14,1.385,16,0.512,17,0.813,20,0.237,21,0.065,26,0.016,27,0.016,70,2.375,73,2.513,74,0.918,75,1.515,89,2.171,93,1.281,94,0.968,95,0.59,96,0.968,239,2.608,280,2.721,300,2.513,412,3.728,415,2.179,421,3.476,428,2.971,431,3.702,432,6.799,433,6.799,434,4.338,435,4.338,436,5.541,437,4.338,438,4.338,439,4.338,440,4.338,441,4.338]],["title/injectables/ExceptionService.html",[74,0.59,221,1.479]],["body/injectables/ExceptionService.html",[3,0.154,4,0.134,5,0.134,7,0.283,8,1.029,11,0.022,12,0.895,14,1.489,15,1.213,16,0.45,17,0.527,20,0.154,21,0.062,22,1.324,23,1.243,24,1.593,26,0.012,27,0.012,74,0.682,75,0.983,89,1.102,93,1.817,94,1.374,95,0.837,96,1.374,100,2.683,159,2.884,193,0.983,221,1.712,222,1.981,238,1.664,244,1.63,246,1.63,280,3.054,370,1.765,384,1.414,442,2.401,443,4.117,444,4.117,445,4.117,446,4.117,447,4.117,448,4.117,449,2.813,450,2.813,451,4.117,452,4.117,453,2.813,454,2.813,455,2.13,456,4.117,457,2.813,458,3.054,459,6.436,460,4.117,461,2.813,462,4.117,463,2.813,464,4.117,465,5.251,466,2.813,467,2.819,468,4.117,469,2.813,470,2.813,471,2.813,472,2.13,473,2.13,474,2.13,475,2.13,476,1.927,477,2.13,478,2.13,479,2.13,480,2.401,481,2.401,482,5.358,483,2.813,484,2.813,485,2.813,486,5.358,487,2.813,488,2.813,489,2.813,490,2.813,491,2.813,492,2.813,493,2.813,494,2.813,495,2.813,496,2.813,497,2.813,498,2.813,499,2.813,500,2.813]],["title/interfaces/FileStorageService.html",[297,1.916,406,1.175]],["body/interfaces/FileStorageService.html",[3,0.235,4,0.205,5,0.29,7,0.433,8,1.377,11,0.021,12,0.802,14,1.377,15,1.232,20,0.332,26,0.016,27,0.016,93,1.627,94,1.23,95,0.749,96,1.23,110,2.117,126,1.589,238,1.201,282,4.164,283,4.164,285,3.254,286,3.93,287,4.646,289,3.773,292,3.254,297,2.966,298,2.49,324,2.696,406,1.819,408,2.16,415,2.16,501,2.944,502,4.298,503,3.773,504,4.298,505,3.254]],["title/interfaces/FileUploadResult.html",[298,2.062,406,1.175]],["body/interfaces/FileUploadResult.html",[3,0.257,4,0.224,5,0.278,7,0.472,11,0.021,15,1.253,20,0.346,26,0.017,27,0.017,95,0.792,110,1.923,126,2.448,182,1.923,238,1.312,282,3.215,283,3.215,286,3.375,287,3.989,289,3.215,297,2.528,298,3.375,324,4.154,406,1.923,408,2.359,415,2.359,501,3.215,505,3.554]],["title/classes/FindProductDto.html",[21,0.053,506,2.437]],["body/classes/FindProductDto.html",[3,0.205,4,0.178,5,0.178,7,0.377,10,2.227,11,0.021,12,0.827,15,0.887,16,0.465,20,0.205,21,0.076,26,0.015,27,0.015,81,1.467,94,1.269,95,0.773,96,1.458,105,2.511,155,1.557,182,1.661,193,1.758,346,2.565,348,3.893,349,3.893,350,4.303,353,3.447,354,4.096,358,4.162,360,3.447,361,3.196,366,3.272,367,4.295,369,5.187,370,3.157,373,4.295,376,4.295,378,3.447,379,4.851,381,2.565,384,1.882,385,4.6,386,4.295,506,3.447,507,5.187,508,5.573,509,5.573,510,3.745,511,3.745,512,5.033,513,5.033,514,3.745,515,3.745]],["title/classes/FindUserDto.html",[21,0.053,516,2.437]],["body/classes/FindUserDto.html",[3,0.178,4,0.156,5,0.156,7,0.329,10,2.367,11,0.021,12,0.879,15,1.104,16,0.423,20,0.178,21,0.069,26,0.013,27,0.013,81,1.279,95,0.821,96,1.509,105,2.669,155,1.357,182,1.512,193,1.6,248,2.873,350,4.572,354,4.239,358,4.288,360,3.137,366,3.088,378,3.928,381,2.236,384,1.64,385,4.74,392,2.236,393,4.004,394,4.004,395,4.004,396,3.909,400,3.909,508,5.344,509,5.601,516,3.137,517,5.344,518,3.319,519,4.034,520,3.264,521,3.264,522,3.264,523,3.264,524,3.264,525,3.264,526,4.58,527,4.58,528,3.264,529,3.264,530,4.58,531,3.137,532,2.653,533,3.264,534,3.264,535,5.29,536,3.264,537,3.264,538,3.264,539,2.471,540,4.58,541,2.471]],["title/interfaces/IBaseRepository.html",[220,1.916,406,1.175]],["body/interfaces/IBaseRepository.html",[3,0.201,4,0.175,5,0.175,7,0.37,8,1.242,11,0.021,12,0.945,14,1.623,15,1.24,16,0.34,20,0.201,26,0.015,27,0.015,83,2.196,84,2.498,88,2.498,93,1.918,94,1.45,95,0.883,96,1.45,98,3.763,102,3.784,110,2.322,111,2.498,122,1.848,126,2.231,132,3.118,140,2.498,211,1.848,218,3.118,220,2.676,226,3.784,228,3.118,406,1.214,408,1.848,503,2.518,542,3.138,543,4.243,544,4.971,545,3.677,546,4.243,547,3.677,548,3.677,549,3.677,550,4.243,551,3.677,552,3.677]],["title/injectables/MongoConfig.html",[74,0.59,422,2.062]],["body/injectables/MongoConfig.html",[3,0.244,4,0.213,5,0.213,7,0.449,8,1.41,11,0.022,12,0.821,14,1.115,16,0.572,17,0.835,20,0.244,21,0.067,22,2.099,24,1.246,26,0.017,27,0.017,54,5.845,55,3.054,71,5.075,74,0.934,75,1.558,89,1.747,93,1.317,94,0.996,95,0.606,96,0.996,238,1.246,300,2.584,407,3.538,410,4.92,422,3.268,428,3.054,553,3.806,554,4.46,555,4.46,556,4.46,557,4.46,558,4.46]],["title/injectables/MongoConnection.html",[74,0.59,426,2.437]],["body/injectables/MongoConnection.html",[3,0.214,4,0.186,5,0.186,7,0.393,8,1.294,11,0.022,12,0.845,14,1.294,16,0.572,17,0.732,20,0.214,21,0.059,22,1.839,26,0.015,27,0.015,70,2.309,71,2.959,74,0.858,75,1.365,89,1.532,93,1.154,94,0.873,95,0.532,96,0.873,110,2.041,189,4.396,193,1.809,211,2.602,237,2.452,238,1.092,239,2.437,242,2.452,243,3.643,244,2.265,300,2.265,412,3.001,413,4.68,414,4.68,422,3.582,426,3.547,428,2.677,559,3.336,560,3.909,561,3.909,562,5.179,563,3.909,564,3.909,565,3.909,566,3.909,567,3.909,568,3.909,569,3.547,570,3.909,571,3.909,572,3.909,573,3.909]],["title/injectables/MongooseRepository.html",[74,0.59,574,2.232]],["body/injectables/MongooseRepository.html",[3,0.156,4,0.136,5,0.136,7,0.288,8,1.041,11,0.022,12,0.9,14,1.497,15,1.186,16,0.499,17,0.536,20,0.156,21,0.043,22,1.345,23,1.263,24,1.673,26,0.012,27,0.012,67,2.469,70,2.45,74,0.69,75,0.998,83,1.84,84,2.093,88,2.093,89,1.12,93,1.826,94,1.38,95,0.841,96,1.38,97,2.242,98,3.47,100,2.312,107,1.958,109,1.539,110,2.221,111,2.093,120,1.263,121,1.263,122,2.093,126,1.996,132,2.613,140,2.093,141,2.906,156,1.436,185,3.555,201,1.958,211,1.436,218,2.613,220,2.242,226,3.386,228,2.613,238,1.164,239,1.345,270,3.153,300,1.656,543,3.555,546,3.555,550,3.555,574,2.613,575,2.44,576,2.858,577,4.534,578,2.858,579,2.858,580,2.858,581,2.858,582,2.858,583,2.858,584,2.858,585,2.164,586,2.44,587,2.858,588,2.858,589,2.858,590,2.858,591,4.913,592,2.858,593,2.858,594,2.858,595,2.858]],["title/classes/PaginationDto.html",[21,0.053,596,2.694]],["body/classes/PaginationDto.html",[3,0.259,4,0.226,5,0.226,7,0.477,10,2.296,11,0.021,12,0.853,15,1.171,16,0.438,20,0.259,21,0.088,26,0.017,27,0.017,81,1.858,95,0.797,96,1.483,182,1.935,358,4.356,384,2.383,518,3.99,519,3.99,596,4.436,597,4.047,598,5.86,599,4.742,600,4.742,601,6.361]],["title/interfaces/PaginationParams.html",[406,1.175,602,2.437]],["body/interfaces/PaginationParams.html",[3,0.149,4,0.13,5,0.13,7,0.275,11,0.022,15,0.482,16,0.253,17,0.512,20,0.22,24,1.574,26,0.012,27,0.012,70,0.954,95,0.548,163,2.335,164,1.871,182,1.33,193,1.845,195,1.871,210,2.068,216,2.068,222,1.01,238,1.881,239,1.286,248,3.925,256,1.471,264,1.871,330,3.05,334,1.871,352,1.583,366,3.173,406,0.902,408,1.373,458,1.714,518,4.075,519,3.925,531,3.618,532,3.264,539,3.999,541,3.05,569,1.871,602,3.278,603,2.068,604,3.439,605,3.439,606,2.732,607,4.029,608,2.732,609,3.623,610,3.439,611,2.732,612,3.05,613,2.068,614,1.714,615,2.332,616,3.439,617,2.332,618,2.332,619,2.332,620,2.332,621,2.332,622,2.732,623,2.732,624,2.732,625,2.732,626,2.068,627,2.332,628,3.439,629,2.332,630,2.332,631,3.439,632,2.068,633,3.439,634,2.332,635,2.332,636,2.332,637,2.332,638,2.332,639,2.332,640,2.332,641,2.332,642,2.332,643,2.332,644,2.332,645,2.332,646,4.085,647,2.332,648,2.332,649,3.439,650,4.085,651,2.332,652,2.332,653,2.332,654,2.332,655,2.332,656,2.332,657,2.332,658,2.332,659,2.332,660,2.332,661,3.439,662,2.332,663,2.332,664,2.332,665,2.332,666,3.439,667,2.332,668,3.439,669,2.332,670,3.439,671,3.439,672,2.332,673,2.332,674,2.332,675,2.332,676,2.332,677,2.332,678,2.332,679,2.068,680,2.332,681,2.068,682,2.332]],["title/classes/Product.html",[21,0.053,683,2.062]],["body/classes/Product.html",[3,0.22,4,0.192,5,0.192,7,0.406,10,2.452,11,0.022,12,0.911,15,1.103,16,0.489,20,0.289,21,0.061,26,0.016,27,0.016,57,2.17,67,3.35,81,1.579,94,1.316,95,0.851,156,2.655,182,1.745,206,5.047,207,3.315,212,1.781,238,1.126,347,3.699,348,4.038,349,4.038,363,3.699,366,3.369,370,3.926,381,4.286,586,3.44,683,3.062,684,3.051,685,4.031,686,5.032,687,4.031,688,4.031,689,4.031,690,3.44,691,2.761,692,3.44]],["title/controllers/ProductController.html",[0,1.788,693,2.437]],["body/controllers/ProductController.html",[0,0.996,2,1.068,3,0.108,4,0.095,5,0.277,7,0.2,8,0.788,10,2.034,11,0.022,12,0.755,14,1.297,15,1.051,16,0.562,17,0.372,20,0.108,21,0.03,22,0.933,23,0.876,24,1.096,26,0.009,27,0.009,70,2.249,80,3.542,83,1.733,84,1.584,85,2.386,86,1.826,87,1.826,88,1.97,93,1.533,94,1.403,95,0.912,96,1.159,97,1.068,102,3.413,105,2.57,109,2.111,110,1.295,111,0.996,113,1.693,114,1.693,116,3.338,117,2.69,122,1.584,123,1.501,124,1.693,125,1.693,126,2.151,127,2.969,128,1.693,130,1.149,131,1.693,132,1.977,133,2.386,134,2.386,136,1.149,137,1.501,138,2.386,140,0.996,141,2.405,146,2.386,147,1.501,148,1.501,149,2.686,150,1.501,151,2.386,152,2.386,154,2.386,155,0.825,162,1.693,163,2.272,164,1.358,170,1.501,172,1.501,173,1.693,201,4.082,212,1.393,256,2.405,264,2.158,274,2.158,286,3.007,344,3.413,347,1.977,348,2.158,349,2.158,353,2.158,363,3.739,366,2.405,503,2.158,506,3.06,518,1.977,519,1.977,532,1.826,614,2.46,683,1.149,693,2.158,694,1.693,695,1.693,696,1.693,697,1.983,698,1.983,699,3.152,700,3.152,701,3.152,702,3.554,703,1.983,704,1.983,705,3.152,706,3.152,707,3.152,708,1.983,709,3.922,710,1.983,711,1.983,712,1.983,713,3.06,714,1.983,715,1.983,716,1.983,717,1.983,718,1.693,719,1.983,720,1.983,721,3.922,722,1.983,723,1.693,724,1.693,725,1.693,726,1.983,727,4.429,728,1.693,729,1.501,730,2.272,731,1.693,732,1.693,733,3.347,734,1.693,735,1.693,736,1.693,737,1.983,738,1.501,739,1.501,740,1.983,741,1.983,742,1.983,743,1.983,744,1.693,745,3.922,746,3.152,747,3.152,748,3.152,749,1.983,750,1.983,751,1.693]],["title/modules/ProductModule.html",[28,1.316,41,2.232]],["body/modules/ProductModule.html",[2,2.514,3,0.183,4,0.16,5,0.16,11,0.022,16,0.64,17,0.629,20,0.183,21,0.05,24,0.938,26,0.014,27,0.014,28,2.147,30,1.58,31,1.58,32,1.807,33,1.807,34,1.58,35,2.891,36,2.891,41,4.379,42,3.66,47,2.514,48,1.807,49,1.687,51,2.929,56,2.541,57,2.514,69,2.541,73,1.945,94,0.749,100,1.58,207,2.106,211,1.687,221,2.626,222,2.336,224,2.929,238,0.938,429,2.106,574,2.106,577,4.065,683,1.945,691,3.198,693,3.678,729,2.541,730,4.014,731,2.865,738,2.541,739,2.541,752,2.865,753,3.357,754,2.865,755,2.865,756,3.357,757,3.357,758,3.357,759,2.865,760,2.865,761,2.865,762,2.865,763,3.357,764,3.357,765,2.865,766,3.357,767,3.357,768,3.357,769,2.865,770,3.357,771,2.865,772,3.357]],["title/injectables/ProductService.html",[74,0.59,730,2.062]],["body/injectables/ProductService.html",[3,0.125,4,0.109,5,0.301,7,0.231,8,0.882,11,0.022,12,0.886,14,1.482,15,1.115,16,0.531,17,0.43,20,0.125,21,0.034,23,1.902,24,0.986,26,0.01,27,0.01,46,2.317,70,2.37,73,1.328,74,0.585,75,0.801,83,1.56,84,1.774,86,2.045,87,2.045,88,1.774,89,1.383,91,3.525,93,1.797,94,1.358,95,0.827,96,1.358,97,1.234,98,3.6,109,2.317,110,1.821,111,1.152,120,1.013,121,1.013,122,1.152,126,2.039,130,1.328,136,1.328,140,1.152,141,2.969,193,1.233,212,1.56,213,1.736,218,2.215,219,1.736,220,2.603,221,2.466,222,2.193,224,2.215,226,2.215,228,1.438,234,1.736,235,1.736,236,2.672,237,2.215,238,0.986,239,1.661,242,2.215,243,2.215,244,2.045,245,3.013,246,2.045,247,2.418,248,2.215,249,2.418,256,1.901,268,1.957,269,1.957,280,1.438,286,3.195,297,2.603,347,2.215,352,2.045,353,2.418,503,2.418,585,1.736,614,2.215,683,1.328,696,3.013,702,3.777,729,1.736,730,2.045,773,1.957,774,4.305,775,4.305,776,2.293,777,2.293,778,2.293,779,2.293,780,2.293,781,1.957,782,1.957,783,1.957,784,1.957,785,1.957,786,1.957,787,1.957,788,2.293,789,2.293,790,2.293,791,1.957,792,3.53,793,3.53,794,2.293,795,3.53,796,2.293,797,2.293,798,2.293]],["title/interfaces/Response.html",[159,1.916,406,1.175]],["body/interfaces/Response.html",[3,0.242,4,0.211,5,0.211,7,0.446,11,0.021,15,1.275,20,0.242,26,0.017,27,0.017,95,0.93,96,1.526,159,3.024,163,3.758,182,1.855,366,3.321,406,1.463,408,2.227,458,4.068,467,4.442,799,3.783,800,5.535,801,5.535,802,5.535,803,5.264]],["title/injectables/ResponseService.html",[74,0.59,222,1.316]],["body/injectables/ResponseService.html",[3,0.144,4,0.125,5,0.125,7,0.265,8,0.979,11,0.022,12,0.846,14,1.453,15,1.199,16,0.362,17,0.493,20,0.144,21,0.04,24,1.624,26,0.012,27,0.012,74,0.649,75,0.919,93,1.828,94,1.298,95,0.86,96,1.298,100,2.736,104,2.246,107,2.684,116,1.802,120,2.569,121,2.569,159,3.599,163,3.005,193,0.919,222,1.449,246,2.27,253,2.246,256,2.11,258,3.344,259,3.344,274,2.684,334,1.802,352,2.713,455,1.992,458,4.349,467,2.684,531,1.802,569,2.684,609,1.992,612,2.966,679,2.966,681,2.966,801,4.963,802,4.963,803,5.282,804,2.246,805,3.919,806,3.919,807,3.919,808,3.919,809,3.919,810,2.631,811,3.919,812,3.919,813,2.631,814,5.187,815,3.919,816,3.919,817,2.631,818,3.919,819,3.919,820,3.919,821,2.631,822,3.919,823,3.919,824,3.919,825,2.631,826,3.919,827,2.631,828,2.631,829,5.814,830,2.631,831,2.631,832,2.631,833,2.631,834,2.631,835,2.631,836,2.631,837,2.631,838,2.631]],["title/classes/UpdateProductDto.html",[21,0.053,713,2.437]],["body/classes/UpdateProductDto.html",[3,0.285,4,0.248,5,0.248,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.041,83,2.302,155,2.166,212,2.742,344,3.268,346,3.568,713,4.25,733,4.446,839,4.446,840,6.205,841,4.446]],["title/classes/UpdateUserDto.html",[21,0.053,842,2.437]],["body/classes/UpdateUserDto.html",[3,0.285,4,0.248,5,0.248,11,0.021,16,0.574,20,0.285,21,0.078,26,0.018,27,0.018,81,2.041,83,2.302,155,2.166,212,2.742,390,3.268,392,3.568,841,4.446,842,4.25,843,4.446,844,6.205,845,4.446]],["title/modules/UploadModule.html",[28,1.316,42,2.062]],["body/modules/UploadModule.html",[3,0.248,4,0.216,5,0.216,11,0.022,16,0.576,17,0.849,20,0.248,21,0.068,26,0.017,27,0.017,28,2.304,30,2.132,31,2.132,32,2.439,33,2.439,34,2.132,35,3.067,36,3.354,42,3.903,45,3.301,46,3.834,47,3.067,48,2.439,49,2.276,429,2.842,430,3.867,846,3.867,847,3.867,848,4.531,849,4.531,850,4.531,851,4.531,852,4.531]],["title/injectables/UploadService.html",[46,1.916,74,0.59]],["body/injectables/UploadService.html",[3,0.133,4,0.116,5,0.212,7,0.244,8,0.921,11,0.022,12,0.879,14,1.338,15,1.191,16,0.495,17,0.454,20,0.133,21,0.036,24,1.496,26,0.011,27,0.011,46,1.984,67,1.219,70,2.16,74,0.611,75,0.847,89,1.747,93,1.581,94,1.195,95,0.767,96,1.195,100,2.097,110,1.861,120,1.969,121,1.969,126,0.897,182,1.217,193,1.287,237,2.312,238,1.637,239,2.343,242,2.312,243,3.123,244,2.583,246,1.405,247,1.661,249,2.524,280,4.077,281,4.249,282,3.053,283,3.053,285,1.836,286,3.583,287,4.235,289,2.524,290,4.249,291,4.249,292,1.836,297,1.984,298,1.405,299,2.07,300,1.405,312,2.07,313,2.07,324,1.522,327,2.07,331,2.07,337,2.07,338,2.07,339,2.07,340,2.07,341,2.07,347,1.522,352,1.405,455,1.836,472,1.836,473,1.836,474,1.836,475,1.836,476,1.661,477,1.836,478,1.836,479,1.836,480,2.07,481,2.07,800,3.145,853,2.07,854,4.457,855,3.685,856,3.685,857,3.685,858,3.685,859,3.685,860,2.425,861,3.685,862,2.425,863,2.425,864,3.685,865,2.425,866,2.425,867,2.425,868,3.685,869,2.425,870,2.425,871,2.425,872,3.685,873,2.425,874,2.425,875,2.425,876,4.457,877,2.425,878,2.425,879,2.425,880,2.425,881,2.425,882,2.425,883,2.425,884,2.425,885,2.425,886,4.457,887,2.425,888,2.425,889,2.425,890,2.425,891,2.425,892,3.685,893,2.425,894,2.425,895,2.425]],["title/classes/User.html",[21,0.053,896,2.062]],["body/classes/User.html",[3,0.232,4,0.202,5,0.202,7,0.427,10,2.369,11,0.022,12,0.88,15,1.192,16,0.505,20,0.299,21,0.064,26,0.016,27,0.016,57,2.286,67,3.456,81,1.664,95,0.822,156,2.747,182,1.805,206,4.832,207,3.43,212,1.877,238,1.187,363,3.793,393,4.576,394,4.576,395,4.576,686,5.16,690,3.625,896,3.168,897,3.215,898,4.247,899,4.247,900,4.247,901,4.247,902,4.247,903,2.909,904,3.625]],["title/controllers/UserController.html",[0,1.788,905,2.437]],["body/controllers/UserController.html",[0,1.287,2,1.378,3,0.14,4,0.122,5,0.122,7,0.258,8,0.96,10,2.255,11,0.022,12,0.838,14,1.439,15,1.145,16,0.58,17,0.48,20,0.14,21,0.038,22,1.205,23,1.131,24,1.532,26,0.011,27,0.011,70,2.397,80,3.851,83,1.696,84,1.929,85,2.906,86,2.225,87,2.225,88,1.929,93,1.7,94,1.285,95,0.783,96,1.285,97,1.378,102,2.408,105,1.696,109,2.48,110,0.845,111,1.287,116,1.754,122,2.571,123,1.938,126,2.27,127,1.938,130,1.484,132,2.408,133,1.938,134,1.938,136,1.484,137,1.938,138,2.906,140,1.287,141,2.755,146,3.487,147,1.938,148,1.938,149,2.629,150,1.938,151,1.938,152,1.938,153,2.185,154,1.938,155,1.065,165,2.185,167,3.277,168,2.185,170,1.938,172,2.906,175,3.277,176,2.185,212,1.696,390,3.21,472,1.938,473,1.938,474,1.938,475,1.938,476,1.754,477,1.938,478,1.938,479,1.938,516,3.505,532,2.225,614,3.439,695,2.185,702,3.942,718,2.185,725,2.185,727,2.185,728,2.185,732,2.185,734,2.185,735,2.185,736,2.185,744,2.185,751,2.185,842,3.505,845,3.931,896,2.225,905,2.629,906,2.185,907,3.839,908,2.561,909,2.561,910,2.561,911,2.561,912,2.561,913,1.938,914,2.669,915,2.185,916,2.561,917,2.561,918,2.561,919,2.561,920,2.561,921,2.561,922,2.561,923,2.561,924,2.561,925,2.561,926,2.561]],["title/modules/UserModule.html",[28,1.316,43,2.232]],["body/modules/UserModule.html",[2,2.644,3,0.197,4,0.172,5,0.172,11,0.022,16,0.637,17,0.677,20,0.197,21,0.054,24,1.009,26,0.014,27,0.014,28,2.063,30,1.7,31,1.7,32,1.945,33,1.945,34,1.7,35,3.004,36,3.004,43,4.366,47,2.644,48,1.945,49,1.815,51,2.266,56,2.734,57,2.644,69,2.734,73,2.093,94,0.806,100,1.7,207,2.266,211,1.815,221,2.686,222,2.389,429,2.266,574,2.266,577,4.224,759,3.083,760,3.083,761,3.083,762,3.083,765,3.083,771,3.083,896,2.093,903,3.364,905,3.822,913,2.734,914,4.064,915,3.083,927,3.083,928,3.083,929,3.083,930,3.612,931,3.612,932,3.612,933,3.612,934,3.612,935,3.612]],["title/injectables/UserService.html",[74,0.59,914,2.062]],["body/injectables/UserService.html",[3,0.168,4,0.147,5,0.147,7,0.31,8,1.099,11,0.022,12,0.92,14,1.536,15,1.14,16,0.568,17,0.577,20,0.168,21,0.046,23,1.942,26,0.013,27,0.013,70,2.383,73,1.785,74,0.728,75,1.076,83,1.942,84,2.209,86,2.547,87,2.547,88,2.209,89,1.723,91,3.813,93,1.868,94,1.412,95,0.86,96,1.412,97,1.659,98,3.238,109,1.659,110,2.029,111,1.548,120,1.361,121,1.361,122,1.548,126,2.067,130,1.785,136,1.785,140,1.548,141,2.367,212,1.942,218,2.758,219,2.332,220,3.009,221,2.688,222,2.391,224,2.758,226,2.758,228,1.933,234,2.332,235,2.332,236,3.328,585,2.332,702,4.208,781,2.629,782,2.629,783,2.629,784,2.629,785,2.629,786,2.629,787,2.629,791,2.629,896,1.785,913,2.332,914,2.547,936,2.629,937,3.081,938,3.081]],["title/modules/ValidationModule.html",[28,1.316,44,2.232]],["body/modules/ValidationModule.html",[3,0.207,4,0.18,5,0.18,11,0.022,16,0.605,17,0.709,20,0.207,21,0.057,26,0.015,27,0.015,28,2.113,30,1.781,31,1.781,32,2.037,33,2.037,34,1.781,35,3.076,36,3.076,40,3.795,44,4.503,47,2.729,48,2.037,49,1.902,51,3.179,221,2.938,222,2.613,429,2.374,939,3.23,940,3.785,941,3.23,942,3.23,943,4.459,944,3.785,945,5.068,946,3.23,947,3.785,948,3.23,949,3.785,950,3.785,951,3.785]],["title/injectables/ValidationService.html",[74,0.59,943,2.232]],["body/injectables/ValidationService.html",[3,0.231,4,0.202,5,0.202,11,0.022,12,0.616,16,0.589,17,1.022,20,0.231,21,0.082,22,1.993,23,1.871,24,1.183,26,0.016,27,0.016,67,3.204,74,0.904,75,1.479,89,1.659,93,1.251,94,0.945,95,0.576,96,0.945,121,1.871,201,3.737,212,2.411,221,2.809,238,1.183,384,2.128,465,5.153,467,2.9,626,3.205,943,3.423,948,3.614,952,3.614,953,6.037,954,4.234,955,4.234,956,5.456,957,4.234,958,4.234,959,4.234,960,4.234,961,4.234,962,4.234,963,4.234,964,4.234,965,4.234]],["title/coverage.html",[966,3.68]],["body/coverage.html",[0,2.441,1,2.121,5,0.134,6,2.392,11,0.022,18,1.919,21,0.099,26,0.012,27,0.012,34,1.319,45,1.624,46,1.509,74,1.121,76,2.392,80,1.758,82,2.392,91,1.624,95,0.381,100,1.319,156,1.408,159,1.509,181,2.392,217,2.392,220,1.509,221,1.165,222,1.036,279,2.392,297,1.509,298,1.624,344,1.758,345,2.392,346,3.327,370,4.616,390,1.758,391,2.392,392,3.327,406,2.029,407,1.758,409,3.327,412,1.624,415,2.062,421,1.758,422,1.624,426,1.919,431,2.392,442,2.392,501,3.327,506,1.919,507,2.392,516,1.919,517,2.392,532,1.624,542,2.392,553,2.392,559,2.392,574,1.758,575,2.392,596,2.121,597,2.392,602,1.919,603,3.677,613,2.121,632,2.121,683,1.624,684,3.107,691,1.919,693,1.919,694,2.392,713,1.919,730,1.624,773,2.392,799,2.392,804,2.392,839,2.392,842,1.919,843,2.392,853,2.392,896,1.624,897,3.107,903,1.919,905,1.919,906,2.392,914,1.624,936,2.392,943,1.758,952,2.392,966,2.121,967,2.392,968,2.802,969,2.802,970,5.348,971,5.948,972,5.948,973,6.429,974,2.392,975,5.348,976,5.692,977,5.692,978,2.802,979,2.802,980,5.692,981,2.802,982,2.802,983,2.802]],["title/dependencies.html",[31,2.015,984,2.534]],["body/dependencies.html",[11,0.022,17,0.846,21,0.085,26,0.017,27,0.017,31,2.125,55,3.093,57,2.431,149,3.093,155,1.878,189,3.419,210,3.419,211,2.269,296,3.855,384,2.269,723,3.855,724,4.852,738,3.419,739,4.303,769,3.855,946,3.855,985,4.516,986,4.516,987,4.516,988,5.685,989,4.516,990,4.516,991,4.516,992,4.516,993,4.516,994,4.516,995,4.516,996,4.516,997,4.516,998,4.516,999,4.516,1000,4.516,1001,4.516,1002,4.516,1003,4.516,1004,4.516,1005,4.516,1006,4.516,1007,4.516,1008,4.516,1009,4.516,1010,4.516,1011,4.516]],["title/miscellaneous/functions.html",[1012,2.034,1013,3.654]],["body/miscellaneous/functions.html",[7,0.561,11,0.019,26,0.019,27,0.019,34,3.208,974,4.76,1012,3.819,1013,4.76,1014,5.577]],["title/index.html",[7,0.299,1015,2.969,1016,2.969]],["body/index.html",[4,0.136,11,0.021,26,0.012,27,0.012,49,3.012,105,1.266,224,1.797,354,3.39,476,1.962,966,2.168,967,4.198,1017,2.864,1018,2.864,1019,4.919,1020,4.171,1021,2.864,1022,2.864,1023,2.864,1024,2.864,1025,4.171,1026,5.403,1027,2.864,1028,5.403,1029,2.864,1030,6.34,1031,2.864,1032,6.187,1033,2.864,1034,2.864,1035,2.864,1036,4.171,1037,2.864,1038,4.171,1039,2.864,1040,4.919,1041,2.864,1042,4.171,1043,2.864,1044,2.864,1045,2.864,1046,2.864,1047,2.864,1048,2.864,1049,2.864,1050,2.864,1051,2.864,1052,5.403,1053,6.34,1054,5.994,1055,2.864,1056,4.171,1057,2.864,1058,2.864,1059,2.864,1060,2.864,1061,2.864,1062,5.994,1063,4.171,1064,5.403,1065,2.864,1066,4.171,1067,2.864,1068,2.864,1069,4.171,1070,5.994,1071,5.403,1072,2.864,1073,4.171,1074,2.864,1075,2.864,1076,2.864,1077,2.864,1078,5.403,1079,2.864,1080,2.864,1081,2.864,1082,2.864,1083,4.171,1084,2.864,1085,2.864,1086,2.864,1087,2.864,1088,2.864,1089,4.171,1090,2.864,1091,2.864,1092,2.864,1093,4.171,1094,2.864,1095,2.864,1096,4.612,1097,4.171,1098,2.864,1099,2.864,1100,2.864,1101,2.864,1102,2.864,1103,2.864,1104,2.864,1105,2.864,1106,4.171,1107,2.864,1108,2.864,1109,2.864,1110,2.864,1111,4.919,1112,2.864,1113,2.864,1114,2.864,1115,2.864,1116,2.864,1117,2.864,1118,4.171,1119,2.864,1120,2.864,1121,2.864,1122,2.864,1123,2.864,1124,4.171,1125,2.864,1126,2.864,1127,2.864,1128,4.171,1129,4.171,1130,2.864,1131,2.864,1132,2.864,1133,2.864,1134,2.864,1135,2.864,1136,2.864,1137,2.864,1138,2.864,1139,2.864,1140,2.864,1141,2.444,1142,2.864,1143,2.864,1144,2.864,1145,2.864,1146,2.864,1147,2.864,1148,2.444,1149,2.864,1150,2.864]],["title/modules.html",[30,2.288]],["body/modules.html",[11,0.018,26,0.018,27,0.018,29,3.504,30,2.407,40,2.964,41,3.21,42,2.964,43,3.21,44,3.21,1096,6.043,1151,7.081,1152,7.081,1153,7.081]],["title/overview.html",[1154,4.149]],["body/overview.html",[2,1.749,11,0.022,26,0.013,27,0.013,28,1.202,29,4.841,30,1.529,31,1.529,32,1.749,33,1.749,34,1.529,35,1.749,36,1.749,37,2.773,38,2.773,39,2.773,40,3.861,41,4.322,42,3.494,43,4.235,44,4.385,45,3.058,46,3.457,47,2.458,48,1.749,49,1.633,75,1.135,81,1.273,221,2.77,222,2.464,362,2.773,408,1.633,418,2.773,419,2.773,420,2.773,421,4.029,422,3.058,730,3.721,752,2.773,754,2.773,755,2.773,846,2.773,847,2.773,914,3.721,927,2.773,928,2.773,929,2.773,939,2.773,941,2.773,942,2.773,943,4.029,1154,2.773,1155,3.25,1156,3.25,1157,3.25,1158,3.25]],["title/properties.html",[182,1.413,984,2.534]],["body/properties.html",[11,0.021,26,0.019,27,0.019,105,2.435,182,1.82,1141,4.704,1148,4.704,1159,5.512,1160,5.512,1161,5.512]],["title/miscellaneous/variables.html",[1012,2.034,1162,3.654]],["body/miscellaneous/variables.html",[7,0.287,11,0.022,15,0.864,24,1.601,26,0.012,27,0.012,70,0.994,95,0.565,120,2.643,121,2.643,163,2.406,164,1.95,193,1.45,195,1.95,222,1.053,238,1.857,239,1.34,248,3.594,256,1.533,330,3.143,334,1.95,352,1.65,409,1.95,415,2.879,458,1.786,501,1.95,505,2.155,518,3.752,519,3.38,531,1.95,532,2.84,539,4.079,541,3.143,569,1.95,602,1.95,603,2.155,604,2.43,605,2.43,609,2.155,610,2.43,612,2.155,613,3.143,614,1.786,615,2.43,616,3.544,617,2.43,618,2.43,619,2.43,620,2.43,621,2.43,626,2.155,627,2.43,628,3.544,629,2.43,630,2.43,631,3.544,632,2.155,633,3.544,634,2.43,635,2.43,636,2.43,637,2.43,638,2.43,639,2.43,640,2.43,641,2.43,642,2.43,643,2.43,644,2.43,645,2.43,646,4.184,647,2.43,648,2.43,649,3.544,650,4.184,651,2.43,652,2.43,653,2.43,654,2.43,655,2.43,656,2.43,657,2.43,658,2.43,659,2.43,660,2.43,661,3.544,662,2.43,663,2.43,664,2.43,665,2.43,666,3.544,667,2.43,668,3.544,669,2.43,670,3.544,671,3.544,672,2.43,673,2.43,674,2.43,675,2.43,676,2.43,677,2.43,678,2.43,679,2.155,680,2.43,681,2.155,682,2.43,684,2.155,691,2.844,692,2.43,897,2.155,903,2.844,904,2.43,1012,1.95,1162,2.43,1163,2.847,1164,2.847,1165,4.153,1166,2.847,1167,2.847]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":370,"title":{},"body":{"classes/CreateProductDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1160,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["0})@isnumber()@isoptional()@min(0",{"_index":513,"title":{},"body":{"classes/FindProductDto.html":{}}}],["1",{"_index":539,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["1.20.3",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["1.4.12",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":541,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["10000",{"_index":368,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["10})@isint()@min(1)@isoptional",{"_index":528,"title":{},"body":{"classes/FindUserDto.html":{}}}],["11",{"_index":1157,"title":{},"body":{"overview.html":{}}}],["11.0.1",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["11.0.4",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":362,"title":{},"body":{"classes/CreateProductDto.html":{},"overview.html":{}}}],["1})@isint()@min(1)@isoptional",{"_index":533,"title":{},"body":{"classes/FindUserDto.html":{}}}],["2.1.0",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["2.5.1",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":116,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{},"controllers/UserController.html":{}}}],["201",{"_index":104,"title":{},"body":{"classes/BaseController.html":{},"injectables/ResponseService.html":{}}}],["3",{"_index":1156,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":836,"title":{},"body":{"injectables/ResponseService.html":{}}}],["403",{"_index":837,"title":{},"body":{"injectables/ResponseService.html":{}}}],["404",{"_index":253,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["5.0.1",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":376,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["500",{"_index":838,"title":{},"body":{"injectables/ResponseService.html":{}}}],["6",{"_index":1155,"title":{},"body":{"overview.html":{}}}],["6.13.0",{"_index":1002,"title":{},"body":{"dependencies.html":{}}}],["6.4.0",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1158,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["8.10.1",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["999.99",{"_index":512,"title":{},"body":{"classes/FindProductDto.html":{}}}],["_id",{"_index":183,"title":{},"body":{"classes/BaseEntity.html":{}}}],["abstract",{"_index":161,"title":{},"body":{"classes/BaseController.html":{}}}],["accès",{"_index":818,"title":{},"body":{"injectables/ResponseService.html":{}}}],["address",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["adresse",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["ajout",{"_index":830,"title":{},"body":{"injectables/ResponseService.html":{}}}],["allowing",{"_index":1084,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":1134,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":304,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["api_secret",{"_index":306,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["apibody",{"_index":154,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":726,"title":{},"body":{"controllers/ProductController.html":{}}}],["apiconsumes('multipart/form",{"_index":747,"title":{},"body":{"controllers/ProductController.html":{}}}],["apioperation",{"_index":151,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiparam",{"_index":153,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":208,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apiproperty({description",{"_index":188,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["apipropertyoptional",{"_index":385,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apipropertyoptional({description",{"_index":350,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["apiquery",{"_index":727,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse",{"_index":152,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apiresponse({status",{"_index":704,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags",{"_index":725,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags('products",{"_index":741,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags('users",{"_index":917,"title":{},"body":{"controllers/UserController.html":{}}}],["app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["app_pipe",{"_index":945,"title":{},"body":{"modules/ValidationModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["application",{"_index":1054,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1025,"title":{},"body":{"index.html":{}}}],["appliquer",{"_index":622,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["arg",{"_index":636,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg.page",{"_index":637,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["arg0",{"_index":454,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["args",{"_index":633,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["args.find((arg",{"_index":635,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(serviceresponse.data",{"_index":664,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":1141,"title":{},"body":{"index.html":{},"properties.html":{}}}],["avec",{"_index":256,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":239,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1073,"title":{},"body":{"index.html":{}}}],["baba",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["backers",{"_index":1135,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":805,"title":{},"body":{"injectables/ResponseService.html":{}}}],["badrequest(errors",{"_index":809,"title":{},"body":{"injectables/ResponseService.html":{}}}],["base.repository.interface",{"_index":233,"title":{},"body":{"injectables/BaseService.html":{}}}],["base.service",{"_index":158,"title":{},"body":{"classes/BaseController.html":{}}}],["basecontroller",{"_index":80,"title":{"classes/BaseController.html":{}},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["basecontroller:31",{"_index":716,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:38",{"_index":909,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:44",{"_index":910,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:47",{"_index":703,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:49",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:55",{"_index":912,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:58",{"_index":717,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:60",{"_index":911,"title":{},"body":{"controllers/UserController.html":{}}}],["basecontroller:61",{"_index":715,"title":{},"body":{"controllers/ProductController.html":{}}}],["basecontroller:66",{"_index":718,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["basecontroller:88",{"_index":712,"title":{},"body":{"controllers/ProductController.html":{}}}],["based",{"_index":1068,"title":{},"body":{"index.html":{}}}],["basedir",{"_index":854,"title":{},"body":{"injectables/UploadService.html":{}}}],["baseentity",{"_index":156,"title":{"classes/BaseEntity.html":{}},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"classes/User.html":{},"coverage.html":{}}}],["baseservice",{"_index":91,"title":{"injectables/BaseService.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["baseservice:17",{"_index":781,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:28",{"_index":783,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:44",{"_index":782,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:55",{"_index":786,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:71",{"_index":784,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["baseservice:87",{"_index":785,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["batch",{"_index":341,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["binary",{"_index":387,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["binary'})@validateif(o",{"_index":357,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["board",{"_index":1127,"title":{},"body":{"index.html":{}}}],["body",{"_index":149,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["boolean",{"_index":197,"title":{},"body":{"classes/BaseEntity.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1153,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1151,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1020,"title":{},"body":{"index.html":{}}}],["cache",{"_index":769,"title":{},"body":{"modules/ProductModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":737,"title":{},"body":{"controllers/ProductController.html":{}}}],["cachemodule",{"_index":764,"title":{},"body":{"modules/ProductModule.html":{}}}],["cachemodule.register",{"_index":767,"title":{},"body":{"modules/ProductModule.html":{}}}],["calcul",{"_index":665,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["cas",{"_index":659,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":242,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ce",{"_index":657,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["chambres",{"_index":291,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["channel",{"_index":1099,"title":{},"body":{"index.html":{}}}],["check",{"_index":1062,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":81,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["clicks",{"_index":1083,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1067,"title":{},"body":{"index.html":{}}}],["cloud_name",{"_index":302,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary",{"_index":296,"title":{},"body":{"injectables/CloudinaryService.html":{},"dependencies.html":{}}}],["cloudinary.config",{"_index":301,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary.uploader.upload_stream",{"_index":311,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["cloudinary/cloudinary.service",{"_index":849,"title":{},"body":{"modules/UploadModule.html":{}}}],["cloudinaryservice",{"_index":45,"title":{"injectables/CloudinaryService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CloudinaryService.html":{},"modules/UploadModule.html":{},"coverage.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":752,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_exports",{"_index":754,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_imports",{"_index":753,"title":{},"body":{"modules/ProductModule.html":{}}}],["cluster_productmodule_providers",{"_index":755,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_uploadmodule",{"_index":846,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_uploadmodule_exports",{"_index":847,"title":{},"body":{"modules/UploadModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":927,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":929,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":928,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_validationmodule",{"_index":939,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_exports",{"_index":941,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["cluster_validationmodule_imports",{"_index":940,"title":{},"body":{"modules/ValidationModule.html":{}}}],["cluster_validationmodule_providers",{"_index":942,"title":{},"body":{"modules/ValidationModule.html":{},"overview.html":{}}}],["come",{"_index":1090,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":1047,"title":{},"body":{"index.html":{}}}],["config",{"_index":562,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{}}}],["configservice.get('mongodb_uri",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":413,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["connection",{"_index":436,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["connexion",{"_index":571,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["conserver",{"_index":660,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["console.error('erreur",{"_index":570,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('connexion",{"_index":568,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('creating",{"_index":922,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('déconnexion",{"_index":573,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["console.log('finding",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('mongodb",{"_index":558,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["console.log('productcontroller",{"_index":743,"title":{},"body":{"controllers/ProductController.html":{}}}],["console.log('usercontroller",{"_index":919,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":238,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":89,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["constructor(baseservice",{"_index":90,"title":{},"body":{"classes/BaseController.html":{}}}],["constructor(config",{"_index":560,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["constructor(configservice",{"_index":554,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["constructor(connection",{"_index":434,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["constructor(exceptionservice",{"_index":954,"title":{},"body":{"injectables/ValidationService.html":{}}}],["constructor(httpresponseservice",{"_index":449,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["constructor(model",{"_index":576,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"injectables/ValidationService.html":{}}}],["constructor(repository",{"_index":219,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["contenu",{"_index":335,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('products",{"_index":740,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller('users",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["courses",{"_index":1105,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":966,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":83,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":165,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["create(createdto",{"_index":97,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(entity",{"_index":544,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["createbadrequestexception",{"_index":443,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createbadrequestexception(arg0",{"_index":452,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["created",{"_index":107,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"injectables/ResponseService.html":{}}}],["created(data",{"_index":812,"title":{},"body":{"injectables/ResponseService.html":{}}}],["created.save",{"_index":588,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["createdat",{"_index":184,"title":{},"body":{"classes/BaseEntity.html":{}}}],["createdto",{"_index":109,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createdto.image",{"_index":794,"title":{},"body":{"injectables/ProductService.html":{}}}],["createforbiddenexception",{"_index":444,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createforbiddenexception(message",{"_index":456,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception",{"_index":445,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createinternalserverexception(message",{"_index":460,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception",{"_index":446,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createnotfoundexception(message",{"_index":462,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createparamdecorator",{"_index":604,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["createproductdto",{"_index":344,"title":{"classes/CreateProductDto.html":{}},"body":{"classes/CreateProductDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":390,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["createvalidationexception",{"_index":447,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createvalidationexception(errors",{"_index":464,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["createwithimage",{"_index":774,"title":{},"body":{"injectables/ProductService.html":{}}}],["createwithimage(createdto",{"_index":777,"title":{},"body":{"injectables/ProductService.html":{}}}],["crypto",{"_index":872,"title":{},"body":{"injectables/UploadService.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":883,"title":{},"body":{"injectables/UploadService.html":{}}}],["création",{"_index":213,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["création'})@prop({default",{"_index":194,"title":{},"body":{"classes/BaseEntity.html":{}}}],["créer",{"_index":699,"title":{},"body":{"controllers/ProductController.html":{}}}],["créée",{"_index":815,"title":{},"body":{"injectables/ResponseService.html":{}}}],["ctx",{"_index":615,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":617,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d''upload",{"_index":701,"title":{},"body":{"controllers/ProductController.html":{}}}],["d'origine",{"_index":662,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["d'upload",{"_index":318,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["d'éléments",{"_index":527,"title":{},"body":{"classes/FindUserDto.html":{}}}],["data",{"_index":163,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":698,"title":{},"body":{"controllers/ProductController.html":{}}}],["data'})@apiresponse({status",{"_index":103,"title":{},"body":{"classes/BaseController.html":{}}}],["database.service",{"_index":424,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database_connection",{"_index":415,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":407,"title":{"interfaces/DatabaseConfig.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{},"coverage.html":{}}}],["databaseconnection",{"_index":412,"title":{"interfaces/DatabaseConnection.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["databasemodule",{"_index":40,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseservice",{"_index":421,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/BaseEntity.html":{}}}],["date().toisostring",{"_index":829,"title":{},"body":{"injectables/ResponseService.html":{}}}],["date.now",{"_index":214,"title":{},"body":{"classes/BaseEntity.html":{}}}],["de",{"_index":193,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["deeper",{"_index":1101,"title":{},"body":{"index.html":{}}}],["default",{"_index":120,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["delete",{"_index":132,"title":{},"body":{"classes/BaseController.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":175,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":131,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["delete(':id/soft",{"_index":178,"title":{},"body":{"classes/BaseController.html":{}}}],["delete(':id/soft')@apioperation({summary",{"_index":137,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":546,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["deleted",{"_index":134,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1052,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1072,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1063,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1082,"title":{},"body":{"index.html":{}}}],["depuis",{"_index":611,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["dernière",{"_index":203,"title":{},"body":{"classes/BaseEntity.html":{}}}],["des",{"_index":264,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{}}}],["description",{"_index":105,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":628,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["descriptor.value",{"_index":631,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1033,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1113,"title":{},"body":{"index.html":{}}}],["dirpath",{"_index":876,"title":{},"body":{"injectables/UploadService.html":{}}}],["disable",{"_index":473,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["disconnect",{"_index":414,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConnection.html":{}}}],["discord",{"_index":1098,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1100,"title":{},"body":{"index.html":{}}}],["document",{"_index":209,"title":{},"body":{"classes/BaseEntity.html":{}}}],["documentation",{"_index":967,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":537,"title":{},"body":{"classes/FindUserDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":524,"title":{},"body":{"classes/FindUserDto.html":{}}}],["données",{"_index":835,"title":{},"body":{"injectables/ResponseService.html":{}}}],["dto/create",{"_index":732,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/find",{"_index":735,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["dto/update",{"_index":734,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["du",{"_index":352,"title":{},"body":{"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"miscellaneous/variables.html":{}}}],["décorateur",{"_index":607,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["définition",{"_index":606,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["e2e",{"_index":1043,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1021,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1060,"title":{},"body":{"index.html":{}}}],["en",{"_index":374,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["enableimplicitconversion",{"_index":962,"title":{},"body":{"injectables/ValidationService.html":{}}}],["ensure",{"_index":1058,"title":{},"body":{"index.html":{}}}],["ensuredirectory",{"_index":855,"title":{},"body":{"injectables/UploadService.html":{}}}],["ensuredirectory(folder",{"_index":859,"title":{},"body":{"injectables/UploadService.html":{}}}],["enterprise",{"_index":1117,"title":{},"body":{"index.html":{}}}],["entit",{"_index":255,"title":{},"body":{"injectables/BaseService.html":{}}}],["entities",{"_index":118,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entities'})@apiresponse({status",{"_index":115,"title":{},"body":{"classes/BaseController.html":{}}}],["entities/product.entity",{"_index":729,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{}}}],["entities/user.entity",{"_index":913,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":102,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity'})@apibody({description",{"_index":101,"title":{},"body":{"classes/BaseController.html":{}}}],["entity'})@apiparam({name",{"_index":133,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["entity/base.entity",{"_index":157,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["entités",{"_index":265,"title":{},"body":{"injectables/BaseService.html":{}}}],["erreur",{"_index":246,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["error",{"_index":243,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error(\"résultat",{"_index":317,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error('method",{"_index":480,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["error(`échec",{"_index":342,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["error.children",{"_index":498,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.children.length",{"_index":499,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.constraints",{"_index":495,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["error.message",{"_index":249,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["error.status",{"_index":252,"title":{},"body":{"injectables/BaseService.html":{}}}],["errors",{"_index":467,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/ValidationService.html":{}}}],["errors.foreach((error",{"_index":494,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["eslint",{"_index":472,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["eslint/no",{"_index":477,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["est",{"_index":653,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["et",{"_index":652,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":354,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"index.html":{}}}],["exception/exception.service",{"_index":948,"title":{},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exception/response/response.service",{"_index":950,"title":{},"body":{"modules/ValidationModule.html":{}}}],["exceptionfactory",{"_index":963,"title":{},"body":{"injectables/ValidationService.html":{}}}],["exceptionservice",{"_index":221,"title":{"injectables/ExceptionService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["exec",{"_index":591,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["executioncontext",{"_index":605,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["existe",{"_index":651,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["experience",{"_index":1103,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["express",{"_index":724,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":286,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["ext",{"_index":880,"title":{},"body":{"injectables/UploadService.html":{}}}],["extends",{"_index":212,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["extraire",{"_index":608,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["exécuter",{"_index":640,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":201,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ValidationService.html":{}}}],["fast",{"_index":1076,"title":{},"body":{"index.html":{}}}],["features",{"_index":1086,"title":{},"body":{"index.html":{}}}],["few",{"_index":1078,"title":{},"body":{"index.html":{}}}],["fichier",{"_index":331,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":891,"title":{},"body":{"injectables/UploadService.html":{}}}],["file.buffer?.length",{"_index":329,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["fileinterceptor",{"_index":722,"title":{},"body":{"controllers/ProductController.html":{}}}],["filename",{"_index":886,"title":{},"body":{"injectables/UploadService.html":{}}}],["filepath",{"_index":888,"title":{},"body":{"injectables/UploadService.html":{}}}],["files",{"_index":289,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["files.foreach((file",{"_index":328,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["files.map((file",{"_index":338,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["files?.length",{"_index":327,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["filestorageservice",{"_index":297,"title":{"interfaces/FileStorageService.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["fileuploadresult",{"_index":298,"title":{"interfaces/FileUploadResult.html":{}},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{},"coverage.html":{}}}],["filter",{"_index":122,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["filterquery",{"_index":226,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["filtrer",{"_index":508,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["find",{"_index":114,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["findall",{"_index":84,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@query",{"_index":170,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findall(filter",{"_index":111,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findbyid",{"_index":218,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":228,"title":{},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["findbyidandupdate(id",{"_index":595,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["findone",{"_index":85,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findone(@param('id",{"_index":168,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":123,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["findproductdto",{"_index":506,"title":{"classes/FindProductDto.html":{}},"body":{"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["finduserdto",{"_index":516,"title":{"classes/FindUserDto.html":{}},"body":{"classes/FindUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["firstname",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["focus",{"_index":1085,"title":{},"body":{"index.html":{}}}],["folder",{"_index":287,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["follow",{"_index":1121,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":806,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidden(message",{"_index":816,"title":{},"body":{"injectables/ResponseService.html":{}}}],["forbidnonwhitelisted",{"_index":960,"title":{},"body":{"injectables/ValidationService.html":{}}}],["format",{"_index":356,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["formaterrors",{"_index":448,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["formaterrors(errors",{"_index":468,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["found",{"_index":128,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["framework",{"_index":1019,"title":{},"body":{"index.html":{}}}],["fs",{"_index":870,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.mkdir(dirpath",{"_index":878,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs.writefile(filepath",{"_index":890,"title":{},"body":{"injectables/UploadService.html":{}}}],["fs/promises",{"_index":871,"title":{},"body":{"injectables/UploadService.html":{}}}],["full",{"_index":1116,"title":{},"body":{"index.html":{}}}],["function",{"_index":632,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1013,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1081,"title":{},"body":{"index.html":{}}}],["generatefilename",{"_index":856,"title":{},"body":{"injectables/UploadService.html":{}}}],["generatefilename(originalname",{"_index":861,"title":{},"body":{"injectables/UploadService.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":124,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["get()@apioperation({summary",{"_index":113,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["getconnectionconfig",{"_index":410,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/MongoConfig.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmodeltoken",{"_index":760,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["getmodeltoken(product.name",{"_index":772,"title":{},"body":{"modules/ProductModule.html":{}}}],["getmodeltoken(user.name",{"_index":935,"title":{},"body":{"modules/UserModule.html":{}}}],["getting",{"_index":1015,"title":{"index.html":{}},"body":{}}],["graph",{"_index":1108,"title":{},"body":{"index.html":{}}}],["group",{"_index":1150,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1131,"title":{},"body":{"index.html":{}}}],["hands",{"_index":1102,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1091,"title":{},"body":{"index.html":{}}}],["hash",{"_index":882,"title":{},"body":{"injectables/UploadService.html":{}}}],["hash}${ext",{"_index":884,"title":{},"body":{"injectables/UploadService.html":{}}}],["hello",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1106,"title":{},"body":{"index.html":{}}}],["here",{"_index":1139,"title":{},"body":{"index.html":{}}}],["hotel",{"_index":290,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["httpexception",{"_index":459,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpexception(response",{"_index":486,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpresponseservice",{"_index":451,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["https://example.com/iphone13.jpg",{"_index":355,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["https://nestjs.com",{"_index":1145,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":470,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.bad_request",{"_index":487,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.forbidden",{"_index":489,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.internal_server_error",{"_index":493,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["httpstatus.not_found",{"_index":491,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["ibaserepository",{"_index":220,"title":{"interfaces/IBaseRepository.html":{}},"body":{"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["id",{"_index":126,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id'})@apibody({description",{"_index":143,"title":{},"body":{"classes/BaseController.html":{}}}],["id'})@apiparam({name",{"_index":125,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["id'})@apiresponse({status",{"_index":127,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["identifier",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":347,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["images",{"_index":343,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["implemented",{"_index":481,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{}}}],["implements",{"_index":300,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/UploadService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicateur",{"_index":198,"title":{},"body":{"classes/BaseEntity.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{}}}],["information",{"_index":1065,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1088,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":702,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["initialized",{"_index":744,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["inject",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/DatabaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject('product_repository",{"_index":789,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('uploadservice",{"_index":790,"title":{},"body":{"injectables/ProductService.html":{}}}],["inject('user_repository",{"_index":938,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(database_connection",{"_index":439,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"overview.html":{}}}],["install",{"_index":1080,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1031,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1109,"title":{},"body":{"index.html":{}}}],["interdit",{"_index":819,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interface",{"_index":406,"title":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{}},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"coverage.html":{}}}],["interfaces",{"_index":408,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["interfaces/database.interface",{"_index":428,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["interfaces/upload.interface",{"_index":299,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["internalerror",{"_index":807,"title":{},"body":{"injectables/ResponseService.html":{}}}],["internalerror(message",{"_index":820,"title":{},"body":{"injectables/ResponseService.html":{}}}],["interne",{"_index":822,"title":{},"body":{"injectables/ResponseService.html":{}}}],["invalide",{"_index":811,"title":{},"body":{"injectables/ResponseService.html":{}}}],["iphone",{"_index":361,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["iphone'})@isstring()@isoptional",{"_index":510,"title":{},"body":{"classes/FindProductDto.html":{}}}],["isdeleted",{"_index":185,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongooseRepository.html":{}}}],["isglobal",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":535,"title":{},"body":{"classes/FindUserDto.html":{}}}],["isnotempty",{"_index":380,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":379,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["isnumberstring",{"_index":601,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isoptional",{"_index":358,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{}}}],["isoptional()@isnumberstring",{"_index":598,"title":{},"body":{"classes/PaginationDto.html":{}}}],["issa",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":378,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["isurl",{"_index":382,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["items",{"_index":663,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.length",{"_index":667,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["items.slice(startindex",{"_index":672,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["job",{"_index":1124,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1126,"title":{},"body":{"index.html":{}}}],["john",{"_index":536,"title":{},"body":{"classes/FindUserDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":522,"title":{},"body":{"classes/FindUserDto.html":{}}}],["join",{"_index":1137,"title":{},"body":{"index.html":{}}}],["jour",{"_index":269,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["json.stringify(error",{"_index":314,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["kamil",{"_index":1142,"title":{},"body":{"index.html":{}}}],["key",{"_index":1055,"title":{},"body":{"index.html":{}}}],["l'enregistrement",{"_index":895,"title":{},"body":{"injectables/UploadService.html":{}}}],["l'id",{"_index":257,"title":{},"body":{"injectables/BaseService.html":{}}}],["l'image",{"_index":351,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["l'index",{"_index":332,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["l'upload",{"_index":313,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["l'utilisateur",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["la",{"_index":248,"title":{},"body":{"injectables/BaseService.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ProductService.html":{},"miscellaneous/variables.html":{}}}],["lastname",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/User.html":{}}}],["lastpage",{"_index":668,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["le",{"_index":330,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["learn",{"_index":1094,"title":{},"body":{"index.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["les",{"_index":609,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":1148,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1129,"title":{},"body":{"index.html":{}}}],["limit",{"_index":518,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":475,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["linkedin",{"_index":1123,"title":{},"body":{"index.html":{}}}],["list",{"_index":117,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["liste",{"_index":705,"title":{},"body":{"controllers/ProductController.html":{}}}],["local",{"_index":852,"title":{},"body":{"modules/UploadModule.html":{}}}],["logger",{"_index":281,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["logger(cloudinaryservice.name",{"_index":294,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["logger(uploadservice.name",{"_index":868,"title":{},"body":{"injectables/UploadService.html":{}}}],["logique",{"_index":216,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/PaginationParams.html":{}}}],["logique'})@prop({default",{"_index":200,"title":{},"body":{"classes/BaseEntity.html":{}}}],["logiquement",{"_index":278,"title":{},"body":{"injectables/BaseService.html":{}}}],["looking",{"_index":1066,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1119,"title":{},"body":{"index.html":{}}}],["lors",{"_index":247,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["makes",{"_index":1074,"title":{},"body":{"index.html":{}}}],["manager",{"_index":739,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["managing",{"_index":1087,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":669,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":1070,"title":{},"body":{"index.html":{}}}],["message",{"_index":458,"title":{},"body":{"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":482,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(...this.formaterrors(error.children",{"_index":500,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["messages.push(message",{"_index":497,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["meta",{"_index":682,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":381,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/Product.html":{}}}],["min(0",{"_index":386,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["min(1",{"_index":540,"title":{},"body":{"classes/FindUserDto.html":{}}}],["minimum",{"_index":369,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["miscellaneous",{"_index":1012,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mise",{"_index":268,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["mit",{"_index":1128,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1036,"title":{},"body":{"index.html":{}}}],["model",{"_index":577,"title":{},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["modification",{"_index":215,"title":{},"body":{"classes/BaseEntity.html":{}}}],["modification'})@prop({default",{"_index":204,"title":{},"body":{"classes/BaseEntity.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["module/product/product.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["module/user/user.module.ts",{"_index":931,"title":{},"body":{"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo.config",{"_index":565,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoconfig",{"_index":422,"title":{"injectables/MongoConfig.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"coverage.html":{},"overview.html":{}}}],["mongoconnection",{"_index":426,"title":{"injectables/MongoConnection.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/MongoConnection.html":{},"coverage.html":{}}}],["mongodb",{"_index":189,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/MongoConnection.html":{},"dependencies.html":{}}}],["mongodb/mongo.config",{"_index":425,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongodb/mongo.connection",{"_index":427,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mongoose",{"_index":211,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["mongoose.connect(uri",{"_index":567,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoose.disconnect",{"_index":572,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["mongoosemodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":765,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooserepository",{"_index":574,"title":{"injectables/MongooseRepository.html":{}},"body":{"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["mongooserepository(model",{"_index":771,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["more",{"_index":1064,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1143,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":641,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["méthodes",{"_index":831,"title":{},"body":{"injectables/ResponseService.html":{}}}],["même",{"_index":676,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["n'a",{"_index":333,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["n'est",{"_index":658,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":94,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ndiaye",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ne",{"_index":833,"title":{},"body":{"injectables/ResponseService.html":{}}}],["need",{"_index":1114,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1026,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1147,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1053,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":738,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/MongoConfig.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":946,"title":{},"body":{"modules/ValidationModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":723,"title":{},"body":{"controllers/ProductController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":155,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["new",{"_index":100,"title":{},"body":{"classes/BaseController.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"modules/ProductModule.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["next",{"_index":474,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["node.js",{"_index":1018,"title":{},"body":{"index.html":{}}}],["nom",{"_index":360,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["nombre",{"_index":526,"title":{},"body":{"classes/FindUserDto.html":{}}}],["non",{"_index":258,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["notfound",{"_index":808,"title":{},"body":{"injectables/ResponseService.html":{}}}],["notfound(message",{"_index":824,"title":{},"body":{"injectables/ResponseService.html":{}}}],["npm",{"_index":1030,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1046,"title":{},"body":{"index.html":{}}}],["number",{"_index":366,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"interfaces/Response.html":{}}}],["number(request.query.limit",{"_index":621,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number(request.query.page",{"_index":619,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["number})@apiquery({name",{"_index":709,"title":{},"body":{"controllers/ProductController.html":{}}}],["number})@get",{"_index":711,"title":{},"body":{"controllers/ProductController.html":{}}}],["numéro",{"_index":530,"title":{},"body":{"classes/FindUserDto.html":{}}}],["o.image",{"_index":389,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["object",{"_index":112,"title":{},"body":{"classes/BaseController.html":{}}}],["object.values(error.constraints).foreach((message",{"_index":496,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["obtenir",{"_index":643,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["offer",{"_index":1125,"title":{},"body":{"index.html":{}}}],["official",{"_index":1071,"title":{},"body":{"index.html":{}}}],["onmoduledestroy",{"_index":432,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["onmoduleinit",{"_index":433,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["open",{"_index":1130,"title":{},"body":{"index.html":{}}}],["option",{"_index":700,"title":{},"body":{"controllers/ProductController.html":{}}}],["optional",{"_index":96,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["options",{"_index":957,"title":{},"body":{"injectables/ValidationService.html":{}}}],["opération",{"_index":681,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["originale",{"_index":642,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod",{"_index":630,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalmethod.apply(this",{"_index":647,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":863,"title":{},"body":{"injectables/UploadService.html":{}}}],["ouakam",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1154,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":1048,"title":{},"body":{"index.html":{}}}],["package",{"_index":984,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":519,"title":{},"body":{"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["paginateditems",{"_index":671,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paginateparams",{"_index":613,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":532,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginationdto",{"_index":596,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["paginationparams",{"_index":602,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paginée",{"_index":675,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["par",{"_index":509,"title":{},"body":{"classes/FindProductDto.html":{},"classes/FindUserDto.html":{}}}],["param",{"_index":148,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":173,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["paramètres",{"_index":610,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["paris",{"_index":538,"title":{},"body":{"classes/FindUserDto.html":{}}}],["paris'})@isstring()@isoptional",{"_index":520,"title":{},"body":{"classes/FindUserDto.html":{}}}],["parser",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":1115,"title":{},"body":{"index.html":{}}}],["partial",{"_index":98,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":841,"title":{},"body":{"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createproductdto",{"_index":840,"title":{},"body":{"classes/UpdateProductDto.html":{}}}],["partialtype(createuserdto",{"_index":844,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pas",{"_index":334,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":800,"title":{},"body":{"interfaces/Response.html":{},"injectables/UploadService.html":{}}}],["path.extname(originalname",{"_index":881,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(dirpath",{"_index":889,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(folder",{"_index":893,"title":{},"body":{"injectables/UploadService.html":{}}}],["path.join(this.basedir",{"_index":877,"title":{},"body":{"injectables/UploadService.html":{}}}],["platform",{"_index":1069,"title":{},"body":{"index.html":{}}}],["please",{"_index":1097,"title":{},"body":{"index.html":{}}}],["possible",{"_index":1061,"title":{},"body":{"index.html":{}}}],["post",{"_index":146,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["post()@apioperation({summary",{"_index":99,"title":{},"body":{"classes/BaseController.html":{}}}],["post()@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":697,"title":{},"body":{"controllers/ProductController.html":{}}}],["pour",{"_index":531,"title":{},"body":{"classes/FindUserDto.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":695,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":348,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["private",{"_index":280,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["prix",{"_index":367,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["process.env.cloudinary_api_key",{"_index":305,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_api_secret",{"_index":307,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.cloudinary_cloud_name",{"_index":303,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["process.env.storage_service",{"_index":851,"title":{},"body":{"modules/UploadModule.html":{}}}],["process.env.upload_dir",{"_index":874,"title":{},"body":{"injectables/UploadService.html":{}}}],["product",{"_index":683,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{}}}],["product.controller",{"_index":758,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.dto",{"_index":733,"title":{},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{}}}],["product.dto.ts",{"_index":346,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["product.dto.ts:12",{"_index":511,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:20",{"_index":365,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:22",{"_index":514,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:31",{"_index":372,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:32",{"_index":515,"title":{},"body":{"classes/FindProductDto.html":{}}}],["product.dto.ts:42",{"_index":377,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.dto.ts:53",{"_index":359,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["product.name",{"_index":766,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.service",{"_index":731,"title":{},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{}}}],["product/product.controller.ts",{"_index":719,"title":{},"body":{"controllers/ProductController.html":{}}}],["product/product.module.ts",{"_index":757,"title":{},"body":{"modules/ProductModule.html":{}}}],["product_repository",{"_index":770,"title":{},"body":{"modules/ProductModule.html":{}}}],["productcontroller",{"_index":693,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["production",{"_index":1038,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":41,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["products",{"_index":696,"title":{},"body":{"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["productschema",{"_index":691,"title":{},"body":{"classes/Product.html":{},"modules/ProductModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":730,"title":{"injectables/ProductService.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["productservice).createwithimage",{"_index":749,"title":{},"body":{"controllers/ProductController.html":{}}}],["productservice).updatewithimage",{"_index":750,"title":{},"body":{"controllers/ProductController.html":{}}}],["produit",{"_index":353,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["produits",{"_index":706,"title":{},"body":{"controllers/ProductController.html":{}}}],["progressive",{"_index":1017,"title":{},"body":{"index.html":{}}}],["project",{"_index":1028,"title":{},"body":{"index.html":{}}}],["promise",{"_index":110,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":308,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["promise.all",{"_index":337,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["prop",{"_index":206,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["prop({required",{"_index":686,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["properties",{"_index":182,"title":{"properties.html":{}},"body":{"classes/BaseEntity.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"interfaces/Response.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":629,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["propertykey",{"_index":627,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["protected",{"_index":236,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["provide",{"_index":429,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["prénom",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{}}}],["put",{"_index":147,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":172,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["put(':id')@apioperation({summary",{"_index":142,"title":{},"body":{"classes/BaseController.html":{}}}],["put(':id')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":714,"title":{},"body":{"controllers/ProductController.html":{}}}],["quantit",{"_index":373,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{}}}],["quantity",{"_index":349,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/FindProductDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{}}}],["que",{"_index":649,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["query",{"_index":150,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["questions",{"_index":1095,"title":{},"body":{"index.html":{}}}],["qui",{"_index":832,"title":{},"body":{"injectables/ResponseService.html":{}}}],["read",{"_index":1138,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{}}}],["ready",{"_index":1051,"title":{},"body":{"index.html":{}}}],["real",{"_index":1110,"title":{},"body":{"index.html":{}}}],["recherche",{"_index":260,"title":{},"body":{"injectables/BaseService.html":{}}}],["recursive",{"_index":879,"title":{},"body":{"injectables/UploadService.html":{}}}],["reflect",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":768,"title":{},"body":{"modules/ProductModule.html":{}}}],["reject",{"_index":309,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(error",{"_index":315,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["reject(new",{"_index":316,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["relativepath",{"_index":892,"title":{},"body":{"injectables/UploadService.html":{}}}],["remove",{"_index":86,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":176,"title":{},"body":{"classes/BaseController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":130,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":224,"title":{},"body":{"injectables/BaseService.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["request",{"_index":616,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.limit",{"_index":620,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request.query.page",{"_index":618,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.limit",{"_index":639,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["request?.page",{"_index":638,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":363,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"classes/User.html":{}}}],["requiring",{"_index":1077,"title":{},"body":{"index.html":{}}}],["requête",{"_index":612,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}],["resolve",{"_index":323,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["resources",{"_index":1089,"title":{},"body":{"index.html":{}}}],["response",{"_index":159,"title":{"interfaces/Response.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"coverage.html":{}}}],["response.interface",{"_index":828,"title":{},"body":{"injectables/ResponseService.html":{}}}],["response/response.service",{"_index":471,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["responseservice",{"_index":222,"title":{"injectables/ResponseService.html":{}},"body":{"injectables/BaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/PaginationParams.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ressource",{"_index":814,"title":{},"body":{"injectables/ResponseService.html":{}}}],["result",{"_index":270,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{}}}],["result.public_id",{"_index":322,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["result.secure_url",{"_index":325,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retournent",{"_index":834,"title":{},"body":{"injectables/ResponseService.html":{}}}],["retourner",{"_index":673,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["retournés",{"_index":625,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConfig.html":{},"injectables/MongooseRepository.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":1032,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1059,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["récupération",{"_index":263,"title":{},"body":{"injectables/BaseService.html":{}}}],["récupérer",{"_index":634,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["récupérée",{"_index":707,"title":{},"body":{"controllers/ProductController.html":{}}}],["réponse",{"_index":674,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultat",{"_index":644,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["résultats",{"_index":624,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["réussie",{"_index":569,"title":{},"body":{"injectables/MongoConnection.html":{},"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":1022,"title":{},"body":{"index.html":{}}}],["schema",{"_index":207,"title":{},"body":{"classes/BaseEntity.html":{},"classes/Product.html":{},"modules/ProductModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":690,"title":{},"body":{"classes/Product.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(product",{"_index":692,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":904,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":1023,"title":{},"body":{"index.html":{}}}],["serveur",{"_index":823,"title":{},"body":{"injectables/ResponseService.html":{}}}],["service",{"_index":645,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse",{"_index":646,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.data",{"_index":650,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.message",{"_index":680,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["serviceresponse.status",{"_index":678,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["services/base/entity/base.entity",{"_index":901,"title":{},"body":{"classes/User.html":{}}}],["services/base/methode/mongoose.repository",{"_index":759,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["services/database/database.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/cloudinary/cloudinary.service",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["services/upload/upload.service",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":1029,"title":{},"body":{"index.html":{}}}],["si",{"_index":656,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["side",{"_index":1024,"title":{},"body":{"index.html":{}}}],["simple",{"_index":1079,"title":{},"body":{"index.html":{}}}],["soft",{"_index":138,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["softdelete",{"_index":543,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdelete(id",{"_index":550,"title":{},"body":{"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{}}}],["softdeleted",{"_index":275,"title":{},"body":{"injectables/BaseService.html":{}}}],["softremove",{"_index":87,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["softremove(@param('id",{"_index":179,"title":{},"body":{"classes/BaseController.html":{}}}],["softremove(id",{"_index":136,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"modules/DatabaseModule.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"classes/UpdateProductDto.html":{},"classes/UpdateUserDto.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"index.html":{}}}],["sponsors",{"_index":1133,"title":{},"body":{"index.html":{}}}],["src/.../database.interface.ts",{"_index":1163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1014,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../pagination.decorator.ts",{"_index":1165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../product.entity.ts",{"_index":1166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../upload.interface.ts",{"_index":1164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts",{"_index":597,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:10",{"_index":599,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/dto/pagination.dto.ts:6",{"_index":600,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/decorator/pagination/pagination.decorator",{"_index":736,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/decorator/pagination/pagination.decorator.ts",{"_index":603,"title":{},"body":{"interfaces/PaginationParams.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":974,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/module/product/dto/create",{"_index":345,"title":{},"body":{"classes/CreateProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/find",{"_index":507,"title":{},"body":{"classes/FindProductDto.html":{},"coverage.html":{}}}],["src/module/product/dto/update",{"_index":839,"title":{},"body":{"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["src/module/product/entities/product.entity.ts",{"_index":684,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/product/entities/product.entity.ts:11",{"_index":688,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:14",{"_index":689,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:17",{"_index":685,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/entities/product.entity.ts:8",{"_index":687,"title":{},"body":{"classes/Product.html":{}}}],["src/module/product/product.controller.ts",{"_index":694,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/module/product/product.module.ts",{"_index":756,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/module/product/product.service.ts",{"_index":773,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/module/product/product.service.ts:11",{"_index":776,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:23",{"_index":778,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/product/product.service.ts:43",{"_index":780,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/module/user/dto/create",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/find",{"_index":517,"title":{},"body":{"classes/FindUserDto.html":{},"coverage.html":{}}}],["src/module/user/dto/update",{"_index":843,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/module/user/entities/user.entity.ts",{"_index":897,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/module/user/entities/user.entity.ts:11",{"_index":900,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:14",{"_index":898,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/entities/user.entity.ts:8",{"_index":899,"title":{},"body":{"classes/User.html":{}}}],["src/module/user/user.controller.ts",{"_index":906,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/module/user/user.module.ts",{"_index":930,"title":{},"body":{"modules/UserModule.html":{}}}],["src/module/user/user.service.ts",{"_index":936,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/module/user/user.service.ts:10",{"_index":937,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/base/entity/base.entity",{"_index":586,"title":{},"body":{"injectables/MongooseRepository.html":{},"classes/Product.html":{}}}],["src/services/base/entity/base.entity.ts",{"_index":181,"title":{},"body":{"classes/BaseEntity.html":{},"coverage.html":{}}}],["src/services/base/entity/base.entity.ts:12",{"_index":196,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:16",{"_index":205,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:20",{"_index":202,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/entity/base.entity.ts:8",{"_index":191,"title":{},"body":{"classes/BaseEntity.html":{}}}],["src/services/base/methode/base.controller",{"_index":728,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["src/services/base/methode/base.controller.ts",{"_index":82,"title":{},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["src/services/base/methode/base.controller.ts:16",{"_index":92,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:23",{"_index":108,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:31",{"_index":129,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:38",{"_index":119,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:47",{"_index":145,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:58",{"_index":135,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.controller.ts:66",{"_index":139,"title":{},"body":{"classes/BaseController.html":{}}}],["src/services/base/methode/base.repository.interface",{"_index":585,"title":{},"body":{"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.repository.interface.ts",{"_index":542,"title":{},"body":{"interfaces/IBaseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/base.repository.interface.ts:10",{"_index":551,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:5",{"_index":545,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:6",{"_index":549,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:7",{"_index":548,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:8",{"_index":552,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.repository.interface.ts:9",{"_index":547,"title":{},"body":{"interfaces/IBaseRepository.html":{}}}],["src/services/base/methode/base.service",{"_index":787,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/services/base/methode/base.service.ts",{"_index":217,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/services/base/methode/base.service.ts:10",{"_index":223,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:17",{"_index":225,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:28",{"_index":229,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:44",{"_index":227,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:55",{"_index":232,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:71",{"_index":230,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/base.service.ts:87",{"_index":231,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/services/base/methode/mongoose.repository.ts",{"_index":575,"title":{},"body":{"injectables/MongooseRepository.html":{},"coverage.html":{}}}],["src/services/base/methode/mongoose.repository.ts:10",{"_index":578,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:13",{"_index":579,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:18",{"_index":582,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:22",{"_index":581,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:26",{"_index":584,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:30",{"_index":580,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/base/methode/mongoose.repository.ts:35",{"_index":583,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["src/services/database/database.module",{"_index":949,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/services/database/database.module.ts",{"_index":423,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/services/database/database.service.ts",{"_index":431,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["src/services/database/database.service.ts:13",{"_index":435,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:18",{"_index":438,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/database.service.ts:22",{"_index":437,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["src/services/database/interfaces/database.interface.ts",{"_index":409,"title":{},"body":{"interfaces/DatabaseConfig.html":{},"interfaces/DatabaseConnection.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/database/interfaces/database.interface.ts:2",{"_index":411,"title":{},"body":{"interfaces/DatabaseConfig.html":{}}}],["src/services/database/interfaces/database.interface.ts:6",{"_index":416,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/interfaces/database.interface.ts:7",{"_index":417,"title":{},"body":{"interfaces/DatabaseConnection.html":{}}}],["src/services/database/mongodb/mongo.config.ts",{"_index":553,"title":{},"body":{"injectables/MongoConfig.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.config.ts:5",{"_index":555,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.config.ts:8",{"_index":556,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["src/services/database/mongodb/mongo.connection.ts",{"_index":559,"title":{},"body":{"injectables/MongoConnection.html":{},"coverage.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:11",{"_index":563,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:22",{"_index":564,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/database/mongodb/mongo.connection.ts:8",{"_index":561,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts",{"_index":279,"title":{},"body":{"injectables/CloudinaryService.html":{},"coverage.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:11",{"_index":284,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:21",{"_index":293,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/cloudinary/cloudinary.service.ts:50",{"_index":288,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["src/services/upload/interfaces/upload.interface",{"_index":788,"title":{},"body":{"injectables/ProductService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts",{"_index":501,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:12",{"_index":502,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/interfaces/upload.interface.ts:8",{"_index":504,"title":{},"body":{"interfaces/FileStorageService.html":{}}}],["src/services/upload/upload.module",{"_index":763,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/services/upload/upload.module.ts",{"_index":848,"title":{},"body":{"modules/UploadModule.html":{}}}],["src/services/upload/upload.service.ts",{"_index":853,"title":{},"body":{"injectables/UploadService.html":{},"coverage.html":{}}}],["src/services/upload/upload.service.ts:12",{"_index":865,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:15",{"_index":869,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:16",{"_index":858,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:22",{"_index":860,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:28",{"_index":862,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:34",{"_index":867,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/services/upload/upload.service.ts:58",{"_index":866,"title":{},"body":{"injectables/UploadService.html":{}}}],["src/validation/exception/exception.service",{"_index":234,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/exception.service.ts",{"_index":442,"title":{},"body":{"injectables/ExceptionService.html":{},"coverage.html":{}}}],["src/validation/exception/exception.service.ts:11",{"_index":450,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:14",{"_index":466,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:23",{"_index":457,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:28",{"_index":463,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:33",{"_index":461,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:38",{"_index":469,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/exception.service.ts:9",{"_index":453,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["src/validation/exception/response/response.interface",{"_index":160,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["src/validation/exception/response/response.interface.ts",{"_index":799,"title":{},"body":{"interfaces/Response.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service",{"_index":235,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["src/validation/exception/response/response.service.ts",{"_index":804,"title":{},"body":{"injectables/ResponseService.html":{},"coverage.html":{}}}],["src/validation/exception/response/response.service.ts:15",{"_index":813,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:25",{"_index":810,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:34",{"_index":817,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:42",{"_index":825,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:50",{"_index":821,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/exception/response/response.service.ts:6",{"_index":827,"title":{},"body":{"injectables/ResponseService.html":{}}}],["src/validation/validation.module.ts",{"_index":944,"title":{},"body":{"modules/ValidationModule.html":{}}}],["src/validation/validation.service.ts",{"_index":952,"title":{},"body":{"injectables/ValidationService.html":{},"coverage.html":{}}}],["src/validation/validation.service.ts:7",{"_index":955,"title":{},"body":{"injectables/ValidationService.html":{}}}],["start",{"_index":1034,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1037,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1039,"title":{},"body":{"index.html":{}}}],["started",{"_index":1016,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1027,"title":{},"body":{"index.html":{}}}],["startindex",{"_index":670,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":164,"title":{},"body":{"classes/BaseController.html":{},"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"miscellaneous/variables.html":{}}}],["statuscode",{"_index":801,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["stay",{"_index":1118,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1056,"title":{},"body":{"index.html":{}}}],["stock",{"_index":375,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["straightforward",{"_index":1075,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string})@apiquery({name",{"_index":710,"title":{},"body":{"controllers/ProductController.html":{}}}],["structure",{"_index":661,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":679,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ResponseService.html":{},"miscellaneous/variables.html":{}}}],["success(data",{"_index":826,"title":{},"body":{"injectables/ResponseService.html":{}}}],["successfully",{"_index":106,"title":{},"body":{"classes/BaseController.html":{}}}],["succès",{"_index":274,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"controllers/ProductController.html":{},"injectables/ResponseService.html":{}}}],["summary",{"_index":162,"title":{},"body":{"classes/BaseController.html":{},"controllers/ProductController.html":{}}}],["super(options",{"_index":965,"title":{},"body":{"injectables/ValidationService.html":{}}}],["super(productservice",{"_index":742,"title":{},"body":{"controllers/ProductController.html":{}}}],["super(repository",{"_index":791,"title":{},"body":{"injectables/ProductService.html":{},"injectables/UserService.html":{}}}],["super(userservice",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["super.create(createdto",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["super.findall(filter",{"_index":751,"title":{},"body":{"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["super.findone(id",{"_index":921,"title":{},"body":{"controllers/UserController.html":{}}}],["super.remove(id",{"_index":926,"title":{},"body":{"controllers/UserController.html":{}}}],["super.update(id",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["support",{"_index":1096,"title":{},"body":{"index.html":{},"modules.html":{}}}],["suppression",{"_index":199,"title":{},"body":{"classes/BaseEntity.html":{},"injectables/BaseService.html":{}}}],["supprimée",{"_index":273,"title":{},"body":{"injectables/BaseService.html":{}}}],["sur",{"_index":623,"title":{},"body":{"interfaces/PaginationParams.html":{}}}],["svg",{"_index":1152,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":803,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["table",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":655,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1057,"title":{},"body":{"index.html":{}}}],["target",{"_index":626,"title":{},"body":{"interfaces/PaginationParams.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["teamx",{"_index":1149,"title":{},"body":{"index.html":{}}}],["test",{"_index":1042,"title":{},"body":{"index.html":{}}}],["test:covexample",{"_index":1045,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1044,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1040,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1132,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.basedir",{"_index":873,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.baseservice.create(createdto",{"_index":166,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findall(filter",{"_index":171,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findbyid(id",{"_index":169,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.remove(id",{"_index":177,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.softremove(id",{"_index":180,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.update(id",{"_index":174,"title":{},"body":{"classes/BaseController.html":{}}}],["this.config.getconnectionconfig",{"_index":566,"title":{},"body":{"injectables/MongoConnection.html":{}}}],["this.configservice.get('mongodb_uri",{"_index":557,"title":{},"body":{"injectables/MongoConfig.html":{}}}],["this.connection.connect",{"_index":440,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.connection.disconnect",{"_index":441,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.create(createdto",{"_index":796,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.ensuredirectory(folder",{"_index":885,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.exceptionservice.createinternalserverexception",{"_index":245,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ProductService.html":{}}}],["this.exceptionservice.createnotfoundexception",{"_index":254,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.exceptionservice.createvalidationexception(errors",{"_index":964,"title":{},"body":{"injectables/ValidationService.html":{}}}],["this.formaterrors(errors",{"_index":483,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.generatefilename(file.originalname",{"_index":887,"title":{},"body":{"injectables/UploadService.html":{}}}],["this.httpresponseservice.badrequest",{"_index":484,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.forbidden(message",{"_index":488,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.internalerror(message",{"_index":492,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.httpresponseservice.notfound(message",{"_index":490,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["this.logger.error",{"_index":312,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.error(`échec",{"_index":340,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["this.logger.log(`image",{"_index":320,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["this.model",{"_index":594,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model(createdto",{"_index":587,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.find",{"_index":590,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyid(id).exec",{"_index":589,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidanddelete(id).exec",{"_index":593,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.model.findbyidandupdate(id",{"_index":592,"title":{},"body":{"injectables/MongooseRepository.html":{}}}],["this.productservice",{"_index":748,"title":{},"body":{"controllers/ProductController.html":{}}}],["this.repository.create(createdto",{"_index":240,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.delete(id",{"_index":271,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findall(filter",{"_index":261,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.findbyid(id",{"_index":250,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.softdelete(id",{"_index":276,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.repository.update(id",{"_index":266,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.created(created",{"_index":241,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success",{"_index":277,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entities",{"_index":262,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(entity",{"_index":251,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(null",{"_index":272,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.responseservice.success(updated",{"_index":267,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.update(id",{"_index":798,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadservice.uploadsingle",{"_index":793,"title":{},"body":{"injectables/ProductService.html":{}}}],["this.uploadsingle(file",{"_index":339,"title":{},"body":{"injectables/CloudinaryService.html":{},"injectables/UploadService.html":{}}}],["throw",{"_index":244,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/ExceptionService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["time",{"_index":1111,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":802,"title":{},"body":{"interfaces/Response.html":{},"injectables/ResponseService.html":{}}}],["timestamps",{"_index":902,"title":{},"body":{"classes/User.html":{}}}],["total",{"_index":666,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":1140,"title":{},"body":{"index.html":{}}}],["transform",{"_index":959,"title":{},"body":{"injectables/ValidationService.html":{}}}],["transformer",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["transformoptions",{"_index":961,"title":{},"body":{"injectables/ValidationService.html":{}}}],["trouvée",{"_index":259,"title":{},"body":{"injectables/BaseService.html":{},"injectables/ResponseService.html":{}}}],["true",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/MongooseRepository.html":{},"classes/Product.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"injectables/ValidationService.html":{}}}],["true})@isnumber()@min(0)@isnotempty",{"_index":371,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["true})@isstring()@isnotempty",{"_index":364,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{}}}],["try",{"_index":237,"title":{},"body":{"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongoConnection.html":{},"injectables/ProductService.html":{},"injectables/UploadService.html":{}}}],["tsconfig.jsondeployment",{"_index":1049,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1146,"title":{},"body":{"index.html":{}}}],["type",{"_index":95,"title":{},"body":{"classes/BaseController.html":{},"classes/BaseEntity.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/DatabaseService.html":{},"injectables/ExceptionService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{},"injectables/MongooseRepository.html":{},"classes/PaginationDto.html":{},"interfaces/PaginationParams.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"interfaces/Response.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":210,"title":{},"body":{"classes/BaseEntity.html":{},"interfaces/PaginationParams.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":187,"title":{},"body":{"classes/BaseEntity.html":{}}}],["types/multer",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":476,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{},"index.html":{}}}],["ui",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":654,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":195,"title":{},"body":{"classes/BaseEntity.html":{},"classes/CreateProductDto.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiquery({name",{"_index":708,"title":{},"body":{"controllers/ProductController.html":{}}}],["unique",{"_index":190,"title":{},"body":{"classes/BaseEntity.html":{}}}],["unit",{"_index":1041,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":614,"title":{},"body":{"interfaces/PaginationParams.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1161,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":478,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["update",{"_index":88,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":924,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":140,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"interfaces/IBaseRepository.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updated",{"_index":144,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{}}}],["updatedat",{"_index":186,"title":{},"body":{"classes/BaseEntity.html":{}}}],["updatedto",{"_index":141,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/MongooseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedto.image",{"_index":797,"title":{},"body":{"injectables/ProductService.html":{}}}],["updateproductdto",{"_index":713,"title":{"classes/UpdateProductDto.html":{}},"body":{"controllers/ProductController.html":{},"classes/UpdateProductDto.html":{},"coverage.html":{}}}],["updates",{"_index":1120,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":842,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["updatewithimage",{"_index":775,"title":{},"body":{"injectables/ProductService.html":{}}}],["updatewithimage(id",{"_index":779,"title":{},"body":{"injectables/ProductService.html":{}}}],["upload",{"_index":505,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"miscellaneous/variables.html":{}}}],["upload.service",{"_index":850,"title":{},"body":{"modules/UploadModule.html":{}}}],["uploadedfile",{"_index":721,"title":{},"body":{"controllers/ProductController.html":{}}}],["uploadfile",{"_index":857,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadfile(image",{"_index":864,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadmodule",{"_index":42,"title":{"modules/UploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadmultiple",{"_index":282,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadmultiple(files",{"_index":285,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadresult",{"_index":792,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploadresult.url",{"_index":795,"title":{},"body":{"injectables/ProductService.html":{}}}],["uploads",{"_index":875,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploads/${relativepath",{"_index":894,"title":{},"body":{"injectables/UploadService.html":{}}}],["uploadservice",{"_index":46,"title":{"injectables/UploadService.html":{}},"body":{"modules/AppModule.html":{},"injectables/ProductService.html":{},"modules/UploadModule.html":{},"injectables/UploadService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadsingle",{"_index":283,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["uploadsingle(file",{"_index":292,"title":{},"body":{"injectables/CloudinaryService.html":{},"interfaces/FileStorageService.html":{},"injectables/UploadService.html":{}}}],["uploadstream",{"_index":310,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadstream.end(file.buffer",{"_index":326,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uploadée",{"_index":321,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["uri",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/MongoConfig.html":{},"injectables/MongoConnection.html":{}}}],["url",{"_index":324,"title":{},"body":{"injectables/CloudinaryService.html":{},"classes/CreateProductDto.html":{},"interfaces/FileStorageService.html":{},"interfaces/FileUploadResult.html":{},"injectables/UploadService.html":{}}}],["useclass",{"_index":430,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/UploadModule.html":{}}}],["useexisting",{"_index":951,"title":{},"body":{"modules/ValidationModule.html":{}}}],["usefactory",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["useinterceptors",{"_index":720,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":745,"title":{},"body":{"controllers/ProductController.html":{}}}],["useinterceptors(fileinterceptor('image",{"_index":746,"title":{},"body":{"controllers/ProductController.html":{}}}],["user",{"_index":896,"title":{"classes/User.html":{}},"body":{"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":932,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":845,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{}}}],["user.dto.ts",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/FindUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":523,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:13",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":525,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:22",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":521,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:31",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":534,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.dto.ts:45",{"_index":529,"title":{},"body":{"classes/FindUserDto.html":{}}}],["user.name",{"_index":933,"title":{},"body":{"modules/UserModule.html":{}}}],["user.service",{"_index":915,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user_repository",{"_index":934,"title":{},"body":{"modules/UserModule.html":{}}}],["usercontroller",{"_index":905,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":903,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":914,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1112,"title":{},"body":{"index.html":{}}}],["v2",{"_index":295,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["validateif",{"_index":383,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validateif((o",{"_index":388,"title":{},"body":{"classes/CreateProductDto.html":{}}}],["validation",{"_index":485,"title":{},"body":{"injectables/ExceptionService.html":{}}}],["validation.service",{"_index":947,"title":{},"body":{"modules/ValidationModule.html":{}}}],["validation/exception/exception.service",{"_index":761,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/exception/response/response.service",{"_index":762,"title":{},"body":{"modules/ProductModule.html":{},"modules/UserModule.html":{}}}],["validation/validation.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["validationerror",{"_index":465,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ValidationService.html":{}}}],["validationmodule",{"_index":44,"title":{"modules/ValidationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ValidationModule.html":{},"modules.html":{},"overview.html":{}}}],["validationpipe",{"_index":953,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationpipeoptions",{"_index":956,"title":{},"body":{"injectables/ValidationService.html":{}}}],["validationservice",{"_index":943,"title":{"injectables/ValidationService.html":{}},"body":{"modules/ValidationModule.html":{},"injectables/ValidationService.html":{},"coverage.html":{},"overview.html":{}}}],["validator",{"_index":384,"title":{},"body":{"classes/CreateProductDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExceptionService.html":{},"classes/FindProductDto.html":{},"classes/FindUserDto.html":{},"classes/PaginationDto.html":{},"injectables/ValidationService.html":{},"dependencies.html":{}}}],["valide",{"_index":336,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["value",{"_index":121,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"injectables/CloudinaryService.html":{},"injectables/MongooseRepository.html":{},"injectables/ProductService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{},"injectables/UserService.html":{},"injectables/ValidationService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1162,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":479,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/UploadService.html":{},"controllers/UserController.html":{}}}],["version",{"_index":1159,"title":{},"body":{"properties.html":{}}}],["vide",{"_index":319,"title":{},"body":{"injectables/CloudinaryService.html":{}}}],["video",{"_index":1104,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1093,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1107,"title":{},"body":{"index.html":{}}}],["void",{"_index":455,"title":{},"body":{"injectables/ExceptionService.html":{},"injectables/ResponseService.html":{},"injectables/UploadService.html":{}}}],["votre",{"_index":677,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["vérifier",{"_index":648,"title":{},"body":{"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["watch",{"_index":1035,"title":{},"body":{"index.html":{}}}],["website",{"_index":1144,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":958,"title":{},"body":{"injectables/ValidationService.html":{}}}],["working",{"_index":1092,"title":{},"body":{"index.html":{}}}],["world",{"_index":79,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1122,"title":{},"body":{"index.html":{}}}],["yes",{"_index":503,"title":{},"body":{"interfaces/FileStorageService.html":{},"interfaces/IBaseRepository.html":{},"controllers/ProductController.html":{},"injectables/ProductService.html":{}}}],["you'd",{"_index":1136,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1050,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductModule.html":{},"modules/UploadModule.html":{},"modules/UserModule.html":{},"modules/ValidationModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUploadModule\n\nUploadModule\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nValidationModule\n\nValidationModule\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CloudinaryService\n                        \n                        \n                            UploadService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UploadModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            ValidationModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // app.module.ts\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { DatabaseModule } from './services/database/database.module';\nimport { UserModule } from './module/user/user.module';\nimport { ValidationModule } from './validation/validation.module';\nimport { CloudinaryService } from './services/upload/cloudinary/cloudinary.service';\nimport { UploadService } from './services/upload/upload.service';\nimport { UploadModule } from './services/upload/upload.module';\nimport { ProductModule } from './module/product/product.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    MongooseModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGODB_URI'),\n      }),\n      inject: [ConfigService],\n    }),\n    DatabaseModule,\n    UserModule,\n    ValidationModule,\n    UploadModule,\n    ProductModule,\n  ],\n  providers: [CloudinaryService, UploadService],\n  controllers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseController.html":{"url":"classes/BaseController.html","title":"class - BaseController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseService: BaseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.controller.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseService\n                                                  \n                                                        \n                                                                        BaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new entity'})@ApiBody({description: 'Entity data'})@ApiResponse({status: 201, description: 'Entity successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: object)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Find all entities'})@ApiResponse({status: 200, description: 'List of entities.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            object\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiBody({description: 'Updated entity data'})@ApiResponse({status: 200, description: 'Entity updated.'})\n                \n            \n\n                    \n                        \n                            Defined in src/services/base/methode/base.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Param,\n  Body,\n  Query,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';\nimport { BaseEntity } from '../entity/base.entity';\nimport { BaseService } from './base.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\nexport abstract class BaseController {\n  constructor(private readonly baseService: BaseService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create a new entity' })\n  @ApiBody({ description: 'Entity data' })\n  @ApiResponse({ status: 201, description: 'Entity successfully created.' })\n  async create(@Body() createDto: Partial): Promise> {\n    return this.baseService.create(createDto);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Find entity by id' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity found.' })\n  async findOne(@Param('id') id: string): Promise> {\n    return this.baseService.findById(id);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Find all entities' })\n  @ApiResponse({ status: 200, description: 'List of entities.' })\n  async findAll(@Query() filter = {}): Promise> {\n    return this.baseService.findAll(filter);\n  }\n\n  @Put(':id')\n  @ApiOperation({ summary: 'Update entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiBody({ description: 'Updated entity data' })\n  @ApiResponse({ status: 200, description: 'Entity updated.' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: Partial,\n  ): Promise> {\n    return this.baseService.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity deleted.' })\n  async remove(@Param('id') id: string): Promise> {\n    return this.baseService.remove(id);\n  }\n\n  @Delete(':id/soft')\n  @ApiOperation({ summary: 'Soft delete entity' })\n  @ApiParam({ name: 'id', description: 'Entity ID' })\n  @ApiResponse({ status: 200, description: 'Entity soft deleted.' })\n  async softRemove(@Param('id') id: string): Promise> {\n    return this.baseService.softRemove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseEntity.html":{"url":"classes/BaseEntity.html","title":"class - BaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/entity/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                _id\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                isDeleted\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID MongoDB unique'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de création'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Indicateur de suppression logique'})@Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Date de dernière modification'})@Prop({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/services/base/entity/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document, Types } from 'mongoose';\n\n@Schema()\nexport class BaseEntity extends Document {\n  @ApiProperty({ description: 'ID MongoDB unique' })\n  _id: Types.ObjectId;\n\n  @ApiProperty({ description: 'Date de création' })\n  @Prop({ default: Date.now })\n  createdAt: Date;\n\n  @ApiProperty({ description: 'Date de dernière modification' })\n  @Prop({ default: Date.now })\n  updatedAt: Date;\n\n  @ApiProperty({ description: 'Indicateur de suppression logique' })\n  @Prop({ default: false })\n  isDeleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/base.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FilterQuery } from 'mongoose';\nimport { BaseEntity } from '../entity/base.entity';\nimport { IBaseRepository } from './base.repository.interface';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { Response } from 'src/validation/exception/response/response.interface';\n\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected readonly repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {}\n\n  async create(createDto: Partial): Promise> {\n    try {\n      const created = await this.repository.create(createDto);\n      return this.responseService.created(created);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création: ${error.message}`,\n      );\n    }\n  }\n\n  async findById(id: string): Promise> {\n    try {\n      const entity = await this.repository.findById(id);\n      return this.responseService.success(entity);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la recherche: ${error.message}`,\n      );\n    }\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise> {\n    try {\n      const entities = await this.repository.findAll(filter);\n      return this.responseService.success(entities);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la récupération des entités: ${error.message}`,\n      );\n    }\n  }\n\n  async update(id: string, updateDto: Partial): Promise> {\n    try {\n      const updated = await this.repository.update(id, updateDto);\n      return this.responseService.success(updated);\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour: ${error.message}`,\n      );\n    }\n  }\n\n  async remove(id: string): Promise> {\n    try {\n      const result = await this.repository.delete(id);\n      if (!result) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      return this.responseService.success(null, 'Entité supprimée avec succès');\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression: ${error.message}`,\n      );\n    }\n  }\n\n  async softRemove(id: string): Promise> {\n    try {\n      const softDeleted = await this.repository.softDelete(id);\n      return this.responseService.success(\n        softDeleted,\n        'Entité supprimée logiquement avec succès',\n      );\n    } catch (error) {\n      if (error.status === 404) {\n        throw this.exceptionService.createNotFoundException(\n          `Entité avec l'id ${id} non trouvée`,\n        );\n      }\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la suppression logique: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CloudinaryService.html":{"url":"injectables/CloudinaryService.html","title":"injectable - CloudinaryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CloudinaryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/cloudinary/cloudinary.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/cloudinary/cloudinary.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(CloudinaryService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/cloudinary/cloudinary.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { v2 as cloudinary } from 'cloudinary';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from '../interfaces/upload.interface';\n\n@Injectable()\nexport class CloudinaryService implements FileStorageService {\n  private logger = new Logger(CloudinaryService.name);\n\n  constructor() {\n    cloudinary.config({\n      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n      api_key: process.env.CLOUDINARY_API_KEY,\n      api_secret: process.env.CLOUDINARY_API_SECRET,\n    });\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const uploadStream = cloudinary.uploader.upload_stream(\n        { folder },\n        (error, result) => {\n          if (error) {\n            this.logger.error(\n              `Erreur lors de l'upload: ${JSON.stringify(error)}`,\n            );\n            return reject(error);\n          }\n          if (!result) {\n            return reject(new Error(\"Résultat d'upload vide\"));\n          }\n          this.logger.log(`Image uploadée avec succès: ${result.public_id}`);\n          resolve({\n            url: result.secure_url,\n            id: result.public_id,\n          });\n        },\n      );\n\n      uploadStream.end(file.buffer);\n    });\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    files.forEach((file, index) => {\n      if (!file.buffer?.length) {\n        throw new Error(\n          `Le fichier à l'index ${index} n'a pas de contenu valide`,\n        );\n      }\n    });\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw new Error(`Échec de l'upload des images: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductDto.html":{"url":"classes/CreateProductDto.html","title":"class - CreateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/create-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL de l'image du produit', example: 'https://example.com/iphone13.jpg', type: 'string', format: 'binary'})@ValidateIf(o => )@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom du produit', example: 'iPhone 13', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prix du produit', example: 10000, minimum: 0, required: true})@IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Quantité en stock', example: 50, minimum: 0, required: true})@IsNumber()@Min(0)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/create-product.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNumber,\n  IsNotEmpty,\n  Min,\n  IsOptional,\n  /*   IsUrl, */\n  ValidateIf,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateProductDto {\n  @ApiProperty({\n    description: 'Nom du produit',\n    example: 'iPhone 13',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'Prix du produit',\n    example: 10000,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  price: number;\n\n  @ApiProperty({\n    description: 'Quantité en stock',\n    example: 50,\n    minimum: 0,\n    required: true,\n  })\n  @IsNumber()\n  @Min(0)\n  @IsNotEmpty()\n  quantity: number;\n\n  @ApiPropertyOptional({\n    description: \"URL de l'image du produit\",\n    example: 'https://example.com/iphone13.jpg',\n    type: 'string',\n    format: 'binary',\n  })\n  @ValidateIf((o) => o.image !== undefined && o.image !== '')\n  /*  @IsUrl() */\n  @IsOptional()\n  image?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Adresse de l'utilisateur', example: 'Ouakam', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Prénom de l'utilisateur', example: 'Baba Issa', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Nom de l'utilisateur', example: 'Ndiaye', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: \"Prénom de l'utilisateur\",\n    example: 'Baba Issa',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstname: string;\n\n  @ApiProperty({\n    description: \"Nom de l'utilisateur\",\n    example: 'Ndiaye',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastname: string;\n\n  @ApiProperty({\n    description: \"Adresse de l'utilisateur\",\n    example: 'Ouakam',\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConfig.html":{"url":"interfaces/DatabaseConfig.html","title":"interface - DatabaseConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getConnectionConfig\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:2\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DatabaseConnection.html":{"url":"interfaces/DatabaseConnection.html","title":"interface - DatabaseConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DatabaseConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/interfaces/database.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connect\n                                    \n                                \n                                \n                                    \n                                        disconnect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/interfaces/database.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface DatabaseConfig {\n  getConnectionConfig(): any;\n}\n\nexport interface DatabaseConnection {\n  connect(): Promise;\n  disconnect(): Promise;\n}\n\nexport const DATABASE_CONNECTION = 'DATABASE_CONNECTION';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nDatabaseService \n\nDatabaseService \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MongoConfig\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DatabaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { DatabaseService } from './database.service';\nimport { MongoConfig } from './mongodb/mongo.config';\nimport { MongoConnection } from './mongodb/mongo.connection';\nimport { DATABASE_CONNECTION } from './interfaces/database.interface';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [\n    MongoConfig,\n    {\n      provide: DATABASE_CONNECTION,\n      useClass: MongoConnection,\n    },\n    DatabaseService,\n  ],\n  exports: [DatabaseService, DATABASE_CONNECTION],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: DatabaseConnection)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/database.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                        DatabaseConnection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/database.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n} from '@nestjs/common';\nimport {\n  DatabaseConnection,\n  DATABASE_CONNECTION,\n} from './interfaces/database.interface';\n\n@Injectable()\nexport class DatabaseService implements OnModuleInit, OnModuleDestroy {\n  constructor(\n    @Inject(DATABASE_CONNECTION) private connection: DatabaseConnection,\n  ) {}\n\n  async onModuleInit() {\n    await this.connection.connect();\n  }\n\n  async onModuleDestroy() {\n    await this.connection.disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExceptionService.html":{"url":"injectables/ExceptionService.html","title":"injectable - ExceptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExceptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/exception.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createBadRequestException\n                            \n                            \n                                createForbiddenException\n                            \n                            \n                                createInternalServerException\n                            \n                            \n                                createNotFoundException\n                            \n                            \n                                createValidationException\n                            \n                            \n                                    Private\n                                formatErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpResponseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/exception/exception.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpResponseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createBadRequestException\n                        \n                    \n                \n            \n            \n                \ncreateBadRequestException(arg0: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                arg0\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createForbiddenException\n                        \n                    \n                \n            \n            \n                \ncreateForbiddenException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInternalServerException\n                        \n                    \n                \n            \n            \n                \ncreateInternalServerException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNotFoundException\n                        \n                    \n                \n            \n            \n                \ncreateNotFoundException(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createValidationException\n                        \n                    \n                \n            \n            \n                \ncreateValidationException(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     HttpException\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatErrors(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/exception.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ResponseService } from './response/response.service';\n\n@Injectable()\nexport class ExceptionService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createBadRequestException(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  constructor(private readonly httpResponseService: ResponseService) {}\n\n  createValidationException(errors: ValidationError[]): HttpException {\n    const messages = this.formatErrors(errors);\n    const response = this.httpResponseService.badRequest(\n      messages,\n      'Erreur de validation',\n    );\n    return new HttpException(response, HttpStatus.BAD_REQUEST);\n  }\n\n  createForbiddenException(message: string): HttpException {\n    const response = this.httpResponseService.forbidden(message);\n    return new HttpException(response, HttpStatus.FORBIDDEN);\n  }\n\n  createNotFoundException(message: string): HttpException {\n    const response = this.httpResponseService.notFound(message);\n    return new HttpException(response, HttpStatus.NOT_FOUND);\n  }\n\n  createInternalServerException(message: string): HttpException {\n    const response = this.httpResponseService.internalError(message);\n    return new HttpException(response, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  private formatErrors(errors: ValidationError[]): string[] {\n    const messages: string[] = [];\n    errors.forEach((error) => {\n      if (error.constraints) {\n        Object.values(error.constraints).forEach((message) => {\n          messages.push(message);\n        });\n      }\n      if (error.children && error.children.length > 0) {\n        messages.push(...this.formatErrors(error.children));\n      }\n    });\n    return messages;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorageService.html":{"url":"interfaces/FileStorageService.html","title":"interface - FileStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        uploadMultiple\n                                    \n                                \n                                \n                                    \n                                        uploadSingle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \nuploadMultiple(files: Express.Multer.File[], folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \nuploadSingle(file: Express.Multer.File, folder?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/interfaces/upload.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUploadResult.html":{"url":"interfaces/FileUploadResult.html","title":"interface - FileUploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/interfaces/upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FileUploadResult {\n  url: string;\n  id: string;\n}\n\nexport interface FileStorageService {\n  uploadSingle(\n    file: Express.Multer.File,\n    folder?: string,\n  ): Promise;\n  uploadMultiple(\n    files: Express.Multer.File[],\n    folder?: string,\n  ): Promise;\n}\nexport const DATABASE_CONNECTION = 'UPLOAD';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindProductDto.html":{"url":"classes/FindProductDto.html","title":"class - FindProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/find-product.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                price\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom de produit', example: 'iPhone'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prix', example: 999.99, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par quantité', example: 50, minimum: 0})@IsNumber()@IsOptional()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/dto/find-product.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNumber, IsOptional, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindProductDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom de produit',\n    example: 'iPhone',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par prix',\n    example: 999.99,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  price?: number;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par quantité',\n    example: 50,\n    minimum: 0,\n  })\n  @IsNumber()\n  @IsOptional()\n  @Min(0)\n  quantity?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindUserDto.html":{"url":"classes/FindUserDto.html","title":"class - FindUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/find-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstname\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastname\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par adresse', example: 'Paris'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par prénom', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Filtrer par nom', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Nombre d'éléments par page', example: 10})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Numéro de page pour la pagination', example: 1})@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/dto/find-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsInt, Min } from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class FindUserDto {\n  @ApiPropertyOptional({\n    description: 'Filtrer par prénom',\n    example: 'John',\n  })\n  @IsString()\n  @IsOptional()\n  firstname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par nom',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsOptional()\n  lastname?: string;\n\n  @ApiPropertyOptional({\n    description: 'Filtrer par adresse',\n    example: 'Paris',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @ApiPropertyOptional({\n    description: 'Numéro de page pour la pagination',\n    example: 1,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  page?: number;\n\n  @ApiPropertyOptional({\n    description: \"Nombre d'éléments par page\",\n    example: 10,\n  })\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IBaseRepository.html":{"url":"interfaces/IBaseRepository.html","title":"interface - IBaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IBaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/base.repository.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findAll\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                                \n                                    \n                                        softDelete\n                                    \n                                \n                                \n                                    \n                                        update\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(filter?: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        softDelete\n                        \n                    \n                \n            \n            \n                \nsoftDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, entity: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/base.repository.interface.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entity\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FilterQuery } from 'mongoose';\n\nexport interface IBaseRepository {\n  create(entity: Partial): Promise;\n  findById(id: string): Promise;\n  findAll(filter?: FilterQuery): Promise;\n  update(id: string, entity: Partial): Promise;\n  delete(id: string): Promise;\n  softDelete(id: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConfig.html":{"url":"injectables/MongoConfig.html","title":"injectable - MongoConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConnectionConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.config.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConnectionConfig\n                        \n                    \n                \n            \n            \n                \ngetConnectionConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.config.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { uri: any; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { DatabaseConfig } from '../interfaces/database.interface';\n@Injectable()\nexport class MongoConfig implements DatabaseConfig {\n  constructor(private configService: ConfigService) {}\n\n  getConnectionConfig() {\n    const uri = this.configService.get('MONGODB_URI');\n    console.log('MongoDB URI:', uri);\n    return { uri };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongoConnection.html":{"url":"injectables/MongoConnection.html","title":"injectable - MongoConnection","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongoConnection\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/database/mongodb/mongo.connection.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                connect\n                            \n                            \n                                    Async\n                                disconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: MongoConfig)\n                    \n                \n                        \n                            \n                                Defined in src/services/database/mongodb/mongo.connection.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        MongoConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        connect\n                        \n                    \n                \n            \n            \n                \n                        \n                    connect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                        \n                    disconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/database/mongodb/mongo.connection.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as mongoose from 'mongoose';\nimport { DatabaseConnection } from '../interfaces/database.interface';\nimport { MongoConfig } from './mongo.config';\n\n@Injectable()\nexport class MongoConnection implements DatabaseConnection {\n  constructor(private config: MongoConfig) {}\n\n  async connect(): Promise {\n    try {\n      const { uri } = this.config.getConnectionConfig();\n      await mongoose.connect(uri);\n      console.log('Connexion à MongoDB réussie ! 🎉');\n    } catch (error) {\n      console.error('Erreur de connexion à MongoDB:', error);\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise {\n    await mongoose.disconnect();\n    console.log('Déconnexion de MongoDB réussie');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MongooseRepository.html":{"url":"injectables/MongooseRepository.html","title":"injectable - MongooseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MongooseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/base/methode/mongoose.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                softDelete\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(model: Model)\n                    \n                \n                        \n                            \n                                Defined in src/services/base/methode/mongoose.repository.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/base/methode/mongoose.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, FilterQuery } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Injectable()\nexport class MongooseRepository\n  implements IBaseRepository\n{\n  constructor(private readonly model: Model) {}\n\n  async create(createDto: Partial): Promise {\n    const created = new this.model(createDto);\n    return created.save();\n  }\n\n  async findById(id: string): Promise {\n    return this.model.findById(id).exec();\n  }\n\n  async findAll(filter: FilterQuery = {}): Promise {\n    return this.model.find({ ...filter, isDeleted: false }).exec();\n  }\n\n  async update(id: string, updateDto: Partial): Promise {\n    return this.model.findByIdAndUpdate(id, updateDto, { new: true }).exec();\n  }\n\n  async delete(id: string): Promise {\n    const result = await this.model.findByIdAndDelete(id).exec();\n    return !!result;\n  }\n\n  async softDelete(id: string): Promise {\n    return this.model\n      .findByIdAndUpdate(id, { isDeleted: true }, { new: true })\n      .exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/decorator/Pagination/dto/pagination.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsNumberString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsOptional()\n  @IsNumberString()\n  page?: string;\n\n  @IsOptional()\n  @IsNumberString()\n  limit?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/decorator/Pagination/pagination.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\n\n// Définition des types pour la pagination\ninterface PaginationParams {\n  page: number;\n  limit: number;\n}\n\n// Décorateur pour extraire les paramètres de pagination depuis la requête\nexport const PaginateParams = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n);\n\n// Décorateur pour appliquer la logique de pagination sur les résultats retournés\nexport const Pagination = () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/entities/product.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                quantity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, min: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/product/entities/product.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from 'src/services/base/entity/base.entity';\n\n@Schema()\nexport class Product extends BaseEntity {\n  @Prop({ required: true })\n  name: string;\n\n  @Prop({ required: true, min: 0 })\n  price: number;\n\n  @Prop({ required: true, min: 0 })\n  quantity: number;\n\n  @Prop()\n  image: string;\n}\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiBody({description: 'Produit créer avec option d''upload image', type: CreateProductDto})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:47\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindProductDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'get All list '})@ApiResponse({status: 200, description: 'Liste des produits récupérée avec succès', type: undefined})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})@ApiQuery({name: 'name', required: false, type: String})@ApiQuery({name: 'price', required: false, type: Number})@ApiQuery({name: 'quantity', required: false, type: Number})@Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:88\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateProductDto, file?: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:61\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateProductDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Find entity by id'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity found.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:31\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:58\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        // product/product.controller.ts\nimport {\n  Controller,\n  Post,\n  Put,\n  Param,\n  Body,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  Get,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiTags,\n  ApiConsumes,\n  ApiBody,\n  ApiQuery,\n  ApiResponse,\n  ApiOperation,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { Product } from './entities/product.entity';\nimport { ProductService } from './product.service';\nimport { CreateProductDto } from './dto/create-product.dto';\nimport { UpdateProductDto } from './dto/update-product.dto';\nimport { FindProductDto } from './dto/find-product.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\nimport { CacheInterceptor } from '@nestjs/cache-manager';\n\n@Controller('products')\n@ApiTags('products')\nexport class ProductController extends BaseController {\n  constructor(private readonly productService: ProductService) {\n    super(productService);\n    console.log('ProductController initialized');\n  }\n\n  @Post()\n  /*  @UseInterceptors(CacheInterceptor) */\n  @UseInterceptors(FileInterceptor('image'))\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: \"Produit créer avec option d''upload image\",\n    type: CreateProductDto,\n  })\n  async create(\n    @Body() createDto: CreateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).createWithImage(\n      createDto,\n      file,\n    );\n  }\n\n  @Put(':id')\n  @UseInterceptors(FileInterceptor('image'))\n  /* @UseInterceptors(CacheInterceptor) */\n  @ApiConsumes('multipart/form-data')\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateProductDto,\n    @UploadedFile() file?: Express.Multer.File,\n  ) {\n    return (this.productService as ProductService).updateWithImage(\n      id,\n      updateDto,\n      file,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'get All list ' })\n  @ApiResponse({\n    status: 200,\n    description: 'Liste des produits récupérée avec succès',\n    type: [CreateProductDto],\n  })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiQuery({ name: 'name', required: false, type: String })\n  @ApiQuery({ name: 'price', required: false, type: Number })\n  @ApiQuery({ name: 'quantity', required: false, type: Number })\n  /*  @Pagination() */\n  /*  @UseInterceptors(CacheInterceptor) */\n  @Get()\n  async findAll(@Query() filter: FindProductDto) {\n    return super.findAll(filter);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_imports\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nUploadModule\n\nUploadModule\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ProductService\n                        \n                        \n                            ResponseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UploadModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProductService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // product/product.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ProductController } from './product.controller';\nimport { ProductService } from './product.service';\nimport { Product, ProductSchema } from './entities/product.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\nimport { UploadModule } from 'src/services/upload/upload.module';\nimport { CacheModule } from '@nestjs/cache-manager';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Product.name, schema: ProductSchema }]),\n    UploadModule,\n    CacheModule.register(), // Register the cache module\n  ],\n  controllers: [ProductController],\n  providers: [\n    ProductService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'PRODUCT_REPOSITORY',\n      useFactory: (model: Model) => {\n        const repository = new MongooseRepository(model);\n        return repository;\n      },\n      inject: [getModelToken(Product.name)],\n    },\n  ],\n  exports: [ProductService],\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/product.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWithImage\n                            \n                            \n                                    Async\n                                updateWithImage\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, uploadService: FileStorageService, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/product/product.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadService\n                                                  \n                                                        \n                                                                        FileStorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWithImage(createDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithImage(id: string, updateDto: Partial, file?: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/module/product/product.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { Product } from './entities/product.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\nimport { FileStorageService } from 'src/services/upload/interfaces/upload.interface';\n\n@Injectable()\nexport class ProductService extends BaseService {\n  constructor(\n    @Inject('PRODUCT_REPOSITORY')\n    repository: IBaseRepository,\n    @Inject('UploadService')\n    private readonly uploadService: FileStorageService,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n\n  async createWithImage(\n    createDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        createDto.image = uploadResult.url;\n      }\n      return this.create(createDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la création du produit avec image: ${error.message}`,\n      );\n    }\n  }\n\n  async updateWithImage(\n    id: string,\n    updateDto: Partial,\n    file?: Express.Multer.File,\n  ) {\n    try {\n      if (file) {\n        const uploadResult = await this.uploadService.uploadSingle(\n          file,\n          'products',\n        );\n        updateDto.image = uploadResult.url;\n      }\n      return this.update(id, updateDto);\n    } catch (error) {\n      throw this.exceptionService.createInternalServerException(\n        `Erreur lors de la mise à jour du produit avec image: ${error.message}`,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Response {\n  statusCode: number;\n  message: string;\n  data?: T;\n  errors?: string[];\n  timestamp: string;\n  path?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseService.html":{"url":"injectables/ResponseService.html","title":"injectable - ResponseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/exception/response/response.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                badRequest\n                            \n                            \n                                created\n                            \n                            \n                                forbidden\n                            \n                            \n                                internalError\n                            \n                            \n                                notFound\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        badRequest\n                        \n                    \n                \n            \n            \n                \nbadRequest(errors: string[], message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Requête invalide'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created\n                        \n                    \n                \n            \n            \n                \ncreated(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:15\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource créée avec succès'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forbidden\n                        \n                    \n                \n            \n            \n                \nforbidden(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Accès interdit'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        internalError\n                        \n                    \n                \n            \n            \n                \ninternalError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Erreur interne du serveur'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notFound\n                        \n                    \n                \n            \n            \n                \nnotFound(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Ressource non trouvée'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n            \n                \nsuccess(data: T, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/validation/exception/response/response.service.ts:6\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'Opération réussie'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Response\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Response } from './response.interface';\n\n@Injectable()\nexport class ResponseService {\n  success(data: T, message = 'Opération réussie'): Response {\n    return {\n      statusCode: 200,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  created(data: T, message = 'Ressource créée avec succès'): Response {\n    return {\n      statusCode: 201,\n      message,\n      data,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  // Ajout du type void pour les méthodes qui ne retournent pas de données\n  badRequest(errors: string[], message = 'Requête invalide'): Response {\n    return {\n      statusCode: 400,\n      message,\n      errors,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  forbidden(message = 'Accès interdit'): Response {\n    return {\n      statusCode: 403,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  notFound(message = 'Ressource non trouvée'): Response {\n    return {\n      statusCode: 404,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  internalError(message = 'Erreur interne du serveur'): Response {\n    return {\n      statusCode: 500,\n      message,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductDto.html":{"url":"classes/UpdateProductDto.html","title":"class - UpdateProductDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/product/dto/update-product.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateProductDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateProductDto } from './create-product.dto';\n\nexport class UpdateProductDto extends PartialType(CreateProductDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadModule.html":{"url":"modules/UploadModule.html","title":"module - UploadModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\n\nUploadService \n\nUploadService \n\n\n\nUploadModule\n\nUploadModule\n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/services/upload/upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            UploadService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CloudinaryService } from './cloudinary/cloudinary.service';\nimport { UploadService } from './upload.service';\n@Module({\n  providers: [\n    {\n      provide: 'UploadService',\n      useClass:\n        process.env.STORAGE_SERVICE === 'local'\n          ? UploadService\n          : CloudinaryService,\n    },\n  ],\n  exports: ['UploadService'],\n})\nexport class UploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadService.html":{"url":"injectables/UploadService.html","title":"injectable - UploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/upload/upload.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseDir\n                            \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                ensureDirectory\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                            \n                                uploadFile\n                            \n                            \n                                    Async\n                                uploadMultiple\n                            \n                            \n                                    Async\n                                uploadSingle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/upload/upload.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        ensureDirectory\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureDirectory(folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(originalName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \nuploadFile(image: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadMultiple(files: Express.Multer.File[], folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                files\n                                            \n                                                        Express.Multer.File[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadSingle\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadSingle(file: Express.Multer.File, folder: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/upload/upload.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                folder\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'hotel-chambres'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseDir\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UploadService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/upload/upload.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport {\n  FileStorageService,\n  FileUploadResult,\n} from './interfaces/upload.interface';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n@Injectable()\nexport class UploadService implements FileStorageService {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  uploadFile(image: Express.Multer.File) {\n    throw new Error('Method not implemented.');\n  }\n  private logger = new Logger(UploadService.name);\n  private baseDir: string;\n\n  constructor() {\n    this.baseDir = process.env.UPLOAD_DIR || 'uploads';\n  }\n\n  private async ensureDirectory(folder: string): Promise {\n    const dirPath = path.join(this.baseDir, folder);\n    await fs.mkdir(dirPath, { recursive: true });\n    return dirPath;\n  }\n\n  private generateFileName(originalName: string): string {\n    const ext = path.extname(originalName);\n    const hash = crypto.randomBytes(8).toString('hex');\n    return `${hash}${ext}`;\n  }\n\n  async uploadSingle(\n    file: Express.Multer.File,\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    const dirPath = await this.ensureDirectory(folder);\n    const fileName = this.generateFileName(file.originalname);\n    const filePath = path.join(dirPath, fileName);\n\n    try {\n      await fs.writeFile(filePath, file.buffer);\n      const relativePath = path.join(folder, fileName);\n\n      return {\n        url: `/uploads/${relativePath}`,\n        id: relativePath,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erreur lors de l'enregistrement du fichier: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  async uploadMultiple(\n    files: Express.Multer.File[],\n    folder: string = 'hotel-chambres',\n  ): Promise {\n    if (!files?.length) return [];\n\n    try {\n      return await Promise.all(\n        files.map((file) => this.uploadSingle(file, folder)),\n      );\n    } catch (error) {\n      this.logger.error(`Échec de l'upload batch: ${error.message}`);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                firstname\n                            \n                            \n                                    \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/module/user/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { BaseEntity } from '../../../services/base/entity/base.entity';\n\n@Schema({ timestamps: true })\nexport class User extends BaseEntity {\n  @Prop({ required: true })\n  firstname: string;\n\n  @Prop({ required: true })\n  lastname: string;\n\n  @Prop({ required: true })\n  address: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n            \n                Extends\n            \n            \n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                softRemove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:49\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FindUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:38\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            FindUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:60\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id/soft')@ApiOperation({summary: 'Soft delete entity'})@ApiParam({name: 'id', description: 'Entity ID'})@ApiResponse({status: 200, description: 'Entity soft deleted.'})\n                \n            \n\n                    \n                        \n                            Inherited from         BaseController\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseController:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { BaseController } from 'src/services/base/methode/base.controller';\nimport { User } from './entities/user.entity';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { FindUserDto } from './dto/find-user.dto';\nimport { Pagination } from 'src/decorator/Pagination/pagination.decorator';\n\n@Controller('users')\n@ApiTags('users')\nexport class UserController extends BaseController {\n  constructor(private readonly userService: UserService) {\n    super(userService);\n    console.log('UserController initialized');\n  }\n\n  @Get()\n  /* @Pagination() */\n  async findAll(@Query() filter: FindUserDto) {\n    console.log('Finding all users with filter:', filter);\n    return super.findAll(filter);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    return super.findOne(id);\n  }\n\n  @Post()\n  async create(@Body() createDto: CreateUserDto) {\n    console.log('Creating user:', createDto);\n    return super.create(createDto);\n  }\n\n  @Put(':id')\n  async update(@Param('id') id: string, @Body() updateDto: UpdateUserDto) {\n    return super.update(id, updateDto);\n  }\n\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    return super.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/module/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        // module/user/user.module.ts\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { User, UserSchema } from './entities/user.entity';\nimport { MongooseRepository } from '../../services/base/methode/mongoose.repository';\nimport { Model } from 'mongoose';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { ExceptionService } from '../../validation/exception/exception.service';\nimport { ResponseService } from '../../validation/exception/response/response.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UserController],\n  providers: [\n    UserService,\n    ExceptionService,\n    ResponseService,\n    {\n      provide: 'USER_REPOSITORY',\n      useFactory: (model: Model) => {\n        return new MongooseRepository(model);\n      },\n      inject: [getModelToken(User.name)],\n    },\n  ],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/module/user/user.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                softRemove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IBaseRepository, exceptionService: ExceptionService, responseService: ResponseService)\n                    \n                \n                        \n                            \n                                Defined in src/module/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        IBaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        responseService\n                                                  \n                                                        \n                                                                        ResponseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(filter: FilterQuery)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:44\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        FilterQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:28\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:71\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        softRemove\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemove(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:87\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: Partial)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseService:55\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { BaseService } from 'src/services/base/methode/base.service';\nimport { User } from './entities/user.entity';\nimport { ExceptionService } from 'src/validation/exception/exception.service';\nimport { ResponseService } from 'src/validation/exception/response/response.service';\nimport { IBaseRepository } from 'src/services/base/methode/base.repository.interface';\n\n@Injectable()\nexport class UserService extends BaseService {\n  constructor(\n    @Inject('USER_REPOSITORY')\n    repository: IBaseRepository,\n    protected readonly exceptionService: ExceptionService,\n    protected readonly responseService: ResponseService,\n  ) {\n    super(repository, exceptionService, responseService);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ValidationModule.html":{"url":"modules/ValidationModule.html","title":"module - ValidationModule","body":"\n                   \n\n\n\n\n    Modules\n    ValidationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_imports\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nExceptionService\n\nExceptionService\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/validation/validation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExceptionService\n                        \n                        \n                            ResponseService\n                        \n                        \n                            ValidationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { ValidationService } from './validation.service';\nimport { ExceptionService } from './exception/exception.service';\nimport { DatabaseModule } from 'src/services/database/database.module';\nimport { ResponseService } from './exception/response/response.service';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    ValidationService,\n    ExceptionService,\n\n    {\n      provide: APP_PIPE,\n      useExisting: ValidationService,\n    },\n\n    ResponseService,\n  ],\n  exports: [ValidationService, ExceptionService, ResponseService],\n})\nexport class ValidationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationService.html":{"url":"injectables/ValidationService.html","title":"injectable - ValidationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validation/validation.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ValidationPipe\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exceptionService: ExceptionService)\n                    \n                \n                        \n                            \n                                Defined in src/validation/validation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exceptionService\n                                                  \n                                                        \n                                                                        ExceptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationPipe, ValidationPipeOptions } from '@nestjs/common';\nimport { ValidationError } from 'class-validator';\nimport { ExceptionService } from './exception/exception.service';\n@Injectable()\nexport class ValidationService extends ValidationPipe {\n  constructor(private readonly exceptionService: ExceptionService) {\n    const options: ValidationPipeOptions = {\n      whitelist: true,\n      transform: true,\n      forbidNonWhitelisted: true,\n      validationError: {\n        target: false,\n        value: false,\n      },\n      transformOptions: {\n        enableImplicitConversion: true,\n      },\n      exceptionFactory: (errors: ValidationError[]) => {\n        return this.exceptionService.createValidationException(errors);\n      },\n    };\n    super(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/decorator/Pagination/pagination.decorator.ts\n            \n            interface\n            PaginationParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            PaginateParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/Pagination/pagination.decorator.ts\n            \n            variable\n            Pagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/dto/create-product.dto.ts\n            \n            class\n            CreateProductDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/module/product/dto/find-product.dto.ts\n            \n            class\n            FindProductDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/product/dto/update-product.dto.ts\n            \n            class\n            UpdateProductDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/entities/product.entity.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                        src/module/product/entities/product.entity.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/module/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/module/user/dto/find-user.dto.ts\n            \n            class\n            FindUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/module/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/module/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/module/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/module/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/entity/base.entity.ts\n            \n            class\n            BaseEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.controller.ts\n            \n            class\n            BaseController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.repository.interface.ts\n            \n            interface\n            IBaseRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/base/methode/base.service.ts\n            \n            injectable\n            BaseService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/base/methode/mongoose.repository.ts\n            \n            injectable\n            MongooseRepository\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/services/database/interfaces/database.interface.ts\n            \n            interface\n            DatabaseConnection\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/database/interfaces/database.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.config.ts\n            \n            injectable\n            MongoConfig\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/database/mongodb/mongo.connection.ts\n            \n            injectable\n            MongoConnection\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/services/upload/cloudinary/cloudinary.service.ts\n            \n            injectable\n            CloudinaryService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileStorageService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/services/upload/interfaces/upload.interface.ts\n            \n            interface\n            FileUploadResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/services/upload/interfaces/upload.interface.ts\n            \n            variable\n            DATABASE_CONNECTION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/services/upload/upload.service.ts\n            \n            injectable\n            UploadService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validation/exception/exception.service.ts\n            \n            injectable\n            ExceptionService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.interface.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/exception/response/response.service.ts\n            \n            injectable\n            ResponseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/validation/validation.service.ts\n            \n            injectable\n            ValidationService\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^3.0.0\n        \n            @nestjs/common : ^10.4.15\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/mongoose : ^11.0.1\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^11.0.4\n        \n            @types/multer : ^1.4.12\n        \n            body-parser : ^1.20.3\n        \n            cache-manager : ^6.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cloudinary : ^2.5.1\n        \n            mongodb : ^6.13.0\n        \n            mongoose : ^8.10.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covExample :## Documentation \n$ npx @compodoc/compodoc -p tsconfig.jsonDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\nTeamx-Group-Nest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ValidationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_exports\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UploadModule\n\n\n\ncluster_UploadModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_ValidationModule\n\n\n\ncluster_ValidationModule_exports\n\n\n\ncluster_ValidationModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nValidationModule\n\nValidationModule\n\nValidationModule -->\n\nDatabaseModule->ValidationModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDatabaseService \n\nDatabaseService \n\nDatabaseService  -->\n\nDatabaseModule->DatabaseService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nProductService \n\nProductService \n\nProductService  -->\n\nProductModule->ProductService \n\n\n\n\n\nUploadModule\n\nUploadModule\n\nProductModule -->\n\nUploadModule->ProductModule\n\n\n\nAppModule -->\n\nUploadModule->AppModule\n\n\n\n\n\nUploadService \n\nUploadService \n\nUploadService  -->\n\nUploadModule->UploadService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\nAppModule -->\n\nValidationModule->AppModule\n\n\n\n\n\nExceptionService \n\nExceptionService \n\nExceptionService  -->\n\nValidationModule->ExceptionService \n\n\n\n\n\nResponseService \n\nResponseService \n\nResponseService  -->\n\nValidationModule->ResponseService \n\n\n\n\n\nValidationService \n\nValidationService \n\nValidationService  -->\n\nValidationModule->ValidationService \n\n\n\n\n\nCloudinaryService\n\nCloudinaryService\n\nAppModule -->\n\nCloudinaryService->AppModule\n\n\n\n\n\nUploadService\n\nUploadService\n\nAppModule -->\n\nUploadService->AppModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nDatabaseModule -->\n\nDatabaseService->DatabaseModule\n\n\n\n\n\nMongoConfig\n\nMongoConfig\n\nDatabaseModule -->\n\nMongoConfig->DatabaseModule\n\n\n\n\n\nExceptionService\n\nExceptionService\n\nProductModule -->\n\nExceptionService->ProductModule\n\n\n\nUserModule -->\n\nExceptionService->UserModule\n\n\n\nValidationModule -->\n\nExceptionService->ValidationModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nResponseService\n\nResponseService\n\nProductModule -->\n\nResponseService->ProductModule\n\n\n\nUserModule -->\n\nResponseService->UserModule\n\n\n\nValidationModule -->\n\nResponseService->ValidationModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nValidationService\n\nValidationService\n\nValidationModule -->\n\nValidationService->ValidationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DATABASE_CONNECTION   (src/.../database.interface.ts)\n                        \n                        \n                            DATABASE_CONNECTION   (src/.../upload.interface.ts)\n                        \n                        \n                            PaginateParams   (src/.../pagination.decorator.ts)\n                        \n                        \n                            Pagination   (src/.../pagination.decorator.ts)\n                        \n                        \n                            ProductSchema   (src/.../product.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/services/database/interfaces/database.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DATABASE_CONNECTION'\n                    \n                \n\n\n        \n    \n\n    src/services/upload/interfaces/upload.interface.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DATABASE_CONNECTION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'UPLOAD'\n                    \n                \n\n\n        \n    \n\n    src/decorator/Pagination/pagination.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginateParams\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): PaginationParams => {\n    const request = ctx.switchToHttp().getRequest();\n    return {\n      page: request.query.page ? Number(request.query.page) : 1,\n      limit: request.query.limit ? Number(request.query.limit) : 10,\n    };\n  },\n)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Pagination\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {\n  return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // Récupérer les paramètres de requête\n      const request = args.find((arg) => arg && arg.page !== undefined);\n      const page = request?.page || 1;\n      const limit = request?.limit || 10;\n\n      // Exécuter la méthode originale pour obtenir le résultat du service\n      const serviceResponse = await originalMethod.apply(this, args);\n\n      // Vérifier que serviceResponse.data existe et est un tableau\n      // Si ce n'est pas le cas, conserver la structure d'origine\n      if (!serviceResponse || !serviceResponse.data) {\n        return serviceResponse;\n      }\n\n      const items = Array.isArray(serviceResponse.data)\n        ? serviceResponse.data\n        : [];\n\n      // Calcul de la pagination\n      const total = items.length;\n      const lastPage = Math.ceil(total / limit) || 1;\n      const startIndex = (page - 1) * limit;\n      const paginatedItems = items.slice(startIndex, startIndex + limit);\n\n      // Retourner la réponse paginée avec la même structure que votre responseService\n      return {\n        status: serviceResponse.status || 'success',\n        message: serviceResponse.message || 'Opération réussie',\n        data: paginatedItems,\n        meta: {\n          total,\n          page,\n          lastPage,\n          limit,\n        },\n      };\n    };\n\n    return descriptor;\n  };\n}\n                    \n                \n\n\n        \n    \n\n    src/module/product/entities/product.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n    src/module/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
